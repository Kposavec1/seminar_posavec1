
seminar_posavec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007978  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08007b48  08007b48  00008b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed0  08007ed0  000091dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ed0  08007ed0  00008ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ed8  08007ed8  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed8  08007ed8  00008ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007edc  08007edc  00008edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08007ee0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001dc  080080bc  000091dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  080080bc  00009488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f17a  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024fe  00000000  00000000  00018386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000acf  00000000  00000000  0001b670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f4f  00000000  00000000  0001c13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001170b  00000000  00000000  0003f08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2b52  00000000  00000000  00050799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001232eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004974  00000000  00000000  00123330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00127ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b30 	.word	0x08007b30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007b30 	.word	0x08007b30

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b96a 	b.w	8000f14 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	460c      	mov	r4, r1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d14e      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c64:	4694      	mov	ip, r2
 8000c66:	458c      	cmp	ip, r1
 8000c68:	4686      	mov	lr, r0
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	d962      	bls.n	8000d36 <__udivmoddi4+0xde>
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0320 	rsb	r3, r2, #32
 8000c76:	4091      	lsls	r1, r2
 8000c78:	fa20 f303 	lsr.w	r3, r0, r3
 8000c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c80:	4319      	orrs	r1, r3
 8000c82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f f68c 	uxth.w	r6, ip
 8000c8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb07 1114 	mls	r1, r7, r4, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb04 f106 	mul.w	r1, r4, r6
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cae:	f080 8112 	bcs.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 810f 	bls.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb8:	3c02      	subs	r4, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a59      	subs	r1, r3, r1
 8000cbe:	fa1f f38e 	uxth.w	r3, lr
 8000cc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f606 	mul.w	r6, r0, r6
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x94>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cde:	f080 80fc 	bcs.w	8000eda <__udivmoddi4+0x282>
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	f240 80f9 	bls.w	8000eda <__udivmoddi4+0x282>
 8000ce8:	4463      	add	r3, ip
 8000cea:	3802      	subs	r0, #2
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	b11d      	cbz	r5, 8000cfe <__udivmoddi4+0xa6>
 8000cf6:	40d3      	lsrs	r3, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d905      	bls.n	8000d12 <__udivmoddi4+0xba>
 8000d06:	b10d      	cbz	r5, 8000d0c <__udivmoddi4+0xb4>
 8000d08:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e7f5      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d12:	fab3 f183 	clz	r1, r3
 8000d16:	2900      	cmp	r1, #0
 8000d18:	d146      	bne.n	8000da8 <__udivmoddi4+0x150>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xcc>
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	f0c0 80f0 	bcc.w	8000f04 <__udivmoddi4+0x2ac>
 8000d24:	1a86      	subs	r6, r0, r2
 8000d26:	eb64 0303 	sbc.w	r3, r4, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d0e6      	beq.n	8000cfe <__udivmoddi4+0xa6>
 8000d30:	e9c5 6300 	strd	r6, r3, [r5]
 8000d34:	e7e3      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	f040 8090 	bne.w	8000e5c <__udivmoddi4+0x204>
 8000d3c:	eba1 040c 	sub.w	r4, r1, ip
 8000d40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d44:	fa1f f78c 	uxth.w	r7, ip
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d52:	fb08 4416 	mls	r4, r8, r6, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb07 f006 	mul.w	r0, r7, r6
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x11c>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x11a>
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	f200 80cd 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d72:	4626      	mov	r6, r4
 8000d74:	1a1c      	subs	r4, r3, r0
 8000d76:	fa1f f38e 	uxth.w	r3, lr
 8000d7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb00 f707 	mul.w	r7, r0, r7
 8000d8a:	429f      	cmp	r7, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x148>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x146>
 8000d98:	429f      	cmp	r7, r3
 8000d9a:	f200 80b0 	bhi.w	8000efe <__udivmoddi4+0x2a6>
 8000d9e:	4620      	mov	r0, r4
 8000da0:	1bdb      	subs	r3, r3, r7
 8000da2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da6:	e7a5      	b.n	8000cf4 <__udivmoddi4+0x9c>
 8000da8:	f1c1 0620 	rsb	r6, r1, #32
 8000dac:	408b      	lsls	r3, r1
 8000dae:	fa22 f706 	lsr.w	r7, r2, r6
 8000db2:	431f      	orrs	r7, r3
 8000db4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dbc:	ea43 030c 	orr.w	r3, r3, ip
 8000dc0:	40f4      	lsrs	r4, r6
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	0c38      	lsrs	r0, r7, #16
 8000dc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dcc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dd0:	fa1f fc87 	uxth.w	ip, r7
 8000dd4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ddc:	fb0e f90c 	mul.w	r9, lr, ip
 8000de0:	45a1      	cmp	r9, r4
 8000de2:	fa02 f201 	lsl.w	r2, r2, r1
 8000de6:	d90a      	bls.n	8000dfe <__udivmoddi4+0x1a6>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dee:	f080 8084 	bcs.w	8000efa <__udivmoddi4+0x2a2>
 8000df2:	45a1      	cmp	r9, r4
 8000df4:	f240 8081 	bls.w	8000efa <__udivmoddi4+0x2a2>
 8000df8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	eba4 0409 	sub.w	r4, r4, r9
 8000e02:	fa1f f983 	uxth.w	r9, r3
 8000e06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e16:	45a4      	cmp	ip, r4
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x1d2>
 8000e1a:	193c      	adds	r4, r7, r4
 8000e1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e20:	d267      	bcs.n	8000ef2 <__udivmoddi4+0x29a>
 8000e22:	45a4      	cmp	ip, r4
 8000e24:	d965      	bls.n	8000ef2 <__udivmoddi4+0x29a>
 8000e26:	3b02      	subs	r3, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e32:	eba4 040c 	sub.w	r4, r4, ip
 8000e36:	429c      	cmp	r4, r3
 8000e38:	46ce      	mov	lr, r9
 8000e3a:	469c      	mov	ip, r3
 8000e3c:	d351      	bcc.n	8000ee2 <__udivmoddi4+0x28a>
 8000e3e:	d04e      	beq.n	8000ede <__udivmoddi4+0x286>
 8000e40:	b155      	cbz	r5, 8000e58 <__udivmoddi4+0x200>
 8000e42:	ebb8 030e 	subs.w	r3, r8, lr
 8000e46:	eb64 040c 	sbc.w	r4, r4, ip
 8000e4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4e:	40cb      	lsrs	r3, r1
 8000e50:	431e      	orrs	r6, r3
 8000e52:	40cc      	lsrs	r4, r1
 8000e54:	e9c5 6400 	strd	r6, r4, [r5]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	e750      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f103 	lsr.w	r1, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	fa24 f303 	lsr.w	r3, r4, r3
 8000e6c:	4094      	lsls	r4, r2
 8000e6e:	430c      	orrs	r4, r1
 8000e70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e78:	fa1f f78c 	uxth.w	r7, ip
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3110 	mls	r1, r8, r0, r3
 8000e84:	0c23      	lsrs	r3, r4, #16
 8000e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8a:	fb00 f107 	mul.w	r1, r0, r7
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x24c>
 8000e92:	eb1c 0303 	adds.w	r3, ip, r3
 8000e96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e9a:	d22c      	bcs.n	8000ef6 <__udivmoddi4+0x29e>
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	d92a      	bls.n	8000ef6 <__udivmoddi4+0x29e>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eac:	fb08 3311 	mls	r3, r8, r1, r3
 8000eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb4:	fb01 f307 	mul.w	r3, r1, r7
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x276>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ec4:	d213      	bcs.n	8000eee <__udivmoddi4+0x296>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d911      	bls.n	8000eee <__udivmoddi4+0x296>
 8000eca:	3902      	subs	r1, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	1ae4      	subs	r4, r4, r3
 8000ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ed4:	e739      	b.n	8000d4a <__udivmoddi4+0xf2>
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	e6f0      	b.n	8000cbc <__udivmoddi4+0x64>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e706      	b.n	8000cec <__udivmoddi4+0x94>
 8000ede:	45c8      	cmp	r8, r9
 8000ee0:	d2ae      	bcs.n	8000e40 <__udivmoddi4+0x1e8>
 8000ee2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ee6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eea:	3801      	subs	r0, #1
 8000eec:	e7a8      	b.n	8000e40 <__udivmoddi4+0x1e8>
 8000eee:	4631      	mov	r1, r6
 8000ef0:	e7ed      	b.n	8000ece <__udivmoddi4+0x276>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	e799      	b.n	8000e2a <__udivmoddi4+0x1d2>
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	e7d4      	b.n	8000ea4 <__udivmoddi4+0x24c>
 8000efa:	46d6      	mov	lr, sl
 8000efc:	e77f      	b.n	8000dfe <__udivmoddi4+0x1a6>
 8000efe:	4463      	add	r3, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e74d      	b.n	8000da0 <__udivmoddi4+0x148>
 8000f04:	4606      	mov	r6, r0
 8000f06:	4623      	mov	r3, r4
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e70f      	b.n	8000d2c <__udivmoddi4+0xd4>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	4463      	add	r3, ip
 8000f10:	e730      	b.n	8000d74 <__udivmoddi4+0x11c>
 8000f12:	bf00      	nop

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <MX_GPIO_Init+0x9c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb4 <MX_GPIO_Init+0x9c>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <MX_GPIO_Init+0x9c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <MX_GPIO_Init+0x9c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a18      	ldr	r2, [pc, #96]	@ (8000fb4 <MX_GPIO_Init+0x9c>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <MX_GPIO_Init+0x9c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <MX_GPIO_Init+0x9c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a11      	ldr	r2, [pc, #68]	@ (8000fb4 <MX_GPIO_Init+0x9c>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <MX_GPIO_Init+0x9c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f88:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <MX_GPIO_Init+0xa0>)
 8000f8a:	f001 f9f9 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4804      	ldr	r0, [pc, #16]	@ (8000fb8 <MX_GPIO_Init+0xa0>)
 8000fa8:	f001 f856 	bl	8002058 <HAL_GPIO_Init>

}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000

08000fbc <mikrosekunda>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void mikrosekunda (uint16_t time)
 {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
 	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <mikrosekunda+0x30>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000fce:	bf00      	nop
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <mikrosekunda+0x30>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3f9      	bcc.n	8000fd0 <mikrosekunda+0x14>
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000218 	.word	0x20000218

08000ff0 <HCSR04_Read>:

void HCSR04_Read (void)
	{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ffa:	480b      	ldr	r0, [pc, #44]	@ (8001028 <HCSR04_Read+0x38>)
 8000ffc:	f001 f9c0 	bl	8002380 <HAL_GPIO_WritePin>
		mikrosekunda(10);
 8001000:	200a      	movs	r0, #10
 8001002:	f7ff ffdb 	bl	8000fbc <mikrosekunda>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800100c:	4806      	ldr	r0, [pc, #24]	@ (8001028 <HCSR04_Read+0x38>)
 800100e:	f001 f9b7 	bl	8002380 <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HCSR04_Read+0x3c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <HCSR04_Read+0x3c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0202 	orr.w	r2, r2, #2
 8001020:	60da      	str	r2, [r3, #12]
	}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40020000 	.word	0x40020000
 800102c:	20000218 	.word	0x20000218

08001030 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7f1b      	ldrb	r3, [r3, #28]
 800103c:	2b01      	cmp	r3, #1
 800103e:	f040 8083 	bne.w	8001148 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Prvi==0)
 8001042:	4b45      	ldr	r3, [pc, #276]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d11a      	bne.n	8001080 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			Var1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800104a:	2100      	movs	r1, #0
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f002 fbf1 	bl	8003834 <HAL_TIM_ReadCapturedValue>
 8001052:	4603      	mov	r3, r0
 8001054:	4a41      	ldr	r2, [pc, #260]	@ (800115c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001056:	6013      	str	r3, [r2, #0]
			Prvi = 1;
 8001058:	4b3f      	ldr	r3, [pc, #252]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x128>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6a1a      	ldr	r2, [r3, #32]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 020a 	bic.w	r2, r2, #10
 800106c:	621a      	str	r2, [r3, #32]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6a1a      	ldr	r2, [r3, #32]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f042 0202 	orr.w	r2, r2, #2
 800107c:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 800107e:	e063      	b.n	8001148 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Prvi==1)
 8001080:	4b35      	ldr	r3, [pc, #212]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d15f      	bne.n	8001148 <HAL_TIM_IC_CaptureCallback+0x118>
			Var2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001088:	2100      	movs	r1, #0
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f002 fbd2 	bl	8003834 <HAL_TIM_ReadCapturedValue>
 8001090:	4603      	mov	r3, r0
 8001092:	4a33      	ldr	r2, [pc, #204]	@ (8001160 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001094:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (Var2 > Var1)
 800109e:	4b30      	ldr	r3, [pc, #192]	@ (8001160 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b2e      	ldr	r3, [pc, #184]	@ (800115c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d907      	bls.n	80010ba <HAL_TIM_IC_CaptureCallback+0x8a>
				Razlika = Var2-Var1;
 80010aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001160 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b2b      	ldr	r3, [pc, #172]	@ (800115c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001164 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e00f      	b.n	80010da <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (Var1 > Var2)
 80010ba:	4b28      	ldr	r3, [pc, #160]	@ (800115c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d909      	bls.n	80010da <HAL_TIM_IC_CaptureCallback+0xaa>
				Razlika = (0xffff - Var1) + Var2;
 80010c6:	4b26      	ldr	r3, [pc, #152]	@ (8001160 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b24      	ldr	r3, [pc, #144]	@ (800115c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80010d4:	33ff      	adds	r3, #255	@ 0xff
 80010d6:	4a23      	ldr	r2, [pc, #140]	@ (8001164 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010d8:	6013      	str	r3, [r2, #0]
			Udaljenost = Razlika * 0.034/2;
 80010da:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fa30 	bl	8000544 <__aeabi_ui2d>
 80010e4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001150 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff faa5 	bl	8000638 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010fe:	f7ff fbc5 	bl	800088c <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd6d 	bl	8000be8 <__aeabi_d2uiz>
 800110e:	4603      	mov	r3, r0
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001114:	701a      	strb	r2, [r3, #0]
			Prvi = 0;
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6a1a      	ldr	r2, [r3, #32]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 020a 	bic.w	r2, r2, #10
 800112a:	621a      	str	r2, [r3, #32]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6a12      	ldr	r2, [r2, #32]
 8001136:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001138:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0202 	bic.w	r2, r2, #2
 8001146:	60da      	str	r2, [r3, #12]
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	b020c49c 	.word	0xb020c49c
 8001154:	3fa16872 	.word	0x3fa16872
 8001158:	20000204 	.word	0x20000204
 800115c:	200001f8 	.word	0x200001f8
 8001160:	200001fc 	.word	0x200001fc
 8001164:	20000200 	.word	0x20000200
 8001168:	20000205 	.word	0x20000205
 800116c:	20000218 	.word	0x20000218

08001170 <HAL_UART_RxCpltCallback>:
volatile uint32_t motor_start = 0;
volatile uint8_t motor_rad = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a25      	ldr	r2, [pc, #148]	@ (8001214 <HAL_UART_RxCpltCallback+0xa4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d143      	bne.n	800120a <HAL_UART_RxCpltCallback+0x9a>
    {
        if (RX_TEKST[0] == '1' && !motor_rad)
 8001182:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <HAL_UART_RxCpltCallback+0xa8>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b31      	cmp	r3, #49	@ 0x31
 8001188:	d11b      	bne.n	80011c2 <HAL_UART_RxCpltCallback+0x52>
 800118a:	4b24      	ldr	r3, [pc, #144]	@ (800121c <HAL_UART_RxCpltCallback+0xac>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d116      	bne.n	80011c2 <HAL_UART_RxCpltCallback+0x52>
        {
            HAL_UART_Transmit(&huart3, TX_tekstA, sizeof(TX_tekstA) - 1, 10);
 8001194:	230a      	movs	r3, #10
 8001196:	2202      	movs	r2, #2
 8001198:	4921      	ldr	r1, [pc, #132]	@ (8001220 <HAL_UART_RxCpltCallback+0xb0>)
 800119a:	4822      	ldr	r0, [pc, #136]	@ (8001224 <HAL_UART_RxCpltCallback+0xb4>)
 800119c:	f003 f842 	bl	8004224 <HAL_UART_Transmit>

            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 80);
 80011a0:	4b21      	ldr	r3, [pc, #132]	@ (8001228 <HAL_UART_RxCpltCallback+0xb8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2250      	movs	r2, #80	@ 0x50
 80011a6:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80011a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <HAL_UART_RxCpltCallback+0xb8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	639a      	str	r2, [r3, #56]	@ 0x38

            motor_start = HAL_GetTick();
 80011b0:	f000 fd7e 	bl	8001cb0 <HAL_GetTick>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a1d      	ldr	r2, [pc, #116]	@ (800122c <HAL_UART_RxCpltCallback+0xbc>)
 80011b8:	6013      	str	r3, [r2, #0]
            motor_rad = 1;
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <HAL_UART_RxCpltCallback+0xac>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e01e      	b.n	8001200 <HAL_UART_RxCpltCallback+0x90>
        }
        else if (RX_TEKST[0] == '0' && !motor_rad)
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <HAL_UART_RxCpltCallback+0xa8>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b30      	cmp	r3, #48	@ 0x30
 80011c8:	d11a      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x90>
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <HAL_UART_RxCpltCallback+0xac>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d115      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x90>
        {
            HAL_UART_Transmit(&huart3, TX_tekstB, sizeof(TX_tekstB) - 1, 10);
 80011d4:	230a      	movs	r3, #10
 80011d6:	2203      	movs	r2, #3
 80011d8:	4915      	ldr	r1, [pc, #84]	@ (8001230 <HAL_UART_RxCpltCallback+0xc0>)
 80011da:	4812      	ldr	r0, [pc, #72]	@ (8001224 <HAL_UART_RxCpltCallback+0xb4>)
 80011dc:	f003 f822 	bl	8004224 <HAL_UART_Transmit>

            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <HAL_UART_RxCpltCallback+0xb8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 80);
 80011e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <HAL_UART_RxCpltCallback+0xb8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2250      	movs	r2, #80	@ 0x50
 80011ee:	639a      	str	r2, [r3, #56]	@ 0x38

            motor_start = HAL_GetTick();
 80011f0:	f000 fd5e 	bl	8001cb0 <HAL_GetTick>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <HAL_UART_RxCpltCallback+0xbc>)
 80011f8:	6013      	str	r3, [r2, #0]
            motor_rad = 1;
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HAL_UART_RxCpltCallback+0xac>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart3, RX_TEKST, 1);
 8001200:	2201      	movs	r2, #1
 8001202:	4905      	ldr	r1, [pc, #20]	@ (8001218 <HAL_UART_RxCpltCallback+0xa8>)
 8001204:	4807      	ldr	r0, [pc, #28]	@ (8001224 <HAL_UART_RxCpltCallback+0xb4>)
 8001206:	f003 f898 	bl	800433a <HAL_UART_Receive_IT>
    }
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40004800 	.word	0x40004800
 8001218:	20000208 	.word	0x20000208
 800121c:	20000210 	.word	0x20000210
 8001220:	20000000 	.word	0x20000000
 8001224:	200002f0 	.word	0x200002f0
 8001228:	200002a8 	.word	0x200002a8
 800122c:	2000020c 	.word	0x2000020c
 8001230:	20000004 	.word	0x20000004

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001238:	f000 fcd4 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123c:	f000 f862 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001240:	f7ff fe6a 	bl	8000f18 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001244:	f000 fa14 	bl	8001670 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001248:	f000 fa68 	bl	800171c <MX_TIM2_Init>
  MX_TIM3_Init();
 800124c:	f000 fabe 	bl	80017cc <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001250:	f000 fc24 	bl	8001a9c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001254:	2100      	movs	r1, #0
 8001256:	4823      	ldr	r0, [pc, #140]	@ (80012e4 <main+0xb0>)
 8001258:	f001 ff76 	bl	8003148 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800125c:	2104      	movs	r1, #4
 800125e:	4822      	ldr	r0, [pc, #136]	@ (80012e8 <main+0xb4>)
 8001260:	f001 fe5a 	bl	8002f18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001264:	2104      	movs	r1, #4
 8001266:	4821      	ldr	r0, [pc, #132]	@ (80012ec <main+0xb8>)
 8001268:	f001 fe56 	bl	8002f18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800126c:	210c      	movs	r1, #12
 800126e:	481f      	ldr	r0, [pc, #124]	@ (80012ec <main+0xb8>)
 8001270:	f001 fe52 	bl	8002f18 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, RX_TEKST, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	491e      	ldr	r1, [pc, #120]	@ (80012f0 <main+0xbc>)
 8001278:	481e      	ldr	r0, [pc, #120]	@ (80012f4 <main+0xc0>)
 800127a:	f003 f85e 	bl	800433a <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (motor_rad && (HAL_GetTick() - motor_start >= 7000))
 800127e:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <main+0xc4>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d014      	beq.n	80012b2 <main+0x7e>
 8001288:	f000 fd12 	bl	8001cb0 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <main+0xc8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8001298:	4293      	cmp	r3, r2
 800129a:	d90a      	bls.n	80012b2 <main+0x7e>
	 		   {
	 		  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 800129c:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <main+0xb8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2200      	movs	r2, #0
 80012a2:	641a      	str	r2, [r3, #64]	@ 0x40
	 		  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80012a4:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <main+0xb8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	639a      	str	r2, [r3, #56]	@ 0x38
	 		  	  	motor_rad = 0;
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <main+0xc4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
	 		  	  		 }
	  HAL_Delay(10);
 80012b2:	200a      	movs	r0, #10
 80012b4:	f000 fd08 	bl	8001cc8 <HAL_Delay>
	  HCSR04_Read();
 80012b8:	f7ff fe9a 	bl	8000ff0 <HCSR04_Read>

		  	  	  if (Udaljenost<=5){
 80012bc:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <main+0xcc>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b05      	cmp	r3, #5
 80012c2:	d808      	bhi.n	80012d6 <main+0xa2>
		  	  	  HAL_Delay(200);
 80012c4:	20c8      	movs	r0, #200	@ 0xc8
 80012c6:	f000 fcff 	bl	8001cc8 <HAL_Delay>
		  	  		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,2500);
 80012ca:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <main+0xb4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80012d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80012d4:	e7d3      	b.n	800127e <main+0x4a>

		  	  	  }
	       else{

	    		 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,1500);
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <main+0xb4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80012de:	639a      	str	r2, [r3, #56]	@ 0x38
	  if (motor_rad && (HAL_GetTick() - motor_start >= 7000))
 80012e0:	e7cd      	b.n	800127e <main+0x4a>
 80012e2:	bf00      	nop
 80012e4:	20000218 	.word	0x20000218
 80012e8:	20000260 	.word	0x20000260
 80012ec:	200002a8 	.word	0x200002a8
 80012f0:	20000208 	.word	0x20000208
 80012f4:	200002f0 	.word	0x200002f0
 80012f8:	20000210 	.word	0x20000210
 80012fc:	2000020c 	.word	0x2000020c
 8001300:	20000205 	.word	0x20000205

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b094      	sub	sp, #80	@ 0x50
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	2234      	movs	r2, #52	@ 0x34
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f004 fce9 	bl	8005cea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b29      	ldr	r3, [pc, #164]	@ (80013d4 <SystemClock_Config+0xd0>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001330:	4a28      	ldr	r2, [pc, #160]	@ (80013d4 <SystemClock_Config+0xd0>)
 8001332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001336:	6413      	str	r3, [r2, #64]	@ 0x40
 8001338:	4b26      	ldr	r3, [pc, #152]	@ (80013d4 <SystemClock_Config+0xd0>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001344:	2300      	movs	r3, #0
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4b23      	ldr	r3, [pc, #140]	@ (80013d8 <SystemClock_Config+0xd4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001350:	4a21      	ldr	r2, [pc, #132]	@ (80013d8 <SystemClock_Config+0xd4>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <SystemClock_Config+0xd4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001364:	2302      	movs	r3, #2
 8001366:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001368:	2301      	movs	r3, #1
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136c:	2310      	movs	r3, #16
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001370:	2302      	movs	r3, #2
 8001372:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001374:	2300      	movs	r3, #0
 8001376:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001378:	2308      	movs	r3, #8
 800137a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 800137c:	2340      	movs	r3, #64	@ 0x40
 800137e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001380:	2302      	movs	r3, #2
 8001382:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001388:	2302      	movs	r3, #2
 800138a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4618      	mov	r0, r3
 8001392:	f001 fad3 	bl	800293c <HAL_RCC_OscConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800139c:	f000 f81e 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a0:	230f      	movs	r3, #15
 80013a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80013a4:	2303      	movs	r3, #3
 80013a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80013a8:	2380      	movs	r3, #128	@ 0x80
 80013aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	2101      	movs	r1, #1
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fffa 	bl	80023b4 <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013c6:	f000 f809 	bl	80013dc <Error_Handler>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3750      	adds	r7, #80	@ 0x50
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40007000 	.word	0x40007000

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <Error_Handler+0x8>

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	@ (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	@ 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <NMI_Handler+0x4>

08001440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <MemManage_Handler+0x4>

08001450 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <UsageFault_Handler+0x4>

08001460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148e:	f000 fbfb 	bl	8001c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <TIM1_CC_IRQHandler+0x10>)
 800149e:	f001 ff7b 	bl	8003398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000218 	.word	0x20000218

080014ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <USART3_IRQHandler+0x10>)
 80014b2:	f002 ff67 	bl	8004384 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200002f0 	.word	0x200002f0

080014c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return 1;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_kill>:

int _kill(int pid, int sig)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014da:	f004 fc59 	bl	8005d90 <__errno>
 80014de:	4603      	mov	r3, r0
 80014e0:	2216      	movs	r2, #22
 80014e2:	601a      	str	r2, [r3, #0]
  return -1;
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_exit>:

void _exit (int status)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ffe7 	bl	80014d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001502:	bf00      	nop
 8001504:	e7fd      	b.n	8001502 <_exit+0x12>

08001506 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e00a      	b.n	800152e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001518:	f3af 8000 	nop.w
 800151c:	4601      	mov	r1, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	60ba      	str	r2, [r7, #8]
 8001524:	b2ca      	uxtb	r2, r1
 8001526:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	dbf0      	blt.n	8001518 <_read+0x12>
  }

  return len;
 8001536:	687b      	ldr	r3, [r7, #4]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e009      	b.n	8001566 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	60ba      	str	r2, [r7, #8]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	429a      	cmp	r2, r3
 800156c:	dbf1      	blt.n	8001552 <_write+0x12>
  }
  return len;
 800156e:	687b      	ldr	r3, [r7, #4]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_close>:

int _close(int file)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a0:	605a      	str	r2, [r3, #4]
  return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_isatty>:

int _isatty(int file)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b085      	sub	sp, #20
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e8:	4a14      	ldr	r2, [pc, #80]	@ (800163c <_sbrk+0x5c>)
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <_sbrk+0x60>)
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <_sbrk+0x64>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <_sbrk+0x68>)
 8001600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	429a      	cmp	r2, r3
 800160e:	d207      	bcs.n	8001620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001610:	f004 fbbe 	bl	8005d90 <__errno>
 8001614:	4603      	mov	r3, r0
 8001616:	220c      	movs	r2, #12
 8001618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	e009      	b.n	8001634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <_sbrk+0x64>)
 8001630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20020000 	.word	0x20020000
 8001640:	00000400 	.word	0x00000400
 8001644:	20000214 	.word	0x20000214
 8001648:	20000488 	.word	0x20000488

0800164c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <SystemInit+0x20>)
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001656:	4a05      	ldr	r2, [pc, #20]	@ (800166c <SystemInit+0x20>)
 8001658:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800165c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001680:	463b      	mov	r3, r7
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800168c:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <MX_TIM1_Init+0xa4>)
 800168e:	4a22      	ldr	r2, [pc, #136]	@ (8001718 <MX_TIM1_Init+0xa8>)
 8001690:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <MX_TIM1_Init+0xa4>)
 8001694:	221f      	movs	r2, #31
 8001696:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <MX_TIM1_Init+0xa4>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800169e:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <MX_TIM1_Init+0xa4>)
 80016a0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80016a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <MX_TIM1_Init+0xa4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <MX_TIM1_Init+0xa4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b2:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <MX_TIM1_Init+0xa4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80016b8:	4816      	ldr	r0, [pc, #88]	@ (8001714 <MX_TIM1_Init+0xa4>)
 80016ba:	f001 fcf5 	bl	80030a8 <HAL_TIM_IC_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016c4:	f7ff fe8a 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4619      	mov	r1, r3
 80016d6:	480f      	ldr	r0, [pc, #60]	@ (8001714 <MX_TIM1_Init+0xa4>)
 80016d8:	f002 fcc4 	bl	8004064 <HAL_TIMEx_MasterConfigSynchronization>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80016e2:	f7ff fe7b 	bl	80013dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016ea:	2301      	movs	r3, #1
 80016ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016f6:	463b      	mov	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_TIM1_Init+0xa4>)
 80016fe:	f001 ff3b 	bl	8003578 <HAL_TIM_IC_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001708:	f7ff fe68 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000218 	.word	0x20000218
 8001718:	40010000 	.word	0x40010000

0800171c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	@ 0x28
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800173e:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <MX_TIM2_Init+0xac>)
 8001740:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001744:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8001746:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <MX_TIM2_Init+0xac>)
 8001748:	221f      	movs	r2, #31
 800174a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <MX_TIM2_Init+0xac>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001752:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <MX_TIM2_Init+0xac>)
 8001754:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001758:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <MX_TIM2_Init+0xac>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001760:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <MX_TIM2_Init+0xac>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001766:	4818      	ldr	r0, [pc, #96]	@ (80017c8 <MX_TIM2_Init+0xac>)
 8001768:	f001 fb86 	bl	8002e78 <HAL_TIM_PWM_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001772:	f7ff fe33 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	4619      	mov	r1, r3
 8001784:	4810      	ldr	r0, [pc, #64]	@ (80017c8 <MX_TIM2_Init+0xac>)
 8001786:	f002 fc6d 	bl	8004064 <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001790:	f7ff fe24 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001794:	2360      	movs	r3, #96	@ 0x60
 8001796:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2204      	movs	r2, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	4807      	ldr	r0, [pc, #28]	@ (80017c8 <MX_TIM2_Init+0xac>)
 80017ac:	f001 ff80 	bl	80036b0 <HAL_TIM_PWM_ConfigChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80017b6:	f7ff fe11 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017ba:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <MX_TIM2_Init+0xac>)
 80017bc:	f000 f8f0 	bl	80019a0 <HAL_TIM_MspPostInit>

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	@ 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000260 	.word	0x20000260

080017cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ee:	4b27      	ldr	r3, [pc, #156]	@ (800188c <MX_TIM3_Init+0xc0>)
 80017f0:	4a27      	ldr	r2, [pc, #156]	@ (8001890 <MX_TIM3_Init+0xc4>)
 80017f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 80017f4:	4b25      	ldr	r3, [pc, #148]	@ (800188c <MX_TIM3_Init+0xc0>)
 80017f6:	221f      	movs	r2, #31
 80017f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fa:	4b24      	ldr	r3, [pc, #144]	@ (800188c <MX_TIM3_Init+0xc0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001800:	4b22      	ldr	r3, [pc, #136]	@ (800188c <MX_TIM3_Init+0xc0>)
 8001802:	2263      	movs	r2, #99	@ 0x63
 8001804:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001806:	4b21      	ldr	r3, [pc, #132]	@ (800188c <MX_TIM3_Init+0xc0>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180c:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <MX_TIM3_Init+0xc0>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001812:	481e      	ldr	r0, [pc, #120]	@ (800188c <MX_TIM3_Init+0xc0>)
 8001814:	f001 fb30 	bl	8002e78 <HAL_TIM_PWM_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800181e:	f7ff fddd 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800182a:	f107 0320 	add.w	r3, r7, #32
 800182e:	4619      	mov	r1, r3
 8001830:	4816      	ldr	r0, [pc, #88]	@ (800188c <MX_TIM3_Init+0xc0>)
 8001832:	f002 fc17 	bl	8004064 <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800183c:	f7ff fdce 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001840:	2360      	movs	r3, #96	@ 0x60
 8001842:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2204      	movs	r2, #4
 8001854:	4619      	mov	r1, r3
 8001856:	480d      	ldr	r0, [pc, #52]	@ (800188c <MX_TIM3_Init+0xc0>)
 8001858:	f001 ff2a 	bl	80036b0 <HAL_TIM_PWM_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001862:	f7ff fdbb 	bl	80013dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	220c      	movs	r2, #12
 800186a:	4619      	mov	r1, r3
 800186c:	4807      	ldr	r0, [pc, #28]	@ (800188c <MX_TIM3_Init+0xc0>)
 800186e:	f001 ff1f 	bl	80036b0 <HAL_TIM_PWM_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001878:	f7ff fdb0 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800187c:	4803      	ldr	r0, [pc, #12]	@ (800188c <MX_TIM3_Init+0xc0>)
 800187e:	f000 f88f 	bl	80019a0 <HAL_TIM_MspPostInit>

}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	@ 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200002a8 	.word	0x200002a8
 8001890:	40000400 	.word	0x40000400

08001894 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	@ 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001928 <HAL_TIM_IC_MspInit+0x94>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d134      	bne.n	8001920 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <HAL_TIM_IC_MspInit+0x98>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	4a1b      	ldr	r2, [pc, #108]	@ (800192c <HAL_TIM_IC_MspInit+0x98>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c6:	4b19      	ldr	r3, [pc, #100]	@ (800192c <HAL_TIM_IC_MspInit+0x98>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <HAL_TIM_IC_MspInit+0x98>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a14      	ldr	r2, [pc, #80]	@ (800192c <HAL_TIM_IC_MspInit+0x98>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HAL_TIM_IC_MspInit+0x98>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001900:	2301      	movs	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	4809      	ldr	r0, [pc, #36]	@ (8001930 <HAL_TIM_IC_MspInit+0x9c>)
 800190c:	f000 fba4 	bl	8002058 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2102      	movs	r1, #2
 8001914:	201b      	movs	r0, #27
 8001916:	f000 fad6 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800191a:	201b      	movs	r0, #27
 800191c:	f000 faef 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	@ 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40010000 	.word	0x40010000
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001944:	d10e      	bne.n	8001964 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <HAL_TIM_PWM_MspInit+0x64>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <HAL_TIM_PWM_MspInit+0x64>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <HAL_TIM_PWM_MspInit+0x64>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001962:	e012      	b.n	800198a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0c      	ldr	r2, [pc, #48]	@ (800199c <HAL_TIM_PWM_MspInit+0x68>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10d      	bne.n	800198a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <HAL_TIM_PWM_MspInit+0x64>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	4a08      	ldr	r2, [pc, #32]	@ (8001998 <HAL_TIM_PWM_MspInit+0x64>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6413      	str	r3, [r2, #64]	@ 0x40
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_TIM_PWM_MspInit+0x64>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40000400 	.word	0x40000400

080019a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	@ 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019c0:	d11e      	bne.n	8001a00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b31      	ldr	r3, [pc, #196]	@ (8001a8c <HAL_TIM_MspPostInit+0xec>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a30      	ldr	r2, [pc, #192]	@ (8001a8c <HAL_TIM_MspPostInit+0xec>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a8c <HAL_TIM_MspPostInit+0xec>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019de:	2302      	movs	r3, #2
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019ee:	2301      	movs	r3, #1
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4825      	ldr	r0, [pc, #148]	@ (8001a90 <HAL_TIM_MspPostInit+0xf0>)
 80019fa:	f000 fb2d 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019fe:	e040      	b.n	8001a82 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a23      	ldr	r2, [pc, #140]	@ (8001a94 <HAL_TIM_MspPostInit+0xf4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d13b      	bne.n	8001a82 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <HAL_TIM_MspPostInit+0xec>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a1e      	ldr	r2, [pc, #120]	@ (8001a8c <HAL_TIM_MspPostInit+0xec>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a8c <HAL_TIM_MspPostInit+0xec>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <HAL_TIM_MspPostInit+0xec>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a17      	ldr	r2, [pc, #92]	@ (8001a8c <HAL_TIM_MspPostInit+0xec>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <HAL_TIM_MspPostInit+0xec>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a42:	2380      	movs	r3, #128	@ 0x80
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a52:	2302      	movs	r3, #2
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	@ (8001a90 <HAL_TIM_MspPostInit+0xf0>)
 8001a5e:	f000 fafb 	bl	8002058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a62:	2302      	movs	r3, #2
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a72:	2302      	movs	r3, #2
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4806      	ldr	r0, [pc, #24]	@ (8001a98 <HAL_TIM_MspPostInit+0xf8>)
 8001a7e:	f000 faeb 	bl	8002058 <HAL_GPIO_Init>
}
 8001a82:	bf00      	nop
 8001a84:	3728      	adds	r7, #40	@ 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40000400 	.word	0x40000400
 8001a98:	40020400 	.word	0x40020400

08001a9c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <MX_USART3_UART_Init+0x50>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001aa8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001aac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ad4:	f002 fb56 	bl	8004184 <HAL_UART_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ade:	f7ff fc7d 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200002f0 	.word	0x200002f0
 8001aec:	40004800 	.word	0x40004800

08001af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	@ 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b84 <HAL_UART_MspInit+0x94>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d134      	bne.n	8001b7c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <HAL_UART_MspInit+0x98>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001b88 <HAL_UART_MspInit+0x98>)
 8001b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b22:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <HAL_UART_MspInit+0x98>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <HAL_UART_MspInit+0x98>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a14      	ldr	r2, [pc, #80]	@ (8001b88 <HAL_UART_MspInit+0x98>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <HAL_UART_MspInit+0x98>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001b4a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	4809      	ldr	r0, [pc, #36]	@ (8001b8c <HAL_UART_MspInit+0x9c>)
 8001b68:	f000 fa76 	bl	8002058 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2027      	movs	r0, #39	@ 0x27
 8001b72:	f000 f9a8 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b76:	2027      	movs	r0, #39	@ 0x27
 8001b78:	f000 f9c1 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3728      	adds	r7, #40	@ 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40004800 	.word	0x40004800
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020800 	.word	0x40020800

08001b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b94:	f7ff fd5a 	bl	800164c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b98:	480c      	ldr	r0, [pc, #48]	@ (8001bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9a:	490d      	ldr	r1, [pc, #52]	@ (8001bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f004 f8ed 	bl	8005d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc2:	f7ff fb37 	bl	8001234 <main>
  bx  lr    
 8001bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001bd4:	08007ee0 	.word	0x08007ee0
  ldr r2, =_sbss
 8001bd8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001bdc:	20000488 	.word	0x20000488

08001be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c24 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	@ (8001c24 <HAL_Init+0x40>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <HAL_Init+0x40>)
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	@ (8001c24 <HAL_Init+0x40>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f94f 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	200f      	movs	r0, #15
 8001c14:	f000 f808 	bl	8001c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fbe6 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_InitTick+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_InitTick+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f967 	bl	8001f1a <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00e      	b.n	8001c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d80a      	bhi.n	8001c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 f92f 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c68:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <HAL_InitTick+0x5c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20000010 	.word	0x20000010
 8001c84:	2000000c 	.word	0x2000000c

08001c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000010 	.word	0x20000010
 8001cac:	20000338 	.word	0x20000338

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000338 	.word	0x20000338

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_Delay+0x44>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffde 	bl	8001cb0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000010 	.word	0x20000010

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	@ (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4907      	ldr	r1, [pc, #28]	@ (8001dac <__NVIC_EnableIRQ+0x38>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	@ (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	@ (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	@ 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
         );
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	@ 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff8e 	bl	8001db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff29 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff3e 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff8e 	bl	8001e04 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5d 	bl	8001db0 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff31 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffa2 	bl	8001e6c <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff feb6 	bl	8001cb0 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d008      	beq.n	8001f64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2280      	movs	r2, #128	@ 0x80
 8001f56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e052      	b.n	800200a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0216 	bic.w	r2, r2, #22
 8001f72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d103      	bne.n	8001f94 <HAL_DMA_Abort+0x62>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0208 	bic.w	r2, r2, #8
 8001fa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb4:	e013      	b.n	8001fde <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb6:	f7ff fe7b 	bl	8001cb0 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b05      	cmp	r3, #5
 8001fc2:	d90c      	bls.n	8001fde <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2203      	movs	r2, #3
 8001fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e015      	b.n	800200a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e4      	bne.n	8001fb6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	223f      	movs	r2, #63	@ 0x3f
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d004      	beq.n	8002030 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2280      	movs	r2, #128	@ 0x80
 800202a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e00c      	b.n	800204a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2205      	movs	r2, #5
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	@ 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e165      	b.n	8002340 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	429a      	cmp	r2, r3
 800208e:	f040 8154 	bne.w	800233a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d005      	beq.n	80020aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d130      	bne.n	800210c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 0201 	and.w	r2, r3, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b03      	cmp	r3, #3
 8002116:	d017      	beq.n	8002148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d123      	bne.n	800219c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	69b9      	ldr	r1, [r7, #24]
 8002198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80ae 	beq.w	800233a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002358 <HAL_GPIO_Init+0x300>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002358 <HAL_GPIO_Init+0x300>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002358 <HAL_GPIO_Init+0x300>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021fa:	4a58      	ldr	r2, [pc, #352]	@ (800235c <HAL_GPIO_Init+0x304>)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	089b      	lsrs	r3, r3, #2
 8002200:	3302      	adds	r3, #2
 8002202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4f      	ldr	r2, [pc, #316]	@ (8002360 <HAL_GPIO_Init+0x308>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d025      	beq.n	8002272 <HAL_GPIO_Init+0x21a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4e      	ldr	r2, [pc, #312]	@ (8002364 <HAL_GPIO_Init+0x30c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01f      	beq.n	800226e <HAL_GPIO_Init+0x216>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4d      	ldr	r2, [pc, #308]	@ (8002368 <HAL_GPIO_Init+0x310>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d019      	beq.n	800226a <HAL_GPIO_Init+0x212>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4c      	ldr	r2, [pc, #304]	@ (800236c <HAL_GPIO_Init+0x314>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0x20e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4b      	ldr	r2, [pc, #300]	@ (8002370 <HAL_GPIO_Init+0x318>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00d      	beq.n	8002262 <HAL_GPIO_Init+0x20a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4a      	ldr	r2, [pc, #296]	@ (8002374 <HAL_GPIO_Init+0x31c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <HAL_GPIO_Init+0x206>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a49      	ldr	r2, [pc, #292]	@ (8002378 <HAL_GPIO_Init+0x320>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_GPIO_Init+0x202>
 8002256:	2306      	movs	r3, #6
 8002258:	e00c      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 800225a:	2307      	movs	r3, #7
 800225c:	e00a      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 800225e:	2305      	movs	r3, #5
 8002260:	e008      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 8002262:	2304      	movs	r3, #4
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 8002272:	2300      	movs	r3, #0
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	f002 0203 	and.w	r2, r2, #3
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4093      	lsls	r3, r2
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002284:	4935      	ldr	r1, [pc, #212]	@ (800235c <HAL_GPIO_Init+0x304>)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002292:	4b3a      	ldr	r3, [pc, #232]	@ (800237c <HAL_GPIO_Init+0x324>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022b6:	4a31      	ldr	r2, [pc, #196]	@ (800237c <HAL_GPIO_Init+0x324>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022bc:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <HAL_GPIO_Init+0x324>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e0:	4a26      	ldr	r2, [pc, #152]	@ (800237c <HAL_GPIO_Init+0x324>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022e6:	4b25      	ldr	r3, [pc, #148]	@ (800237c <HAL_GPIO_Init+0x324>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230a:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <HAL_GPIO_Init+0x324>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002310:	4b1a      	ldr	r3, [pc, #104]	@ (800237c <HAL_GPIO_Init+0x324>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002334:	4a11      	ldr	r2, [pc, #68]	@ (800237c <HAL_GPIO_Init+0x324>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3301      	adds	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	f67f ae96 	bls.w	8002074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3724      	adds	r7, #36	@ 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40013800 	.word	0x40013800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40021000 	.word	0x40021000
 8002374:	40021400 	.word	0x40021400
 8002378:	40021800 	.word	0x40021800
 800237c:	40013c00 	.word	0x40013c00

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800239c:	e003      	b.n	80023a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	041a      	lsls	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	619a      	str	r2, [r3, #24]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0cc      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b68      	ldr	r3, [pc, #416]	@ (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d90c      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b65      	ldr	r3, [pc, #404]	@ (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b63      	ldr	r3, [pc, #396]	@ (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0b8      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d020      	beq.n	800243e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002408:	4b59      	ldr	r3, [pc, #356]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a58      	ldr	r2, [pc, #352]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002412:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002420:	4b53      	ldr	r3, [pc, #332]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a52      	ldr	r2, [pc, #328]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800242a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242c:	4b50      	ldr	r3, [pc, #320]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	494d      	ldr	r1, [pc, #308]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d044      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b47      	ldr	r3, [pc, #284]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d119      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e07f      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d003      	beq.n	8002472 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246e:	2b03      	cmp	r3, #3
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b3f      	ldr	r3, [pc, #252]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06f      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b3b      	ldr	r3, [pc, #236]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e067      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	4b37      	ldr	r3, [pc, #220]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4934      	ldr	r1, [pc, #208]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a4:	f7ff fc04 	bl	8001cb0 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7ff fc00 	bl	8001cb0 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e04f      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 020c 	and.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1eb      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b25      	ldr	r3, [pc, #148]	@ (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d20c      	bcs.n	80024fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b22      	ldr	r3, [pc, #136]	@ (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b20      	ldr	r3, [pc, #128]	@ (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e032      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002508:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4916      	ldr	r1, [pc, #88]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002526:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	490e      	ldr	r1, [pc, #56]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800253a:	f000 f855 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 800253e:	4602      	mov	r2, r0
 8002540:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	490a      	ldr	r1, [pc, #40]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	5ccb      	ldrb	r3, [r1, r3]
 800254e:	fa22 f303 	lsr.w	r3, r2, r3
 8002552:	4a09      	ldr	r2, [pc, #36]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fb64 	bl	8001c28 <HAL_InitTick>

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023c00 	.word	0x40023c00
 8002570:	40023800 	.word	0x40023800
 8002574:	08007b48 	.word	0x08007b48
 8002578:	20000008 	.word	0x20000008
 800257c:	2000000c 	.word	0x2000000c

08002580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002584:	4b03      	ldr	r3, [pc, #12]	@ (8002594 <HAL_RCC_GetHCLKFreq+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000008 	.word	0x20000008

08002598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800259c:	f7ff fff0 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	0a9b      	lsrs	r3, r3, #10
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	4903      	ldr	r1, [pc, #12]	@ (80025bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40023800 	.word	0x40023800
 80025bc:	08007b58 	.word	0x08007b58

080025c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c4:	f7ff ffdc 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0b5b      	lsrs	r3, r3, #13
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4903      	ldr	r1, [pc, #12]	@ (80025e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40023800 	.word	0x40023800
 80025e4:	08007b58 	.word	0x08007b58

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ec:	b0a6      	sub	sp, #152	@ 0x98
 80025ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800260e:	4bc8      	ldr	r3, [pc, #800]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x348>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b0c      	cmp	r3, #12
 8002618:	f200 817e 	bhi.w	8002918 <HAL_RCC_GetSysClockFreq+0x330>
 800261c:	a201      	add	r2, pc, #4	@ (adr r2, 8002624 <HAL_RCC_GetSysClockFreq+0x3c>)
 800261e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002622:	bf00      	nop
 8002624:	08002659 	.word	0x08002659
 8002628:	08002919 	.word	0x08002919
 800262c:	08002919 	.word	0x08002919
 8002630:	08002919 	.word	0x08002919
 8002634:	08002661 	.word	0x08002661
 8002638:	08002919 	.word	0x08002919
 800263c:	08002919 	.word	0x08002919
 8002640:	08002919 	.word	0x08002919
 8002644:	08002669 	.word	0x08002669
 8002648:	08002919 	.word	0x08002919
 800264c:	08002919 	.word	0x08002919
 8002650:	08002919 	.word	0x08002919
 8002654:	080027d3 	.word	0x080027d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002658:	4bb6      	ldr	r3, [pc, #728]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x34c>)
 800265a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800265e:	e15f      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002660:	4bb5      	ldr	r3, [pc, #724]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x350>)
 8002662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002666:	e15b      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002668:	4bb1      	ldr	r3, [pc, #708]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x348>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002670:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002674:	4bae      	ldr	r3, [pc, #696]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x348>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d031      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002680:	4bab      	ldr	r3, [pc, #684]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x348>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	099b      	lsrs	r3, r3, #6
 8002686:	2200      	movs	r2, #0
 8002688:	66bb      	str	r3, [r7, #104]	@ 0x68
 800268a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800268c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800268e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002692:	663b      	str	r3, [r7, #96]	@ 0x60
 8002694:	2300      	movs	r3, #0
 8002696:	667b      	str	r3, [r7, #100]	@ 0x64
 8002698:	4ba7      	ldr	r3, [pc, #668]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x350>)
 800269a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800269e:	462a      	mov	r2, r5
 80026a0:	fb03 f202 	mul.w	r2, r3, r2
 80026a4:	2300      	movs	r3, #0
 80026a6:	4621      	mov	r1, r4
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	4aa2      	ldr	r2, [pc, #648]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x350>)
 80026b0:	4621      	mov	r1, r4
 80026b2:	fba1 1202 	umull	r1, r2, r1, r2
 80026b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026b8:	460a      	mov	r2, r1
 80026ba:	67ba      	str	r2, [r7, #120]	@ 0x78
 80026bc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80026be:	4413      	add	r3, r2
 80026c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026c6:	2200      	movs	r2, #0
 80026c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026ca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80026d4:	f7fe faa8 	bl	8000c28 <__aeabi_uldivmod>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4613      	mov	r3, r2
 80026de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80026e2:	e064      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e4:	4b92      	ldr	r3, [pc, #584]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x348>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	099b      	lsrs	r3, r3, #6
 80026ea:	2200      	movs	r2, #0
 80026ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80026ee:	657a      	str	r2, [r7, #84]	@ 0x54
 80026f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026f8:	2300      	movs	r3, #0
 80026fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026fc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002700:	4622      	mov	r2, r4
 8002702:	462b      	mov	r3, r5
 8002704:	f04f 0000 	mov.w	r0, #0
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	0159      	lsls	r1, r3, #5
 800270e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002712:	0150      	lsls	r0, r2, #5
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4621      	mov	r1, r4
 800271a:	1a51      	subs	r1, r2, r1
 800271c:	6139      	str	r1, [r7, #16]
 800271e:	4629      	mov	r1, r5
 8002720:	eb63 0301 	sbc.w	r3, r3, r1
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002732:	4659      	mov	r1, fp
 8002734:	018b      	lsls	r3, r1, #6
 8002736:	4651      	mov	r1, sl
 8002738:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800273c:	4651      	mov	r1, sl
 800273e:	018a      	lsls	r2, r1, #6
 8002740:	4651      	mov	r1, sl
 8002742:	ebb2 0801 	subs.w	r8, r2, r1
 8002746:	4659      	mov	r1, fp
 8002748:	eb63 0901 	sbc.w	r9, r3, r1
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002758:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800275c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002760:	4690      	mov	r8, r2
 8002762:	4699      	mov	r9, r3
 8002764:	4623      	mov	r3, r4
 8002766:	eb18 0303 	adds.w	r3, r8, r3
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	462b      	mov	r3, r5
 800276e:	eb49 0303 	adc.w	r3, r9, r3
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002780:	4629      	mov	r1, r5
 8002782:	028b      	lsls	r3, r1, #10
 8002784:	4621      	mov	r1, r4
 8002786:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800278a:	4621      	mov	r1, r4
 800278c:	028a      	lsls	r2, r1, #10
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002796:	2200      	movs	r2, #0
 8002798:	643b      	str	r3, [r7, #64]	@ 0x40
 800279a:	647a      	str	r2, [r7, #68]	@ 0x44
 800279c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027a0:	f7fe fa42 	bl	8000c28 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4613      	mov	r3, r2
 80027aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027ae:	4b60      	ldr	r3, [pc, #384]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x348>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0c1b      	lsrs	r3, r3, #16
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	3301      	adds	r3, #1
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80027c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80027d0:	e0a6      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d2:	4b57      	ldr	r3, [pc, #348]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x348>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027de:	4b54      	ldr	r3, [pc, #336]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x348>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d02a      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ea:	4b51      	ldr	r3, [pc, #324]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x348>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	099b      	lsrs	r3, r3, #6
 80027f0:	2200      	movs	r2, #0
 80027f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027fc:	2100      	movs	r1, #0
 80027fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x350>)
 8002800:	fb03 f201 	mul.w	r2, r3, r1
 8002804:	2300      	movs	r3, #0
 8002806:	fb00 f303 	mul.w	r3, r0, r3
 800280a:	4413      	add	r3, r2
 800280c:	4a4a      	ldr	r2, [pc, #296]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x350>)
 800280e:	fba0 1202 	umull	r1, r2, r0, r2
 8002812:	677a      	str	r2, [r7, #116]	@ 0x74
 8002814:	460a      	mov	r2, r1
 8002816:	673a      	str	r2, [r7, #112]	@ 0x70
 8002818:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800281a:	4413      	add	r3, r2
 800281c:	677b      	str	r3, [r7, #116]	@ 0x74
 800281e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002822:	2200      	movs	r2, #0
 8002824:	633b      	str	r3, [r7, #48]	@ 0x30
 8002826:	637a      	str	r2, [r7, #52]	@ 0x34
 8002828:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800282c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002830:	f7fe f9fa 	bl	8000c28 <__aeabi_uldivmod>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4613      	mov	r3, r2
 800283a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800283e:	e05b      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002840:	4b3b      	ldr	r3, [pc, #236]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x348>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	099b      	lsrs	r3, r3, #6
 8002846:	2200      	movs	r2, #0
 8002848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800284a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800284c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002852:	623b      	str	r3, [r7, #32]
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
 8002858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800285c:	4642      	mov	r2, r8
 800285e:	464b      	mov	r3, r9
 8002860:	f04f 0000 	mov.w	r0, #0
 8002864:	f04f 0100 	mov.w	r1, #0
 8002868:	0159      	lsls	r1, r3, #5
 800286a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800286e:	0150      	lsls	r0, r2, #5
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4641      	mov	r1, r8
 8002876:	ebb2 0a01 	subs.w	sl, r2, r1
 800287a:	4649      	mov	r1, r9
 800287c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800288c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002894:	ebb2 040a 	subs.w	r4, r2, sl
 8002898:	eb63 050b 	sbc.w	r5, r3, fp
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	00eb      	lsls	r3, r5, #3
 80028a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028aa:	00e2      	lsls	r2, r4, #3
 80028ac:	4614      	mov	r4, r2
 80028ae:	461d      	mov	r5, r3
 80028b0:	4643      	mov	r3, r8
 80028b2:	18e3      	adds	r3, r4, r3
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	464b      	mov	r3, r9
 80028b8:	eb45 0303 	adc.w	r3, r5, r3
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ca:	4629      	mov	r1, r5
 80028cc:	028b      	lsls	r3, r1, #10
 80028ce:	4621      	mov	r1, r4
 80028d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028d4:	4621      	mov	r1, r4
 80028d6:	028a      	lsls	r2, r1, #10
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028e0:	2200      	movs	r2, #0
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	61fa      	str	r2, [r7, #28]
 80028e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ea:	f7fe f99d 	bl	8000c28 <__aeabi_uldivmod>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4613      	mov	r3, r2
 80028f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x348>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	0f1b      	lsrs	r3, r3, #28
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002906:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800290a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002916:	e003      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x34c>)
 800291a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800291e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002920:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002924:	4618      	mov	r0, r3
 8002926:	3798      	adds	r7, #152	@ 0x98
 8002928:	46bd      	mov	sp, r7
 800292a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	00f42400 	.word	0x00f42400
 8002938:	017d7840 	.word	0x017d7840

0800293c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e28d      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8083 	beq.w	8002a62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800295c:	4b94      	ldr	r3, [pc, #592]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b04      	cmp	r3, #4
 8002966:	d019      	beq.n	800299c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002968:	4b91      	ldr	r3, [pc, #580]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002970:	2b08      	cmp	r3, #8
 8002972:	d106      	bne.n	8002982 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002974:	4b8e      	ldr	r3, [pc, #568]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800297c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002980:	d00c      	beq.n	800299c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002982:	4b8b      	ldr	r3, [pc, #556]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d112      	bne.n	80029b4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298e:	4b88      	ldr	r3, [pc, #544]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002996:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800299a:	d10b      	bne.n	80029b4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	4b84      	ldr	r3, [pc, #528]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d05b      	beq.n	8002a60 <HAL_RCC_OscConfig+0x124>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d157      	bne.n	8002a60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e25a      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029bc:	d106      	bne.n	80029cc <HAL_RCC_OscConfig+0x90>
 80029be:	4b7c      	ldr	r3, [pc, #496]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7b      	ldr	r2, [pc, #492]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e01d      	b.n	8002a08 <HAL_RCC_OscConfig+0xcc>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0xb4>
 80029d6:	4b76      	ldr	r3, [pc, #472]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a75      	ldr	r2, [pc, #468]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b73      	ldr	r3, [pc, #460]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a72      	ldr	r2, [pc, #456]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0xcc>
 80029f0:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 80029f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a6b      	ldr	r2, [pc, #428]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002a02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7ff f94e 	bl	8001cb0 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7ff f94a 	bl	8001cb0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	@ 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e21f      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b61      	ldr	r3, [pc, #388]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0xdc>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7ff f93a 	bl	8001cb0 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a40:	f7ff f936 	bl	8001cb0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	@ 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e20b      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	4b57      	ldr	r3, [pc, #348]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x104>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d06f      	beq.n	8002b4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a6e:	4b50      	ldr	r3, [pc, #320]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d017      	beq.n	8002aaa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a7a:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d105      	bne.n	8002a92 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a86:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a92:	4b47      	ldr	r3, [pc, #284]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9e:	4b44      	ldr	r3, [pc, #272]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d116      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aaa:	4b41      	ldr	r3, [pc, #260]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x186>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e1d3      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4937      	ldr	r1, [pc, #220]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad6:	e03a      	b.n	8002b4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d020      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae0:	4b34      	ldr	r3, [pc, #208]	@ (8002bb4 <HAL_RCC_OscConfig+0x278>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7ff f8e3 	bl	8001cb0 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aee:	f7ff f8df 	bl	8001cb0 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e1b4      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b00:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0c:	4b28      	ldr	r3, [pc, #160]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4925      	ldr	r1, [pc, #148]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]
 8002b20:	e015      	b.n	8002b4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b22:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <HAL_RCC_OscConfig+0x278>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7ff f8c2 	bl	8001cb0 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b30:	f7ff f8be 	bl	8001cb0 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e193      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d036      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b62:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <HAL_RCC_OscConfig+0x27c>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7ff f8a2 	bl	8001cb0 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b70:	f7ff f89e 	bl	8001cb0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e173      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b82:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x234>
 8002b8e:	e01b      	b.n	8002bc8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_RCC_OscConfig+0x27c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7ff f88b 	bl	8001cb0 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	e00e      	b.n	8002bbc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7ff f887 	bl	8001cb0 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d907      	bls.n	8002bbc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e15c      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	42470000 	.word	0x42470000
 8002bb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbc:	4b8a      	ldr	r3, [pc, #552]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1ea      	bne.n	8002b9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8097 	beq.w	8002d04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bda:	4b83      	ldr	r3, [pc, #524]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	4b7f      	ldr	r3, [pc, #508]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	4a7e      	ldr	r2, [pc, #504]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c02:	2301      	movs	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c06:	4b79      	ldr	r3, [pc, #484]	@ (8002dec <HAL_RCC_OscConfig+0x4b0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d118      	bne.n	8002c44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c12:	4b76      	ldr	r3, [pc, #472]	@ (8002dec <HAL_RCC_OscConfig+0x4b0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a75      	ldr	r2, [pc, #468]	@ (8002dec <HAL_RCC_OscConfig+0x4b0>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1e:	f7ff f847 	bl	8001cb0 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c26:	f7ff f843 	bl	8001cb0 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e118      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	4b6c      	ldr	r3, [pc, #432]	@ (8002dec <HAL_RCC_OscConfig+0x4b0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x31e>
 8002c4c:	4b66      	ldr	r3, [pc, #408]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c50:	4a65      	ldr	r2, [pc, #404]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c58:	e01c      	b.n	8002c94 <HAL_RCC_OscConfig+0x358>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x340>
 8002c62:	4b61      	ldr	r3, [pc, #388]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c66:	4a60      	ldr	r2, [pc, #384]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c6e:	4b5e      	ldr	r3, [pc, #376]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c72:	4a5d      	ldr	r2, [pc, #372]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7a:	e00b      	b.n	8002c94 <HAL_RCC_OscConfig+0x358>
 8002c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c80:	4a59      	ldr	r2, [pc, #356]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c88:	4b57      	ldr	r3, [pc, #348]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8c:	4a56      	ldr	r2, [pc, #344]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002c8e:	f023 0304 	bic.w	r3, r3, #4
 8002c92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d015      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7ff f808 	bl	8001cb0 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7ff f804 	bl	8001cb0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0d7      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	4b4b      	ldr	r3, [pc, #300]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0ee      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x368>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fff2 	bl	8001cb0 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd0:	f7fe ffee 	bl	8001cb0 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e0c1      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce6:	4b40      	ldr	r3, [pc, #256]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1ee      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	4a3a      	ldr	r2, [pc, #232]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002cfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80ad 	beq.w	8002e68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d0e:	4b36      	ldr	r3, [pc, #216]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d060      	beq.n	8002ddc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d145      	bne.n	8002dae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	4b33      	ldr	r3, [pc, #204]	@ (8002df0 <HAL_RCC_OscConfig+0x4b4>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe ffc2 	bl	8001cb0 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe ffbe 	bl	8001cb0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e093      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d42:	4b29      	ldr	r3, [pc, #164]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	019b      	lsls	r3, r3, #6
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d64:	085b      	lsrs	r3, r3, #1
 8002d66:	3b01      	subs	r3, #1
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d78:	071b      	lsls	r3, r3, #28
 8002d7a:	491b      	ldr	r1, [pc, #108]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <HAL_RCC_OscConfig+0x4b4>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe ff93 	bl	8001cb0 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7fe ff8f 	bl	8001cb0 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e064      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da0:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x452>
 8002dac:	e05c      	b.n	8002e68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <HAL_RCC_OscConfig+0x4b4>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe ff7c 	bl	8001cb0 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe ff78 	bl	8001cb0 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e04d      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <HAL_RCC_OscConfig+0x4ac>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x480>
 8002dda:	e045      	b.n	8002e68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e040      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40007000 	.word	0x40007000
 8002df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e74 <HAL_RCC_OscConfig+0x538>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d030      	beq.n	8002e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d129      	bne.n	8002e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d122      	bne.n	8002e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e24:	4013      	ands	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d119      	bne.n	8002e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d10f      	bne.n	8002e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800

08002e78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e041      	b.n	8002f0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fe fd48 	bl	8001934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f000 fd28 	bl	800390c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_TIM_PWM_Start+0x24>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e022      	b.n	8002f82 <HAL_TIM_PWM_Start+0x6a>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d109      	bne.n	8002f56 <HAL_TIM_PWM_Start+0x3e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	bf14      	ite	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	2300      	moveq	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	e015      	b.n	8002f82 <HAL_TIM_PWM_Start+0x6a>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d109      	bne.n	8002f70 <HAL_TIM_PWM_Start+0x58>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e008      	b.n	8002f82 <HAL_TIM_PWM_Start+0x6a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e07c      	b.n	8003084 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIM_PWM_Start+0x82>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f98:	e013      	b.n	8002fc2 <HAL_TIM_PWM_Start+0xaa>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d104      	bne.n	8002faa <HAL_TIM_PWM_Start+0x92>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fa8:	e00b      	b.n	8002fc2 <HAL_TIM_PWM_Start+0xaa>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d104      	bne.n	8002fba <HAL_TIM_PWM_Start+0xa2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fb8:	e003      	b.n	8002fc2 <HAL_TIM_PWM_Start+0xaa>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	6839      	ldr	r1, [r7, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 f824 	bl	8004018 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800308c <HAL_TIM_PWM_Start+0x174>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_TIM_PWM_Start+0xcc>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a2c      	ldr	r2, [pc, #176]	@ (8003090 <HAL_TIM_PWM_Start+0x178>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d101      	bne.n	8002fe8 <HAL_TIM_PWM_Start+0xd0>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <HAL_TIM_PWM_Start+0xd2>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d007      	beq.n	8002ffe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ffc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a22      	ldr	r2, [pc, #136]	@ (800308c <HAL_TIM_PWM_Start+0x174>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d022      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003010:	d01d      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1f      	ldr	r2, [pc, #124]	@ (8003094 <HAL_TIM_PWM_Start+0x17c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d018      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <HAL_TIM_PWM_Start+0x180>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1c      	ldr	r2, [pc, #112]	@ (800309c <HAL_TIM_PWM_Start+0x184>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00e      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a16      	ldr	r2, [pc, #88]	@ (8003090 <HAL_TIM_PWM_Start+0x178>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a18      	ldr	r2, [pc, #96]	@ (80030a0 <HAL_TIM_PWM_Start+0x188>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a16      	ldr	r2, [pc, #88]	@ (80030a4 <HAL_TIM_PWM_Start+0x18c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d111      	bne.n	8003072 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b06      	cmp	r3, #6
 800305e:	d010      	beq.n	8003082 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003070:	e007      	b.n	8003082 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40010000 	.word	0x40010000
 8003090:	40010400 	.word	0x40010400
 8003094:	40000400 	.word	0x40000400
 8003098:	40000800 	.word	0x40000800
 800309c:	40000c00 	.word	0x40000c00
 80030a0:	40014000 	.word	0x40014000
 80030a4:	40001800 	.word	0x40001800

080030a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e041      	b.n	800313e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fe fbe0 	bl	8001894 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f000 fc10 	bl	800390c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <HAL_TIM_IC_Start_IT+0x1e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003162:	b2db      	uxtb	r3, r3
 8003164:	e013      	b.n	800318e <HAL_TIM_IC_Start_IT+0x46>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d104      	bne.n	8003176 <HAL_TIM_IC_Start_IT+0x2e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003172:	b2db      	uxtb	r3, r3
 8003174:	e00b      	b.n	800318e <HAL_TIM_IC_Start_IT+0x46>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d104      	bne.n	8003186 <HAL_TIM_IC_Start_IT+0x3e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003182:	b2db      	uxtb	r3, r3
 8003184:	e003      	b.n	800318e <HAL_TIM_IC_Start_IT+0x46>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800318c:	b2db      	uxtb	r3, r3
 800318e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <HAL_TIM_IC_Start_IT+0x58>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e013      	b.n	80031c8 <HAL_TIM_IC_Start_IT+0x80>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d104      	bne.n	80031b0 <HAL_TIM_IC_Start_IT+0x68>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	e00b      	b.n	80031c8 <HAL_TIM_IC_Start_IT+0x80>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d104      	bne.n	80031c0 <HAL_TIM_IC_Start_IT+0x78>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e003      	b.n	80031c8 <HAL_TIM_IC_Start_IT+0x80>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80031ca:	7bbb      	ldrb	r3, [r7, #14]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80031d0:	7b7b      	ldrb	r3, [r7, #13]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0cc      	b.n	8003374 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d104      	bne.n	80031ea <HAL_TIM_IC_Start_IT+0xa2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031e8:	e013      	b.n	8003212 <HAL_TIM_IC_Start_IT+0xca>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d104      	bne.n	80031fa <HAL_TIM_IC_Start_IT+0xb2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031f8:	e00b      	b.n	8003212 <HAL_TIM_IC_Start_IT+0xca>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d104      	bne.n	800320a <HAL_TIM_IC_Start_IT+0xc2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003208:	e003      	b.n	8003212 <HAL_TIM_IC_Start_IT+0xca>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2202      	movs	r2, #2
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d104      	bne.n	8003222 <HAL_TIM_IC_Start_IT+0xda>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003220:	e013      	b.n	800324a <HAL_TIM_IC_Start_IT+0x102>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d104      	bne.n	8003232 <HAL_TIM_IC_Start_IT+0xea>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003230:	e00b      	b.n	800324a <HAL_TIM_IC_Start_IT+0x102>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d104      	bne.n	8003242 <HAL_TIM_IC_Start_IT+0xfa>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003240:	e003      	b.n	800324a <HAL_TIM_IC_Start_IT+0x102>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b0c      	cmp	r3, #12
 800324e:	d841      	bhi.n	80032d4 <HAL_TIM_IC_Start_IT+0x18c>
 8003250:	a201      	add	r2, pc, #4	@ (adr r2, 8003258 <HAL_TIM_IC_Start_IT+0x110>)
 8003252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003256:	bf00      	nop
 8003258:	0800328d 	.word	0x0800328d
 800325c:	080032d5 	.word	0x080032d5
 8003260:	080032d5 	.word	0x080032d5
 8003264:	080032d5 	.word	0x080032d5
 8003268:	0800329f 	.word	0x0800329f
 800326c:	080032d5 	.word	0x080032d5
 8003270:	080032d5 	.word	0x080032d5
 8003274:	080032d5 	.word	0x080032d5
 8003278:	080032b1 	.word	0x080032b1
 800327c:	080032d5 	.word	0x080032d5
 8003280:	080032d5 	.word	0x080032d5
 8003284:	080032d5 	.word	0x080032d5
 8003288:	080032c3 	.word	0x080032c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0202 	orr.w	r2, r2, #2
 800329a:	60da      	str	r2, [r3, #12]
      break;
 800329c:	e01d      	b.n	80032da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0204 	orr.w	r2, r2, #4
 80032ac:	60da      	str	r2, [r3, #12]
      break;
 80032ae:	e014      	b.n	80032da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0208 	orr.w	r2, r2, #8
 80032be:	60da      	str	r2, [r3, #12]
      break;
 80032c0:	e00b      	b.n	80032da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0210 	orr.w	r2, r2, #16
 80032d0:	60da      	str	r2, [r3, #12]
      break;
 80032d2:	e002      	b.n	80032da <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d148      	bne.n	8003372 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2201      	movs	r2, #1
 80032e6:	6839      	ldr	r1, [r7, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fe95 	bl	8004018 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a22      	ldr	r2, [pc, #136]	@ (800337c <HAL_TIM_IC_Start_IT+0x234>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d022      	beq.n	800333e <HAL_TIM_IC_Start_IT+0x1f6>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003300:	d01d      	beq.n	800333e <HAL_TIM_IC_Start_IT+0x1f6>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1e      	ldr	r2, [pc, #120]	@ (8003380 <HAL_TIM_IC_Start_IT+0x238>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d018      	beq.n	800333e <HAL_TIM_IC_Start_IT+0x1f6>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <HAL_TIM_IC_Start_IT+0x23c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_TIM_IC_Start_IT+0x1f6>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1b      	ldr	r2, [pc, #108]	@ (8003388 <HAL_TIM_IC_Start_IT+0x240>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00e      	beq.n	800333e <HAL_TIM_IC_Start_IT+0x1f6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a19      	ldr	r2, [pc, #100]	@ (800338c <HAL_TIM_IC_Start_IT+0x244>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_TIM_IC_Start_IT+0x1f6>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a18      	ldr	r2, [pc, #96]	@ (8003390 <HAL_TIM_IC_Start_IT+0x248>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_TIM_IC_Start_IT+0x1f6>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a16      	ldr	r2, [pc, #88]	@ (8003394 <HAL_TIM_IC_Start_IT+0x24c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d111      	bne.n	8003362 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d010      	beq.n	8003372 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003360:	e007      	b.n	8003372 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40010000 	.word	0x40010000
 8003380:	40000400 	.word	0x40000400
 8003384:	40000800 	.word	0x40000800
 8003388:	40000c00 	.word	0x40000c00
 800338c:	40010400 	.word	0x40010400
 8003390:	40014000 	.word	0x40014000
 8003394:	40001800 	.word	0x40001800

08003398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d020      	beq.n	80033fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01b      	beq.n	80033fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0202 	mvn.w	r2, #2
 80033cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd fe24 	bl	8001030 <HAL_TIM_IC_CaptureCallback>
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fa70 	bl	80038d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fa77 	bl	80038e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	d020      	beq.n	8003448 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01b      	beq.n	8003448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0204 	mvn.w	r2, #4
 8003418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fdfe 	bl	8001030 <HAL_TIM_IC_CaptureCallback>
 8003434:	e005      	b.n	8003442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fa4a 	bl	80038d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fa51 	bl	80038e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d020      	beq.n	8003494 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01b      	beq.n	8003494 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0208 	mvn.w	r2, #8
 8003464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2204      	movs	r2, #4
 800346a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fdd8 	bl	8001030 <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fa24 	bl	80038d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fa2b 	bl	80038e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d020      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0210 	mvn.w	r2, #16
 80034b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2208      	movs	r2, #8
 80034b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fdb2 	bl	8001030 <HAL_TIM_IC_CaptureCallback>
 80034cc:	e005      	b.n	80034da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f9fe 	bl	80038d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fa05 	bl	80038e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00c      	beq.n	8003504 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0201 	mvn.w	r2, #1
 80034fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f9dc 	bl	80038bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00c      	beq.n	8003528 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fe24 	bl	8004170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00c      	beq.n	800354c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003538:	2b00      	cmp	r3, #0
 800353a:	d007      	beq.n	800354c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f9d6 	bl	80038f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00c      	beq.n	8003570 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d007      	beq.n	8003570 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0220 	mvn.w	r2, #32
 8003568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fdf6 	bl	800415c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003592:	2302      	movs	r3, #2
 8003594:	e088      	b.n	80036a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80035b4:	f000 fc06 	bl	8003dc4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 020c 	bic.w	r2, r2, #12
 80035c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6999      	ldr	r1, [r3, #24]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	619a      	str	r2, [r3, #24]
 80035da:	e060      	b.n	800369e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d11c      	bne.n	800361c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80035f2:	f000 fc5b 	bl	8003eac <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699a      	ldr	r2, [r3, #24]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003604:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6999      	ldr	r1, [r3, #24]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	021a      	lsls	r2, r3, #8
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	619a      	str	r2, [r3, #24]
 800361a:	e040      	b.n	800369e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b08      	cmp	r3, #8
 8003620:	d11b      	bne.n	800365a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003632:	f000 fc78 	bl	8003f26 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 020c 	bic.w	r2, r2, #12
 8003644:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69d9      	ldr	r1, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	61da      	str	r2, [r3, #28]
 8003658:	e021      	b.n	800369e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d11c      	bne.n	800369a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003670:	f000 fc95 	bl	8003f9e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69da      	ldr	r2, [r3, #28]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003682:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69d9      	ldr	r1, [r3, #28]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	021a      	lsls	r2, r3, #8
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	61da      	str	r2, [r3, #28]
 8003698:	e001      	b.n	800369e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e0ae      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b0c      	cmp	r3, #12
 80036da:	f200 809f 	bhi.w	800381c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036de:	a201      	add	r2, pc, #4	@ (adr r2, 80036e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e4:	08003719 	.word	0x08003719
 80036e8:	0800381d 	.word	0x0800381d
 80036ec:	0800381d 	.word	0x0800381d
 80036f0:	0800381d 	.word	0x0800381d
 80036f4:	08003759 	.word	0x08003759
 80036f8:	0800381d 	.word	0x0800381d
 80036fc:	0800381d 	.word	0x0800381d
 8003700:	0800381d 	.word	0x0800381d
 8003704:	0800379b 	.word	0x0800379b
 8003708:	0800381d 	.word	0x0800381d
 800370c:	0800381d 	.word	0x0800381d
 8003710:	0800381d 	.word	0x0800381d
 8003714:	080037db 	.word	0x080037db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f9a0 	bl	8003a64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0208 	orr.w	r2, r2, #8
 8003732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0204 	bic.w	r2, r2, #4
 8003742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6999      	ldr	r1, [r3, #24]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	619a      	str	r2, [r3, #24]
      break;
 8003756:	e064      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68b9      	ldr	r1, [r7, #8]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f9f0 	bl	8003b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6999      	ldr	r1, [r3, #24]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	021a      	lsls	r2, r3, #8
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	619a      	str	r2, [r3, #24]
      break;
 8003798:	e043      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fa45 	bl	8003c30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69da      	ldr	r2, [r3, #28]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0208 	orr.w	r2, r2, #8
 80037b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0204 	bic.w	r2, r2, #4
 80037c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69d9      	ldr	r1, [r3, #28]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	61da      	str	r2, [r3, #28]
      break;
 80037d8:	e023      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fa99 	bl	8003d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69da      	ldr	r2, [r3, #28]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69d9      	ldr	r1, [r3, #28]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	021a      	lsls	r2, r3, #8
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	61da      	str	r2, [r3, #28]
      break;
 800381a:	e002      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	75fb      	strb	r3, [r7, #23]
      break;
 8003820:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800382a:	7dfb      	ldrb	r3, [r7, #23]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b0c      	cmp	r3, #12
 8003846:	d831      	bhi.n	80038ac <HAL_TIM_ReadCapturedValue+0x78>
 8003848:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <HAL_TIM_ReadCapturedValue+0x1c>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003885 	.word	0x08003885
 8003854:	080038ad 	.word	0x080038ad
 8003858:	080038ad 	.word	0x080038ad
 800385c:	080038ad 	.word	0x080038ad
 8003860:	0800388f 	.word	0x0800388f
 8003864:	080038ad 	.word	0x080038ad
 8003868:	080038ad 	.word	0x080038ad
 800386c:	080038ad 	.word	0x080038ad
 8003870:	08003899 	.word	0x08003899
 8003874:	080038ad 	.word	0x080038ad
 8003878:	080038ad 	.word	0x080038ad
 800387c:	080038ad 	.word	0x080038ad
 8003880:	080038a3 	.word	0x080038a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388a:	60fb      	str	r3, [r7, #12]

      break;
 800388c:	e00f      	b.n	80038ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003894:	60fb      	str	r3, [r7, #12]

      break;
 8003896:	e00a      	b.n	80038ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389e:	60fb      	str	r3, [r7, #12]

      break;
 80038a0:	e005      	b.n	80038ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	60fb      	str	r3, [r7, #12]

      break;
 80038aa:	e000      	b.n	80038ae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80038ac:	bf00      	nop
  }

  return tmpreg;
 80038ae:	68fb      	ldr	r3, [r7, #12]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a46      	ldr	r2, [pc, #280]	@ (8003a38 <TIM_Base_SetConfig+0x12c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <TIM_Base_SetConfig+0x40>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800392a:	d00f      	beq.n	800394c <TIM_Base_SetConfig+0x40>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a43      	ldr	r2, [pc, #268]	@ (8003a3c <TIM_Base_SetConfig+0x130>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00b      	beq.n	800394c <TIM_Base_SetConfig+0x40>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a42      	ldr	r2, [pc, #264]	@ (8003a40 <TIM_Base_SetConfig+0x134>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d007      	beq.n	800394c <TIM_Base_SetConfig+0x40>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a41      	ldr	r2, [pc, #260]	@ (8003a44 <TIM_Base_SetConfig+0x138>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a40      	ldr	r2, [pc, #256]	@ (8003a48 <TIM_Base_SetConfig+0x13c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d108      	bne.n	800395e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a35      	ldr	r2, [pc, #212]	@ (8003a38 <TIM_Base_SetConfig+0x12c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d02b      	beq.n	80039be <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800396c:	d027      	beq.n	80039be <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a32      	ldr	r2, [pc, #200]	@ (8003a3c <TIM_Base_SetConfig+0x130>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d023      	beq.n	80039be <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a31      	ldr	r2, [pc, #196]	@ (8003a40 <TIM_Base_SetConfig+0x134>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01f      	beq.n	80039be <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a30      	ldr	r2, [pc, #192]	@ (8003a44 <TIM_Base_SetConfig+0x138>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01b      	beq.n	80039be <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2f      	ldr	r2, [pc, #188]	@ (8003a48 <TIM_Base_SetConfig+0x13c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d017      	beq.n	80039be <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a2e      	ldr	r2, [pc, #184]	@ (8003a4c <TIM_Base_SetConfig+0x140>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2d      	ldr	r2, [pc, #180]	@ (8003a50 <TIM_Base_SetConfig+0x144>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00f      	beq.n	80039be <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003a54 <TIM_Base_SetConfig+0x148>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a58 <TIM_Base_SetConfig+0x14c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a5c <TIM_Base_SetConfig+0x150>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a29      	ldr	r2, [pc, #164]	@ (8003a60 <TIM_Base_SetConfig+0x154>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d108      	bne.n	80039d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a10      	ldr	r2, [pc, #64]	@ (8003a38 <TIM_Base_SetConfig+0x12c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_Base_SetConfig+0xf8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a12      	ldr	r2, [pc, #72]	@ (8003a48 <TIM_Base_SetConfig+0x13c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d103      	bne.n	8003a0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d105      	bne.n	8003a2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f023 0201 	bic.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800
 8003a44:	40000c00 	.word	0x40000c00
 8003a48:	40010400 	.word	0x40010400
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40014400 	.word	0x40014400
 8003a54:	40014800 	.word	0x40014800
 8003a58:	40001800 	.word	0x40001800
 8003a5c:	40001c00 	.word	0x40001c00
 8003a60:	40002000 	.word	0x40002000

08003a64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f023 0201 	bic.w	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0303 	bic.w	r3, r3, #3
 8003a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f023 0302 	bic.w	r3, r3, #2
 8003aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a20      	ldr	r2, [pc, #128]	@ (8003b3c <TIM_OC1_SetConfig+0xd8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_OC1_SetConfig+0x64>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b40 <TIM_OC1_SetConfig+0xdc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d10c      	bne.n	8003ae2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f023 0308 	bic.w	r3, r3, #8
 8003ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f023 0304 	bic.w	r3, r3, #4
 8003ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a15      	ldr	r2, [pc, #84]	@ (8003b3c <TIM_OC1_SetConfig+0xd8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d003      	beq.n	8003af2 <TIM_OC1_SetConfig+0x8e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a14      	ldr	r2, [pc, #80]	@ (8003b40 <TIM_OC1_SetConfig+0xdc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d111      	bne.n	8003b16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	621a      	str	r2, [r3, #32]
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40010400 	.word	0x40010400

08003b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f023 0210 	bic.w	r2, r3, #16
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0320 	bic.w	r3, r3, #32
 8003b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a22      	ldr	r2, [pc, #136]	@ (8003c28 <TIM_OC2_SetConfig+0xe4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_OC2_SetConfig+0x68>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a21      	ldr	r2, [pc, #132]	@ (8003c2c <TIM_OC2_SetConfig+0xe8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d10d      	bne.n	8003bc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a17      	ldr	r2, [pc, #92]	@ (8003c28 <TIM_OC2_SetConfig+0xe4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_OC2_SetConfig+0x94>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a16      	ldr	r2, [pc, #88]	@ (8003c2c <TIM_OC2_SetConfig+0xe8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d113      	bne.n	8003c00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40010400 	.word	0x40010400

08003c30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a21      	ldr	r2, [pc, #132]	@ (8003d10 <TIM_OC3_SetConfig+0xe0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_OC3_SetConfig+0x66>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a20      	ldr	r2, [pc, #128]	@ (8003d14 <TIM_OC3_SetConfig+0xe4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10d      	bne.n	8003cb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a16      	ldr	r2, [pc, #88]	@ (8003d10 <TIM_OC3_SetConfig+0xe0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_OC3_SetConfig+0x92>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a15      	ldr	r2, [pc, #84]	@ (8003d14 <TIM_OC3_SetConfig+0xe4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d113      	bne.n	8003cea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	621a      	str	r2, [r3, #32]
}
 8003d04:	bf00      	nop
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	40010000 	.word	0x40010000
 8003d14:	40010400 	.word	0x40010400

08003d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	031b      	lsls	r3, r3, #12
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a12      	ldr	r2, [pc, #72]	@ (8003dbc <TIM_OC4_SetConfig+0xa4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_OC4_SetConfig+0x68>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a11      	ldr	r2, [pc, #68]	@ (8003dc0 <TIM_OC4_SetConfig+0xa8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d109      	bne.n	8003d94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	40010400 	.word	0x40010400

08003dc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f023 0201 	bic.w	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4a28      	ldr	r2, [pc, #160]	@ (8003e90 <TIM_TI1_SetConfig+0xcc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01b      	beq.n	8003e2a <TIM_TI1_SetConfig+0x66>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df8:	d017      	beq.n	8003e2a <TIM_TI1_SetConfig+0x66>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a25      	ldr	r2, [pc, #148]	@ (8003e94 <TIM_TI1_SetConfig+0xd0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d013      	beq.n	8003e2a <TIM_TI1_SetConfig+0x66>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a24      	ldr	r2, [pc, #144]	@ (8003e98 <TIM_TI1_SetConfig+0xd4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00f      	beq.n	8003e2a <TIM_TI1_SetConfig+0x66>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4a23      	ldr	r2, [pc, #140]	@ (8003e9c <TIM_TI1_SetConfig+0xd8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00b      	beq.n	8003e2a <TIM_TI1_SetConfig+0x66>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4a22      	ldr	r2, [pc, #136]	@ (8003ea0 <TIM_TI1_SetConfig+0xdc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d007      	beq.n	8003e2a <TIM_TI1_SetConfig+0x66>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4a21      	ldr	r2, [pc, #132]	@ (8003ea4 <TIM_TI1_SetConfig+0xe0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d003      	beq.n	8003e2a <TIM_TI1_SetConfig+0x66>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4a20      	ldr	r2, [pc, #128]	@ (8003ea8 <TIM_TI1_SetConfig+0xe4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <TIM_TI1_SetConfig+0x6a>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <TIM_TI1_SetConfig+0x6c>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0303 	bic.w	r3, r3, #3
 8003e3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	e003      	b.n	8003e4e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f023 030a 	bic.w	r3, r3, #10
 8003e68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f003 030a 	and.w	r3, r3, #10
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40010000 	.word	0x40010000
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40000800 	.word	0x40000800
 8003e9c:	40000c00 	.word	0x40000c00
 8003ea0:	40010400 	.word	0x40010400
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40001800 	.word	0x40001800

08003eac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f023 0210 	bic.w	r2, r3, #16
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	031b      	lsls	r3, r3, #12
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003efe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b087      	sub	sp, #28
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f62:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003f76:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b087      	sub	sp, #28
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	031b      	lsls	r3, r3, #12
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	031b      	lsls	r3, r3, #12
 8003ff6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	621a      	str	r2, [r3, #32]
}
 800400c:	bf00      	nop
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	2201      	movs	r2, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1a      	ldr	r2, [r3, #32]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	43db      	mvns	r3, r3
 800403a:	401a      	ands	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	fa01 f303 	lsl.w	r3, r1, r3
 8004050:	431a      	orrs	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	621a      	str	r2, [r3, #32]
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004078:	2302      	movs	r3, #2
 800407a:	e05a      	b.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a21      	ldr	r2, [pc, #132]	@ (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d022      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c8:	d01d      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d018      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1a      	ldr	r2, [pc, #104]	@ (800414c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a18      	ldr	r2, [pc, #96]	@ (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a17      	ldr	r2, [pc, #92]	@ (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a15      	ldr	r2, [pc, #84]	@ (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10c      	bne.n	8004120 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800410c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	4313      	orrs	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40010000 	.word	0x40010000
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40010400 	.word	0x40010400
 8004154:	40014000 	.word	0x40014000
 8004158:	40001800 	.word	0x40001800

0800415c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e042      	b.n	800421c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fd fca0 	bl	8001af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2224      	movs	r2, #36	@ 0x24
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fdbd 	bl	8004d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	@ 0x28
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b20      	cmp	r3, #32
 8004242:	d175      	bne.n	8004330 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_UART_Transmit+0x2c>
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e06e      	b.n	8004332 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2221      	movs	r2, #33	@ 0x21
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004262:	f7fd fd25 	bl	8001cb0 <HAL_GetTick>
 8004266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427c:	d108      	bne.n	8004290 <HAL_UART_Transmit+0x6c>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	e003      	b.n	8004298 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004298:	e02e      	b.n	80042f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2200      	movs	r2, #0
 80042a2:	2180      	movs	r1, #128	@ 0x80
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fb1f 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e03a      	b.n	8004332 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	3302      	adds	r3, #2
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	e007      	b.n	80042ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	3301      	adds	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1cb      	bne.n	800429a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2200      	movs	r2, #0
 800430a:	2140      	movs	r1, #64	@ 0x40
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 faeb 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e006      	b.n	8004332 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e000      	b.n	8004332 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3720      	adds	r7, #32
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	4613      	mov	r3, r2
 8004346:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b20      	cmp	r3, #32
 8004352:	d112      	bne.n	800437a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_UART_Receive_IT+0x26>
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e00b      	b.n	800437c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	461a      	mov	r2, r3
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fb12 	bl	800499a <UART_Start_Receive_IT>
 8004376:	4603      	mov	r3, r0
 8004378:	e000      	b.n	800437c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800437a:	2302      	movs	r3, #2
  }
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b0ba      	sub	sp, #232	@ 0xe8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80043c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10f      	bne.n	80043ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_UART_IRQHandler+0x66>
 80043d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fbf2 	bl	8004bcc <UART_Receive_IT>
      return;
 80043e8:	e25b      	b.n	80048a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80de 	beq.w	80045b0 <HAL_UART_IRQHandler+0x22c>
 80043f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004404:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80d1 	beq.w	80045b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800440e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00b      	beq.n	8004432 <HAL_UART_IRQHandler+0xae>
 800441a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800441e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	f043 0201 	orr.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <HAL_UART_IRQHandler+0xd2>
 800443e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444e:	f043 0202 	orr.w	r2, r3, #2
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_UART_IRQHandler+0xf6>
 8004462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004472:	f043 0204 	orr.w	r2, r3, #4
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d011      	beq.n	80044aa <HAL_UART_IRQHandler+0x126>
 8004486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d105      	bne.n	800449e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a2:	f043 0208 	orr.w	r2, r3, #8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 81f2 	beq.w	8004898 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_UART_IRQHandler+0x14e>
 80044c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fb7d 	bl	8004bcc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044dc:	2b40      	cmp	r3, #64	@ 0x40
 80044de:	bf0c      	ite	eq
 80044e0:	2301      	moveq	r3, #1
 80044e2:	2300      	movne	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d103      	bne.n	80044fe <HAL_UART_IRQHandler+0x17a>
 80044f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d04f      	beq.n	800459e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa85 	bl	8004a0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450e:	2b40      	cmp	r3, #64	@ 0x40
 8004510:	d141      	bne.n	8004596 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3314      	adds	r3, #20
 8004518:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004528:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800452c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800453e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004542:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800454a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1d9      	bne.n	8004512 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d013      	beq.n	800458e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456a:	4a7e      	ldr	r2, [pc, #504]	@ (8004764 <HAL_UART_IRQHandler+0x3e0>)
 800456c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd fd4d 	bl	8002012 <HAL_DMA_Abort_IT>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d016      	beq.n	80045ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004588:	4610      	mov	r0, r2
 800458a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458c:	e00e      	b.n	80045ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f994 	bl	80048bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004594:	e00a      	b.n	80045ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f990 	bl	80048bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459c:	e006      	b.n	80045ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f98c 	bl	80048bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80045aa:	e175      	b.n	8004898 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ac:	bf00      	nop
    return;
 80045ae:	e173      	b.n	8004898 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	f040 814f 	bne.w	8004858 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8148 	beq.w	8004858 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8141 	beq.w	8004858 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f6:	2b40      	cmp	r3, #64	@ 0x40
 80045f8:	f040 80b6 	bne.w	8004768 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004608:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 8145 	beq.w	800489c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800461a:	429a      	cmp	r2, r3
 800461c:	f080 813e 	bcs.w	800489c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004626:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004632:	f000 8088 	beq.w	8004746 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800464c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004654:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004662:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004666:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800466e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800467a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1d9      	bne.n	8004636 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3314      	adds	r3, #20
 8004688:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004692:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3314      	adds	r3, #20
 80046a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e1      	bne.n	8004682 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3314      	adds	r3, #20
 80046de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e3      	bne.n	80046be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004716:	f023 0310 	bic.w	r3, r3, #16
 800471a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004728:	65ba      	str	r2, [r7, #88]	@ 0x58
 800472a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800472e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e3      	bne.n	8004704 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004740:	4618      	mov	r0, r3
 8004742:	f7fd fbf6 	bl	8001f32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004754:	b29b      	uxth	r3, r3
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	b29b      	uxth	r3, r3
 800475a:	4619      	mov	r1, r3
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f8b7 	bl	80048d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004762:	e09b      	b.n	800489c <HAL_UART_IRQHandler+0x518>
 8004764:	08004ad5 	.word	0x08004ad5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004770:	b29b      	uxth	r3, r3
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 808e 	beq.w	80048a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004784:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8089 	beq.w	80048a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800479e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80047b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e3      	bne.n	800478e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3314      	adds	r3, #20
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	623b      	str	r3, [r7, #32]
   return(result);
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3314      	adds	r3, #20
 80047e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e3      	bne.n	80047c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	60fb      	str	r3, [r7, #12]
   return(result);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0310 	bic.w	r3, r3, #16
 8004822:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	330c      	adds	r3, #12
 800482c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004830:	61fa      	str	r2, [r7, #28]
 8004832:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	69b9      	ldr	r1, [r7, #24]
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	617b      	str	r3, [r7, #20]
   return(result);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e3      	bne.n	800480c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800484a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f83d 	bl	80048d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004856:	e023      	b.n	80048a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004860:	2b00      	cmp	r3, #0
 8004862:	d009      	beq.n	8004878 <HAL_UART_IRQHandler+0x4f4>
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f943 	bl	8004afc <UART_Transmit_IT>
    return;
 8004876:	e014      	b.n	80048a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00e      	beq.n	80048a2 <HAL_UART_IRQHandler+0x51e>
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f983 	bl	8004b9c <UART_EndTransmit_IT>
    return;
 8004896:	e004      	b.n	80048a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004898:	bf00      	nop
 800489a:	e002      	b.n	80048a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800489c:	bf00      	nop
 800489e:	e000      	b.n	80048a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80048a0:	bf00      	nop
  }
}
 80048a2:	37e8      	adds	r7, #232	@ 0xe8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f8:	e03b      	b.n	8004972 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d037      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fd f9d5 	bl	8001cb0 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	6a3a      	ldr	r2, [r7, #32]
 800490e:	429a      	cmp	r2, r3
 8004910:	d302      	bcc.n	8004918 <UART_WaitOnFlagUntilTimeout+0x30>
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e03a      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d023      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0x8a>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b80      	cmp	r3, #128	@ 0x80
 800492e:	d020      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b40      	cmp	r3, #64	@ 0x40
 8004934:	d01d      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b08      	cmp	r3, #8
 8004942:	d116      	bne.n	8004972 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f857 	bl	8004a0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2208      	movs	r2, #8
 8004964:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e00f      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	429a      	cmp	r2, r3
 8004980:	bf0c      	ite	eq
 8004982:	2301      	moveq	r3, #1
 8004984:	2300      	movne	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	429a      	cmp	r2, r3
 800498e:	d0b4      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	4613      	mov	r3, r2
 80049a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	88fa      	ldrh	r2, [r7, #6]
 80049b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	88fa      	ldrh	r2, [r7, #6]
 80049b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2222      	movs	r2, #34	@ 0x22
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049de:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0220 	orr.w	r2, r2, #32
 80049fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b095      	sub	sp, #84	@ 0x54
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	330c      	adds	r3, #12
 8004a1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a36:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e5      	bne.n	8004a16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3314      	adds	r3, #20
 8004a50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3314      	adds	r3, #20
 8004a68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e5      	bne.n	8004a4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d119      	bne.n	8004aba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	330c      	adds	r3, #12
 8004a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f023 0310 	bic.w	r3, r3, #16
 8004a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aa6:	61ba      	str	r2, [r7, #24]
 8004aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6979      	ldr	r1, [r7, #20]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e5      	bne.n	8004a86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ac8:	bf00      	nop
 8004aca:	3754      	adds	r7, #84	@ 0x54
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7ff fee4 	bl	80048bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b21      	cmp	r3, #33	@ 0x21
 8004b0e:	d13e      	bne.n	8004b8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b18:	d114      	bne.n	8004b44 <UART_Transmit_IT+0x48>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d110      	bne.n	8004b44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	1c9a      	adds	r2, r3, #2
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	621a      	str	r2, [r3, #32]
 8004b42:	e008      	b.n	8004b56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	1c59      	adds	r1, r3, #1
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6211      	str	r1, [r2, #32]
 8004b4e:	781a      	ldrb	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	4619      	mov	r1, r3
 8004b64:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10f      	bne.n	8004b8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e000      	b.n	8004b90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b8e:	2302      	movs	r3, #2
  }
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bb2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fe73 	bl	80048a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08c      	sub	sp, #48	@ 0x30
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b22      	cmp	r3, #34	@ 0x22
 8004bde:	f040 80ae 	bne.w	8004d3e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bea:	d117      	bne.n	8004c1c <UART_Receive_IT+0x50>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d113      	bne.n	8004c1c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	1c9a      	adds	r2, r3, #2
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c1a:	e026      	b.n	8004c6a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c2e:	d007      	beq.n	8004c40 <UART_Receive_IT+0x74>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <UART_Receive_IT+0x82>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d106      	bne.n	8004c4e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e008      	b.n	8004c60 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4619      	mov	r1, r3
 8004c78:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d15d      	bne.n	8004d3a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0220 	bic.w	r2, r2, #32
 8004c8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d135      	bne.n	8004d30 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	330c      	adds	r3, #12
 8004cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f023 0310 	bic.w	r3, r3, #16
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cea:	623a      	str	r2, [r7, #32]
 8004cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	69f9      	ldr	r1, [r7, #28]
 8004cf0:	6a3a      	ldr	r2, [r7, #32]
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e5      	bne.n	8004cca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b10      	cmp	r3, #16
 8004d0a:	d10a      	bne.n	8004d22 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d26:	4619      	mov	r1, r3
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff fdd1 	bl	80048d0 <HAL_UARTEx_RxEventCallback>
 8004d2e:	e002      	b.n	8004d36 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7fc fa1d 	bl	8001170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	e002      	b.n	8004d40 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e000      	b.n	8004d40 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d3e:	2302      	movs	r3, #2
  }
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3730      	adds	r7, #48	@ 0x30
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d4c:	b0c0      	sub	sp, #256	@ 0x100
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d64:	68d9      	ldr	r1, [r3, #12]
 8004d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	ea40 0301 	orr.w	r3, r0, r1
 8004d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004da0:	f021 010c 	bic.w	r1, r1, #12
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dae:	430b      	orrs	r3, r1
 8004db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc2:	6999      	ldr	r1, [r3, #24]
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	ea40 0301 	orr.w	r3, r0, r1
 8004dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b8f      	ldr	r3, [pc, #572]	@ (8005014 <UART_SetConfig+0x2cc>)
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d005      	beq.n	8004de8 <UART_SetConfig+0xa0>
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b8d      	ldr	r3, [pc, #564]	@ (8005018 <UART_SetConfig+0x2d0>)
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d104      	bne.n	8004df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004de8:	f7fd fbea 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 8004dec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004df0:	e003      	b.n	8004dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004df2:	f7fd fbd1 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 8004df6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e04:	f040 810c 	bne.w	8005020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	462b      	mov	r3, r5
 8004e1e:	1891      	adds	r1, r2, r2
 8004e20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e22:	415b      	adcs	r3, r3
 8004e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	eb12 0801 	adds.w	r8, r2, r1
 8004e30:	4629      	mov	r1, r5
 8004e32:	eb43 0901 	adc.w	r9, r3, r1
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e4a:	4690      	mov	r8, r2
 8004e4c:	4699      	mov	r9, r3
 8004e4e:	4623      	mov	r3, r4
 8004e50:	eb18 0303 	adds.w	r3, r8, r3
 8004e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e58:	462b      	mov	r3, r5
 8004e5a:	eb49 0303 	adc.w	r3, r9, r3
 8004e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e76:	460b      	mov	r3, r1
 8004e78:	18db      	adds	r3, r3, r3
 8004e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	eb42 0303 	adc.w	r3, r2, r3
 8004e82:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e8c:	f7fb fecc 	bl	8000c28 <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4b61      	ldr	r3, [pc, #388]	@ (800501c <UART_SetConfig+0x2d4>)
 8004e96:	fba3 2302 	umull	r2, r3, r3, r2
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	011c      	lsls	r4, r3, #4
 8004e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004eb0:	4642      	mov	r2, r8
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	1891      	adds	r1, r2, r2
 8004eb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004eb8:	415b      	adcs	r3, r3
 8004eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ee0:	4692      	mov	sl, r2
 8004ee2:	469b      	mov	fp, r3
 8004ee4:	4643      	mov	r3, r8
 8004ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8004eea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eee:	464b      	mov	r3, r9
 8004ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	18db      	adds	r3, r3, r3
 8004f10:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f12:	4613      	mov	r3, r2
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f22:	f7fb fe81 	bl	8000c28 <__aeabi_uldivmod>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800501c <UART_SetConfig+0x2d4>)
 8004f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	2264      	movs	r2, #100	@ 0x64
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	1acb      	subs	r3, r1, r3
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f42:	4b36      	ldr	r3, [pc, #216]	@ (800501c <UART_SetConfig+0x2d4>)
 8004f44:	fba3 2302 	umull	r2, r3, r3, r2
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f50:	441c      	add	r4, r3
 8004f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f64:	4642      	mov	r2, r8
 8004f66:	464b      	mov	r3, r9
 8004f68:	1891      	adds	r1, r2, r2
 8004f6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f6c:	415b      	adcs	r3, r3
 8004f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f74:	4641      	mov	r1, r8
 8004f76:	1851      	adds	r1, r2, r1
 8004f78:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	414b      	adcs	r3, r1
 8004f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	00cb      	lsls	r3, r1, #3
 8004f90:	4651      	mov	r1, sl
 8004f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f96:	4651      	mov	r1, sl
 8004f98:	00ca      	lsls	r2, r1, #3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	189b      	adds	r3, r3, r2
 8004fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fa8:	464b      	mov	r3, r9
 8004faa:	460a      	mov	r2, r1
 8004fac:	eb42 0303 	adc.w	r3, r2, r3
 8004fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fc8:	460b      	mov	r3, r1
 8004fca:	18db      	adds	r3, r3, r3
 8004fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fce:	4613      	mov	r3, r2
 8004fd0:	eb42 0303 	adc.w	r3, r2, r3
 8004fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fde:	f7fb fe23 	bl	8000c28 <__aeabi_uldivmod>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800501c <UART_SetConfig+0x2d4>)
 8004fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	2164      	movs	r1, #100	@ 0x64
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	3332      	adds	r3, #50	@ 0x32
 8004ffa:	4a08      	ldr	r2, [pc, #32]	@ (800501c <UART_SetConfig+0x2d4>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	f003 0207 	and.w	r2, r3, #7
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4422      	add	r2, r4
 800500e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005010:	e106      	b.n	8005220 <UART_SetConfig+0x4d8>
 8005012:	bf00      	nop
 8005014:	40011000 	.word	0x40011000
 8005018:	40011400 	.word	0x40011400
 800501c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005024:	2200      	movs	r2, #0
 8005026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800502a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800502e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005032:	4642      	mov	r2, r8
 8005034:	464b      	mov	r3, r9
 8005036:	1891      	adds	r1, r2, r2
 8005038:	6239      	str	r1, [r7, #32]
 800503a:	415b      	adcs	r3, r3
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
 800503e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005042:	4641      	mov	r1, r8
 8005044:	1854      	adds	r4, r2, r1
 8005046:	4649      	mov	r1, r9
 8005048:	eb43 0501 	adc.w	r5, r3, r1
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	00eb      	lsls	r3, r5, #3
 8005056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800505a:	00e2      	lsls	r2, r4, #3
 800505c:	4614      	mov	r4, r2
 800505e:	461d      	mov	r5, r3
 8005060:	4643      	mov	r3, r8
 8005062:	18e3      	adds	r3, r4, r3
 8005064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005068:	464b      	mov	r3, r9
 800506a:	eb45 0303 	adc.w	r3, r5, r3
 800506e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800507e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800508e:	4629      	mov	r1, r5
 8005090:	008b      	lsls	r3, r1, #2
 8005092:	4621      	mov	r1, r4
 8005094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005098:	4621      	mov	r1, r4
 800509a:	008a      	lsls	r2, r1, #2
 800509c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050a0:	f7fb fdc2 	bl	8000c28 <__aeabi_uldivmod>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4b60      	ldr	r3, [pc, #384]	@ (800522c <UART_SetConfig+0x4e4>)
 80050aa:	fba3 2302 	umull	r2, r3, r3, r2
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	011c      	lsls	r4, r3, #4
 80050b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050c4:	4642      	mov	r2, r8
 80050c6:	464b      	mov	r3, r9
 80050c8:	1891      	adds	r1, r2, r2
 80050ca:	61b9      	str	r1, [r7, #24]
 80050cc:	415b      	adcs	r3, r3
 80050ce:	61fb      	str	r3, [r7, #28]
 80050d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050d4:	4641      	mov	r1, r8
 80050d6:	1851      	adds	r1, r2, r1
 80050d8:	6139      	str	r1, [r7, #16]
 80050da:	4649      	mov	r1, r9
 80050dc:	414b      	adcs	r3, r1
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050ec:	4659      	mov	r1, fp
 80050ee:	00cb      	lsls	r3, r1, #3
 80050f0:	4651      	mov	r1, sl
 80050f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050f6:	4651      	mov	r1, sl
 80050f8:	00ca      	lsls	r2, r1, #3
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	4642      	mov	r2, r8
 8005102:	189b      	adds	r3, r3, r2
 8005104:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005108:	464b      	mov	r3, r9
 800510a:	460a      	mov	r2, r1
 800510c:	eb42 0303 	adc.w	r3, r2, r3
 8005110:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800511e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800512c:	4649      	mov	r1, r9
 800512e:	008b      	lsls	r3, r1, #2
 8005130:	4641      	mov	r1, r8
 8005132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005136:	4641      	mov	r1, r8
 8005138:	008a      	lsls	r2, r1, #2
 800513a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800513e:	f7fb fd73 	bl	8000c28 <__aeabi_uldivmod>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4611      	mov	r1, r2
 8005148:	4b38      	ldr	r3, [pc, #224]	@ (800522c <UART_SetConfig+0x4e4>)
 800514a:	fba3 2301 	umull	r2, r3, r3, r1
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	2264      	movs	r2, #100	@ 0x64
 8005152:	fb02 f303 	mul.w	r3, r2, r3
 8005156:	1acb      	subs	r3, r1, r3
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	3332      	adds	r3, #50	@ 0x32
 800515c:	4a33      	ldr	r2, [pc, #204]	@ (800522c <UART_SetConfig+0x4e4>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005168:	441c      	add	r4, r3
 800516a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800516e:	2200      	movs	r2, #0
 8005170:	673b      	str	r3, [r7, #112]	@ 0x70
 8005172:	677a      	str	r2, [r7, #116]	@ 0x74
 8005174:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005178:	4642      	mov	r2, r8
 800517a:	464b      	mov	r3, r9
 800517c:	1891      	adds	r1, r2, r2
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	415b      	adcs	r3, r3
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005188:	4641      	mov	r1, r8
 800518a:	1851      	adds	r1, r2, r1
 800518c:	6039      	str	r1, [r7, #0]
 800518e:	4649      	mov	r1, r9
 8005190:	414b      	adcs	r3, r1
 8005192:	607b      	str	r3, [r7, #4]
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051a0:	4659      	mov	r1, fp
 80051a2:	00cb      	lsls	r3, r1, #3
 80051a4:	4651      	mov	r1, sl
 80051a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051aa:	4651      	mov	r1, sl
 80051ac:	00ca      	lsls	r2, r1, #3
 80051ae:	4610      	mov	r0, r2
 80051b0:	4619      	mov	r1, r3
 80051b2:	4603      	mov	r3, r0
 80051b4:	4642      	mov	r2, r8
 80051b6:	189b      	adds	r3, r3, r2
 80051b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051ba:	464b      	mov	r3, r9
 80051bc:	460a      	mov	r2, r1
 80051be:	eb42 0303 	adc.w	r3, r2, r3
 80051c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80051ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051dc:	4649      	mov	r1, r9
 80051de:	008b      	lsls	r3, r1, #2
 80051e0:	4641      	mov	r1, r8
 80051e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051e6:	4641      	mov	r1, r8
 80051e8:	008a      	lsls	r2, r1, #2
 80051ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051ee:	f7fb fd1b 	bl	8000c28 <__aeabi_uldivmod>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4b0d      	ldr	r3, [pc, #52]	@ (800522c <UART_SetConfig+0x4e4>)
 80051f8:	fba3 1302 	umull	r1, r3, r3, r2
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	2164      	movs	r1, #100	@ 0x64
 8005200:	fb01 f303 	mul.w	r3, r1, r3
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	3332      	adds	r3, #50	@ 0x32
 800520a:	4a08      	ldr	r2, [pc, #32]	@ (800522c <UART_SetConfig+0x4e4>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	f003 020f 	and.w	r2, r3, #15
 8005216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4422      	add	r2, r4
 800521e:	609a      	str	r2, [r3, #8]
}
 8005220:	bf00      	nop
 8005222:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005226:	46bd      	mov	sp, r7
 8005228:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800522c:	51eb851f 	.word	0x51eb851f

08005230 <__cvt>:
 8005230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005234:	ec57 6b10 	vmov	r6, r7, d0
 8005238:	2f00      	cmp	r7, #0
 800523a:	460c      	mov	r4, r1
 800523c:	4619      	mov	r1, r3
 800523e:	463b      	mov	r3, r7
 8005240:	bfbb      	ittet	lt
 8005242:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005246:	461f      	movlt	r7, r3
 8005248:	2300      	movge	r3, #0
 800524a:	232d      	movlt	r3, #45	@ 0x2d
 800524c:	700b      	strb	r3, [r1, #0]
 800524e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005250:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005254:	4691      	mov	r9, r2
 8005256:	f023 0820 	bic.w	r8, r3, #32
 800525a:	bfbc      	itt	lt
 800525c:	4632      	movlt	r2, r6
 800525e:	4616      	movlt	r6, r2
 8005260:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005264:	d005      	beq.n	8005272 <__cvt+0x42>
 8005266:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800526a:	d100      	bne.n	800526e <__cvt+0x3e>
 800526c:	3401      	adds	r4, #1
 800526e:	2102      	movs	r1, #2
 8005270:	e000      	b.n	8005274 <__cvt+0x44>
 8005272:	2103      	movs	r1, #3
 8005274:	ab03      	add	r3, sp, #12
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	ab02      	add	r3, sp, #8
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	ec47 6b10 	vmov	d0, r6, r7
 8005280:	4653      	mov	r3, sl
 8005282:	4622      	mov	r2, r4
 8005284:	f000 fe3c 	bl	8005f00 <_dtoa_r>
 8005288:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800528c:	4605      	mov	r5, r0
 800528e:	d119      	bne.n	80052c4 <__cvt+0x94>
 8005290:	f019 0f01 	tst.w	r9, #1
 8005294:	d00e      	beq.n	80052b4 <__cvt+0x84>
 8005296:	eb00 0904 	add.w	r9, r0, r4
 800529a:	2200      	movs	r2, #0
 800529c:	2300      	movs	r3, #0
 800529e:	4630      	mov	r0, r6
 80052a0:	4639      	mov	r1, r7
 80052a2:	f7fb fc31 	bl	8000b08 <__aeabi_dcmpeq>
 80052a6:	b108      	cbz	r0, 80052ac <__cvt+0x7c>
 80052a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80052ac:	2230      	movs	r2, #48	@ 0x30
 80052ae:	9b03      	ldr	r3, [sp, #12]
 80052b0:	454b      	cmp	r3, r9
 80052b2:	d31e      	bcc.n	80052f2 <__cvt+0xc2>
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80052b8:	1b5b      	subs	r3, r3, r5
 80052ba:	4628      	mov	r0, r5
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	b004      	add	sp, #16
 80052c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052c8:	eb00 0904 	add.w	r9, r0, r4
 80052cc:	d1e5      	bne.n	800529a <__cvt+0x6a>
 80052ce:	7803      	ldrb	r3, [r0, #0]
 80052d0:	2b30      	cmp	r3, #48	@ 0x30
 80052d2:	d10a      	bne.n	80052ea <__cvt+0xba>
 80052d4:	2200      	movs	r2, #0
 80052d6:	2300      	movs	r3, #0
 80052d8:	4630      	mov	r0, r6
 80052da:	4639      	mov	r1, r7
 80052dc:	f7fb fc14 	bl	8000b08 <__aeabi_dcmpeq>
 80052e0:	b918      	cbnz	r0, 80052ea <__cvt+0xba>
 80052e2:	f1c4 0401 	rsb	r4, r4, #1
 80052e6:	f8ca 4000 	str.w	r4, [sl]
 80052ea:	f8da 3000 	ldr.w	r3, [sl]
 80052ee:	4499      	add	r9, r3
 80052f0:	e7d3      	b.n	800529a <__cvt+0x6a>
 80052f2:	1c59      	adds	r1, r3, #1
 80052f4:	9103      	str	r1, [sp, #12]
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	e7d9      	b.n	80052ae <__cvt+0x7e>

080052fa <__exponent>:
 80052fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052fc:	2900      	cmp	r1, #0
 80052fe:	bfba      	itte	lt
 8005300:	4249      	neglt	r1, r1
 8005302:	232d      	movlt	r3, #45	@ 0x2d
 8005304:	232b      	movge	r3, #43	@ 0x2b
 8005306:	2909      	cmp	r1, #9
 8005308:	7002      	strb	r2, [r0, #0]
 800530a:	7043      	strb	r3, [r0, #1]
 800530c:	dd29      	ble.n	8005362 <__exponent+0x68>
 800530e:	f10d 0307 	add.w	r3, sp, #7
 8005312:	461d      	mov	r5, r3
 8005314:	270a      	movs	r7, #10
 8005316:	461a      	mov	r2, r3
 8005318:	fbb1 f6f7 	udiv	r6, r1, r7
 800531c:	fb07 1416 	mls	r4, r7, r6, r1
 8005320:	3430      	adds	r4, #48	@ 0x30
 8005322:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005326:	460c      	mov	r4, r1
 8005328:	2c63      	cmp	r4, #99	@ 0x63
 800532a:	f103 33ff 	add.w	r3, r3, #4294967295
 800532e:	4631      	mov	r1, r6
 8005330:	dcf1      	bgt.n	8005316 <__exponent+0x1c>
 8005332:	3130      	adds	r1, #48	@ 0x30
 8005334:	1e94      	subs	r4, r2, #2
 8005336:	f803 1c01 	strb.w	r1, [r3, #-1]
 800533a:	1c41      	adds	r1, r0, #1
 800533c:	4623      	mov	r3, r4
 800533e:	42ab      	cmp	r3, r5
 8005340:	d30a      	bcc.n	8005358 <__exponent+0x5e>
 8005342:	f10d 0309 	add.w	r3, sp, #9
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	42ac      	cmp	r4, r5
 800534a:	bf88      	it	hi
 800534c:	2300      	movhi	r3, #0
 800534e:	3302      	adds	r3, #2
 8005350:	4403      	add	r3, r0
 8005352:	1a18      	subs	r0, r3, r0
 8005354:	b003      	add	sp, #12
 8005356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005358:	f813 6b01 	ldrb.w	r6, [r3], #1
 800535c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005360:	e7ed      	b.n	800533e <__exponent+0x44>
 8005362:	2330      	movs	r3, #48	@ 0x30
 8005364:	3130      	adds	r1, #48	@ 0x30
 8005366:	7083      	strb	r3, [r0, #2]
 8005368:	70c1      	strb	r1, [r0, #3]
 800536a:	1d03      	adds	r3, r0, #4
 800536c:	e7f1      	b.n	8005352 <__exponent+0x58>
	...

08005370 <_printf_float>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	b08d      	sub	sp, #52	@ 0x34
 8005376:	460c      	mov	r4, r1
 8005378:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800537c:	4616      	mov	r6, r2
 800537e:	461f      	mov	r7, r3
 8005380:	4605      	mov	r5, r0
 8005382:	f000 fcbb 	bl	8005cfc <_localeconv_r>
 8005386:	6803      	ldr	r3, [r0, #0]
 8005388:	9304      	str	r3, [sp, #16]
 800538a:	4618      	mov	r0, r3
 800538c:	f7fa ff90 	bl	80002b0 <strlen>
 8005390:	2300      	movs	r3, #0
 8005392:	930a      	str	r3, [sp, #40]	@ 0x28
 8005394:	f8d8 3000 	ldr.w	r3, [r8]
 8005398:	9005      	str	r0, [sp, #20]
 800539a:	3307      	adds	r3, #7
 800539c:	f023 0307 	bic.w	r3, r3, #7
 80053a0:	f103 0208 	add.w	r2, r3, #8
 80053a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80053a8:	f8d4 b000 	ldr.w	fp, [r4]
 80053ac:	f8c8 2000 	str.w	r2, [r8]
 80053b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80053b8:	9307      	str	r3, [sp, #28]
 80053ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80053be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80053c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053c6:	4b9c      	ldr	r3, [pc, #624]	@ (8005638 <_printf_float+0x2c8>)
 80053c8:	f04f 32ff 	mov.w	r2, #4294967295
 80053cc:	f7fb fbce 	bl	8000b6c <__aeabi_dcmpun>
 80053d0:	bb70      	cbnz	r0, 8005430 <_printf_float+0xc0>
 80053d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053d6:	4b98      	ldr	r3, [pc, #608]	@ (8005638 <_printf_float+0x2c8>)
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295
 80053dc:	f7fb fba8 	bl	8000b30 <__aeabi_dcmple>
 80053e0:	bb30      	cbnz	r0, 8005430 <_printf_float+0xc0>
 80053e2:	2200      	movs	r2, #0
 80053e4:	2300      	movs	r3, #0
 80053e6:	4640      	mov	r0, r8
 80053e8:	4649      	mov	r1, r9
 80053ea:	f7fb fb97 	bl	8000b1c <__aeabi_dcmplt>
 80053ee:	b110      	cbz	r0, 80053f6 <_printf_float+0x86>
 80053f0:	232d      	movs	r3, #45	@ 0x2d
 80053f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053f6:	4a91      	ldr	r2, [pc, #580]	@ (800563c <_printf_float+0x2cc>)
 80053f8:	4b91      	ldr	r3, [pc, #580]	@ (8005640 <_printf_float+0x2d0>)
 80053fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80053fe:	bf94      	ite	ls
 8005400:	4690      	movls	r8, r2
 8005402:	4698      	movhi	r8, r3
 8005404:	2303      	movs	r3, #3
 8005406:	6123      	str	r3, [r4, #16]
 8005408:	f02b 0304 	bic.w	r3, fp, #4
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	f04f 0900 	mov.w	r9, #0
 8005412:	9700      	str	r7, [sp, #0]
 8005414:	4633      	mov	r3, r6
 8005416:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005418:	4621      	mov	r1, r4
 800541a:	4628      	mov	r0, r5
 800541c:	f000 f9d2 	bl	80057c4 <_printf_common>
 8005420:	3001      	adds	r0, #1
 8005422:	f040 808d 	bne.w	8005540 <_printf_float+0x1d0>
 8005426:	f04f 30ff 	mov.w	r0, #4294967295
 800542a:	b00d      	add	sp, #52	@ 0x34
 800542c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005430:	4642      	mov	r2, r8
 8005432:	464b      	mov	r3, r9
 8005434:	4640      	mov	r0, r8
 8005436:	4649      	mov	r1, r9
 8005438:	f7fb fb98 	bl	8000b6c <__aeabi_dcmpun>
 800543c:	b140      	cbz	r0, 8005450 <_printf_float+0xe0>
 800543e:	464b      	mov	r3, r9
 8005440:	2b00      	cmp	r3, #0
 8005442:	bfbc      	itt	lt
 8005444:	232d      	movlt	r3, #45	@ 0x2d
 8005446:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800544a:	4a7e      	ldr	r2, [pc, #504]	@ (8005644 <_printf_float+0x2d4>)
 800544c:	4b7e      	ldr	r3, [pc, #504]	@ (8005648 <_printf_float+0x2d8>)
 800544e:	e7d4      	b.n	80053fa <_printf_float+0x8a>
 8005450:	6863      	ldr	r3, [r4, #4]
 8005452:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005456:	9206      	str	r2, [sp, #24]
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	d13b      	bne.n	80054d4 <_printf_float+0x164>
 800545c:	2306      	movs	r3, #6
 800545e:	6063      	str	r3, [r4, #4]
 8005460:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005464:	2300      	movs	r3, #0
 8005466:	6022      	str	r2, [r4, #0]
 8005468:	9303      	str	r3, [sp, #12]
 800546a:	ab0a      	add	r3, sp, #40	@ 0x28
 800546c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005470:	ab09      	add	r3, sp, #36	@ 0x24
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	6861      	ldr	r1, [r4, #4]
 8005476:	ec49 8b10 	vmov	d0, r8, r9
 800547a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800547e:	4628      	mov	r0, r5
 8005480:	f7ff fed6 	bl	8005230 <__cvt>
 8005484:	9b06      	ldr	r3, [sp, #24]
 8005486:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005488:	2b47      	cmp	r3, #71	@ 0x47
 800548a:	4680      	mov	r8, r0
 800548c:	d129      	bne.n	80054e2 <_printf_float+0x172>
 800548e:	1cc8      	adds	r0, r1, #3
 8005490:	db02      	blt.n	8005498 <_printf_float+0x128>
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	4299      	cmp	r1, r3
 8005496:	dd41      	ble.n	800551c <_printf_float+0x1ac>
 8005498:	f1aa 0a02 	sub.w	sl, sl, #2
 800549c:	fa5f fa8a 	uxtb.w	sl, sl
 80054a0:	3901      	subs	r1, #1
 80054a2:	4652      	mov	r2, sl
 80054a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80054a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80054aa:	f7ff ff26 	bl	80052fa <__exponent>
 80054ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054b0:	1813      	adds	r3, r2, r0
 80054b2:	2a01      	cmp	r2, #1
 80054b4:	4681      	mov	r9, r0
 80054b6:	6123      	str	r3, [r4, #16]
 80054b8:	dc02      	bgt.n	80054c0 <_printf_float+0x150>
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	07d2      	lsls	r2, r2, #31
 80054be:	d501      	bpl.n	80054c4 <_printf_float+0x154>
 80054c0:	3301      	adds	r3, #1
 80054c2:	6123      	str	r3, [r4, #16]
 80054c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0a2      	beq.n	8005412 <_printf_float+0xa2>
 80054cc:	232d      	movs	r3, #45	@ 0x2d
 80054ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054d2:	e79e      	b.n	8005412 <_printf_float+0xa2>
 80054d4:	9a06      	ldr	r2, [sp, #24]
 80054d6:	2a47      	cmp	r2, #71	@ 0x47
 80054d8:	d1c2      	bne.n	8005460 <_printf_float+0xf0>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1c0      	bne.n	8005460 <_printf_float+0xf0>
 80054de:	2301      	movs	r3, #1
 80054e0:	e7bd      	b.n	800545e <_printf_float+0xee>
 80054e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054e6:	d9db      	bls.n	80054a0 <_printf_float+0x130>
 80054e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80054ec:	d118      	bne.n	8005520 <_printf_float+0x1b0>
 80054ee:	2900      	cmp	r1, #0
 80054f0:	6863      	ldr	r3, [r4, #4]
 80054f2:	dd0b      	ble.n	800550c <_printf_float+0x19c>
 80054f4:	6121      	str	r1, [r4, #16]
 80054f6:	b913      	cbnz	r3, 80054fe <_printf_float+0x18e>
 80054f8:	6822      	ldr	r2, [r4, #0]
 80054fa:	07d0      	lsls	r0, r2, #31
 80054fc:	d502      	bpl.n	8005504 <_printf_float+0x194>
 80054fe:	3301      	adds	r3, #1
 8005500:	440b      	add	r3, r1
 8005502:	6123      	str	r3, [r4, #16]
 8005504:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005506:	f04f 0900 	mov.w	r9, #0
 800550a:	e7db      	b.n	80054c4 <_printf_float+0x154>
 800550c:	b913      	cbnz	r3, 8005514 <_printf_float+0x1a4>
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	07d2      	lsls	r2, r2, #31
 8005512:	d501      	bpl.n	8005518 <_printf_float+0x1a8>
 8005514:	3302      	adds	r3, #2
 8005516:	e7f4      	b.n	8005502 <_printf_float+0x192>
 8005518:	2301      	movs	r3, #1
 800551a:	e7f2      	b.n	8005502 <_printf_float+0x192>
 800551c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005522:	4299      	cmp	r1, r3
 8005524:	db05      	blt.n	8005532 <_printf_float+0x1c2>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	6121      	str	r1, [r4, #16]
 800552a:	07d8      	lsls	r0, r3, #31
 800552c:	d5ea      	bpl.n	8005504 <_printf_float+0x194>
 800552e:	1c4b      	adds	r3, r1, #1
 8005530:	e7e7      	b.n	8005502 <_printf_float+0x192>
 8005532:	2900      	cmp	r1, #0
 8005534:	bfd4      	ite	le
 8005536:	f1c1 0202 	rsble	r2, r1, #2
 800553a:	2201      	movgt	r2, #1
 800553c:	4413      	add	r3, r2
 800553e:	e7e0      	b.n	8005502 <_printf_float+0x192>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	055a      	lsls	r2, r3, #21
 8005544:	d407      	bmi.n	8005556 <_printf_float+0x1e6>
 8005546:	6923      	ldr	r3, [r4, #16]
 8005548:	4642      	mov	r2, r8
 800554a:	4631      	mov	r1, r6
 800554c:	4628      	mov	r0, r5
 800554e:	47b8      	blx	r7
 8005550:	3001      	adds	r0, #1
 8005552:	d12b      	bne.n	80055ac <_printf_float+0x23c>
 8005554:	e767      	b.n	8005426 <_printf_float+0xb6>
 8005556:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800555a:	f240 80dd 	bls.w	8005718 <_printf_float+0x3a8>
 800555e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005562:	2200      	movs	r2, #0
 8005564:	2300      	movs	r3, #0
 8005566:	f7fb facf 	bl	8000b08 <__aeabi_dcmpeq>
 800556a:	2800      	cmp	r0, #0
 800556c:	d033      	beq.n	80055d6 <_printf_float+0x266>
 800556e:	4a37      	ldr	r2, [pc, #220]	@ (800564c <_printf_float+0x2dc>)
 8005570:	2301      	movs	r3, #1
 8005572:	4631      	mov	r1, r6
 8005574:	4628      	mov	r0, r5
 8005576:	47b8      	blx	r7
 8005578:	3001      	adds	r0, #1
 800557a:	f43f af54 	beq.w	8005426 <_printf_float+0xb6>
 800557e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005582:	4543      	cmp	r3, r8
 8005584:	db02      	blt.n	800558c <_printf_float+0x21c>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	07d8      	lsls	r0, r3, #31
 800558a:	d50f      	bpl.n	80055ac <_printf_float+0x23c>
 800558c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005590:	4631      	mov	r1, r6
 8005592:	4628      	mov	r0, r5
 8005594:	47b8      	blx	r7
 8005596:	3001      	adds	r0, #1
 8005598:	f43f af45 	beq.w	8005426 <_printf_float+0xb6>
 800559c:	f04f 0900 	mov.w	r9, #0
 80055a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80055a4:	f104 0a1a 	add.w	sl, r4, #26
 80055a8:	45c8      	cmp	r8, r9
 80055aa:	dc09      	bgt.n	80055c0 <_printf_float+0x250>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	079b      	lsls	r3, r3, #30
 80055b0:	f100 8103 	bmi.w	80057ba <_printf_float+0x44a>
 80055b4:	68e0      	ldr	r0, [r4, #12]
 80055b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055b8:	4298      	cmp	r0, r3
 80055ba:	bfb8      	it	lt
 80055bc:	4618      	movlt	r0, r3
 80055be:	e734      	b.n	800542a <_printf_float+0xba>
 80055c0:	2301      	movs	r3, #1
 80055c2:	4652      	mov	r2, sl
 80055c4:	4631      	mov	r1, r6
 80055c6:	4628      	mov	r0, r5
 80055c8:	47b8      	blx	r7
 80055ca:	3001      	adds	r0, #1
 80055cc:	f43f af2b 	beq.w	8005426 <_printf_float+0xb6>
 80055d0:	f109 0901 	add.w	r9, r9, #1
 80055d4:	e7e8      	b.n	80055a8 <_printf_float+0x238>
 80055d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dc39      	bgt.n	8005650 <_printf_float+0x2e0>
 80055dc:	4a1b      	ldr	r2, [pc, #108]	@ (800564c <_printf_float+0x2dc>)
 80055de:	2301      	movs	r3, #1
 80055e0:	4631      	mov	r1, r6
 80055e2:	4628      	mov	r0, r5
 80055e4:	47b8      	blx	r7
 80055e6:	3001      	adds	r0, #1
 80055e8:	f43f af1d 	beq.w	8005426 <_printf_float+0xb6>
 80055ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80055f0:	ea59 0303 	orrs.w	r3, r9, r3
 80055f4:	d102      	bne.n	80055fc <_printf_float+0x28c>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	07d9      	lsls	r1, r3, #31
 80055fa:	d5d7      	bpl.n	80055ac <_printf_float+0x23c>
 80055fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005600:	4631      	mov	r1, r6
 8005602:	4628      	mov	r0, r5
 8005604:	47b8      	blx	r7
 8005606:	3001      	adds	r0, #1
 8005608:	f43f af0d 	beq.w	8005426 <_printf_float+0xb6>
 800560c:	f04f 0a00 	mov.w	sl, #0
 8005610:	f104 0b1a 	add.w	fp, r4, #26
 8005614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005616:	425b      	negs	r3, r3
 8005618:	4553      	cmp	r3, sl
 800561a:	dc01      	bgt.n	8005620 <_printf_float+0x2b0>
 800561c:	464b      	mov	r3, r9
 800561e:	e793      	b.n	8005548 <_printf_float+0x1d8>
 8005620:	2301      	movs	r3, #1
 8005622:	465a      	mov	r2, fp
 8005624:	4631      	mov	r1, r6
 8005626:	4628      	mov	r0, r5
 8005628:	47b8      	blx	r7
 800562a:	3001      	adds	r0, #1
 800562c:	f43f aefb 	beq.w	8005426 <_printf_float+0xb6>
 8005630:	f10a 0a01 	add.w	sl, sl, #1
 8005634:	e7ee      	b.n	8005614 <_printf_float+0x2a4>
 8005636:	bf00      	nop
 8005638:	7fefffff 	.word	0x7fefffff
 800563c:	08007b60 	.word	0x08007b60
 8005640:	08007b64 	.word	0x08007b64
 8005644:	08007b68 	.word	0x08007b68
 8005648:	08007b6c 	.word	0x08007b6c
 800564c:	08007b70 	.word	0x08007b70
 8005650:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005652:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005656:	4553      	cmp	r3, sl
 8005658:	bfa8      	it	ge
 800565a:	4653      	movge	r3, sl
 800565c:	2b00      	cmp	r3, #0
 800565e:	4699      	mov	r9, r3
 8005660:	dc36      	bgt.n	80056d0 <_printf_float+0x360>
 8005662:	f04f 0b00 	mov.w	fp, #0
 8005666:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800566a:	f104 021a 	add.w	r2, r4, #26
 800566e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005670:	9306      	str	r3, [sp, #24]
 8005672:	eba3 0309 	sub.w	r3, r3, r9
 8005676:	455b      	cmp	r3, fp
 8005678:	dc31      	bgt.n	80056de <_printf_float+0x36e>
 800567a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800567c:	459a      	cmp	sl, r3
 800567e:	dc3a      	bgt.n	80056f6 <_printf_float+0x386>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	07da      	lsls	r2, r3, #31
 8005684:	d437      	bmi.n	80056f6 <_printf_float+0x386>
 8005686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005688:	ebaa 0903 	sub.w	r9, sl, r3
 800568c:	9b06      	ldr	r3, [sp, #24]
 800568e:	ebaa 0303 	sub.w	r3, sl, r3
 8005692:	4599      	cmp	r9, r3
 8005694:	bfa8      	it	ge
 8005696:	4699      	movge	r9, r3
 8005698:	f1b9 0f00 	cmp.w	r9, #0
 800569c:	dc33      	bgt.n	8005706 <_printf_float+0x396>
 800569e:	f04f 0800 	mov.w	r8, #0
 80056a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056a6:	f104 0b1a 	add.w	fp, r4, #26
 80056aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056ac:	ebaa 0303 	sub.w	r3, sl, r3
 80056b0:	eba3 0309 	sub.w	r3, r3, r9
 80056b4:	4543      	cmp	r3, r8
 80056b6:	f77f af79 	ble.w	80055ac <_printf_float+0x23c>
 80056ba:	2301      	movs	r3, #1
 80056bc:	465a      	mov	r2, fp
 80056be:	4631      	mov	r1, r6
 80056c0:	4628      	mov	r0, r5
 80056c2:	47b8      	blx	r7
 80056c4:	3001      	adds	r0, #1
 80056c6:	f43f aeae 	beq.w	8005426 <_printf_float+0xb6>
 80056ca:	f108 0801 	add.w	r8, r8, #1
 80056ce:	e7ec      	b.n	80056aa <_printf_float+0x33a>
 80056d0:	4642      	mov	r2, r8
 80056d2:	4631      	mov	r1, r6
 80056d4:	4628      	mov	r0, r5
 80056d6:	47b8      	blx	r7
 80056d8:	3001      	adds	r0, #1
 80056da:	d1c2      	bne.n	8005662 <_printf_float+0x2f2>
 80056dc:	e6a3      	b.n	8005426 <_printf_float+0xb6>
 80056de:	2301      	movs	r3, #1
 80056e0:	4631      	mov	r1, r6
 80056e2:	4628      	mov	r0, r5
 80056e4:	9206      	str	r2, [sp, #24]
 80056e6:	47b8      	blx	r7
 80056e8:	3001      	adds	r0, #1
 80056ea:	f43f ae9c 	beq.w	8005426 <_printf_float+0xb6>
 80056ee:	9a06      	ldr	r2, [sp, #24]
 80056f0:	f10b 0b01 	add.w	fp, fp, #1
 80056f4:	e7bb      	b.n	800566e <_printf_float+0x2fe>
 80056f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	d1c0      	bne.n	8005686 <_printf_float+0x316>
 8005704:	e68f      	b.n	8005426 <_printf_float+0xb6>
 8005706:	9a06      	ldr	r2, [sp, #24]
 8005708:	464b      	mov	r3, r9
 800570a:	4442      	add	r2, r8
 800570c:	4631      	mov	r1, r6
 800570e:	4628      	mov	r0, r5
 8005710:	47b8      	blx	r7
 8005712:	3001      	adds	r0, #1
 8005714:	d1c3      	bne.n	800569e <_printf_float+0x32e>
 8005716:	e686      	b.n	8005426 <_printf_float+0xb6>
 8005718:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800571c:	f1ba 0f01 	cmp.w	sl, #1
 8005720:	dc01      	bgt.n	8005726 <_printf_float+0x3b6>
 8005722:	07db      	lsls	r3, r3, #31
 8005724:	d536      	bpl.n	8005794 <_printf_float+0x424>
 8005726:	2301      	movs	r3, #1
 8005728:	4642      	mov	r2, r8
 800572a:	4631      	mov	r1, r6
 800572c:	4628      	mov	r0, r5
 800572e:	47b8      	blx	r7
 8005730:	3001      	adds	r0, #1
 8005732:	f43f ae78 	beq.w	8005426 <_printf_float+0xb6>
 8005736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	f43f ae70 	beq.w	8005426 <_printf_float+0xb6>
 8005746:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800574a:	2200      	movs	r2, #0
 800574c:	2300      	movs	r3, #0
 800574e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005752:	f7fb f9d9 	bl	8000b08 <__aeabi_dcmpeq>
 8005756:	b9c0      	cbnz	r0, 800578a <_printf_float+0x41a>
 8005758:	4653      	mov	r3, sl
 800575a:	f108 0201 	add.w	r2, r8, #1
 800575e:	4631      	mov	r1, r6
 8005760:	4628      	mov	r0, r5
 8005762:	47b8      	blx	r7
 8005764:	3001      	adds	r0, #1
 8005766:	d10c      	bne.n	8005782 <_printf_float+0x412>
 8005768:	e65d      	b.n	8005426 <_printf_float+0xb6>
 800576a:	2301      	movs	r3, #1
 800576c:	465a      	mov	r2, fp
 800576e:	4631      	mov	r1, r6
 8005770:	4628      	mov	r0, r5
 8005772:	47b8      	blx	r7
 8005774:	3001      	adds	r0, #1
 8005776:	f43f ae56 	beq.w	8005426 <_printf_float+0xb6>
 800577a:	f108 0801 	add.w	r8, r8, #1
 800577e:	45d0      	cmp	r8, sl
 8005780:	dbf3      	blt.n	800576a <_printf_float+0x3fa>
 8005782:	464b      	mov	r3, r9
 8005784:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005788:	e6df      	b.n	800554a <_printf_float+0x1da>
 800578a:	f04f 0800 	mov.w	r8, #0
 800578e:	f104 0b1a 	add.w	fp, r4, #26
 8005792:	e7f4      	b.n	800577e <_printf_float+0x40e>
 8005794:	2301      	movs	r3, #1
 8005796:	4642      	mov	r2, r8
 8005798:	e7e1      	b.n	800575e <_printf_float+0x3ee>
 800579a:	2301      	movs	r3, #1
 800579c:	464a      	mov	r2, r9
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	f43f ae3e 	beq.w	8005426 <_printf_float+0xb6>
 80057aa:	f108 0801 	add.w	r8, r8, #1
 80057ae:	68e3      	ldr	r3, [r4, #12]
 80057b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80057b2:	1a5b      	subs	r3, r3, r1
 80057b4:	4543      	cmp	r3, r8
 80057b6:	dcf0      	bgt.n	800579a <_printf_float+0x42a>
 80057b8:	e6fc      	b.n	80055b4 <_printf_float+0x244>
 80057ba:	f04f 0800 	mov.w	r8, #0
 80057be:	f104 0919 	add.w	r9, r4, #25
 80057c2:	e7f4      	b.n	80057ae <_printf_float+0x43e>

080057c4 <_printf_common>:
 80057c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c8:	4616      	mov	r6, r2
 80057ca:	4698      	mov	r8, r3
 80057cc:	688a      	ldr	r2, [r1, #8]
 80057ce:	690b      	ldr	r3, [r1, #16]
 80057d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057d4:	4293      	cmp	r3, r2
 80057d6:	bfb8      	it	lt
 80057d8:	4613      	movlt	r3, r2
 80057da:	6033      	str	r3, [r6, #0]
 80057dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057e0:	4607      	mov	r7, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	b10a      	cbz	r2, 80057ea <_printf_common+0x26>
 80057e6:	3301      	adds	r3, #1
 80057e8:	6033      	str	r3, [r6, #0]
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	0699      	lsls	r1, r3, #26
 80057ee:	bf42      	ittt	mi
 80057f0:	6833      	ldrmi	r3, [r6, #0]
 80057f2:	3302      	addmi	r3, #2
 80057f4:	6033      	strmi	r3, [r6, #0]
 80057f6:	6825      	ldr	r5, [r4, #0]
 80057f8:	f015 0506 	ands.w	r5, r5, #6
 80057fc:	d106      	bne.n	800580c <_printf_common+0x48>
 80057fe:	f104 0a19 	add.w	sl, r4, #25
 8005802:	68e3      	ldr	r3, [r4, #12]
 8005804:	6832      	ldr	r2, [r6, #0]
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	42ab      	cmp	r3, r5
 800580a:	dc26      	bgt.n	800585a <_printf_common+0x96>
 800580c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005810:	6822      	ldr	r2, [r4, #0]
 8005812:	3b00      	subs	r3, #0
 8005814:	bf18      	it	ne
 8005816:	2301      	movne	r3, #1
 8005818:	0692      	lsls	r2, r2, #26
 800581a:	d42b      	bmi.n	8005874 <_printf_common+0xb0>
 800581c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005820:	4641      	mov	r1, r8
 8005822:	4638      	mov	r0, r7
 8005824:	47c8      	blx	r9
 8005826:	3001      	adds	r0, #1
 8005828:	d01e      	beq.n	8005868 <_printf_common+0xa4>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	6922      	ldr	r2, [r4, #16]
 800582e:	f003 0306 	and.w	r3, r3, #6
 8005832:	2b04      	cmp	r3, #4
 8005834:	bf02      	ittt	eq
 8005836:	68e5      	ldreq	r5, [r4, #12]
 8005838:	6833      	ldreq	r3, [r6, #0]
 800583a:	1aed      	subeq	r5, r5, r3
 800583c:	68a3      	ldr	r3, [r4, #8]
 800583e:	bf0c      	ite	eq
 8005840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005844:	2500      	movne	r5, #0
 8005846:	4293      	cmp	r3, r2
 8005848:	bfc4      	itt	gt
 800584a:	1a9b      	subgt	r3, r3, r2
 800584c:	18ed      	addgt	r5, r5, r3
 800584e:	2600      	movs	r6, #0
 8005850:	341a      	adds	r4, #26
 8005852:	42b5      	cmp	r5, r6
 8005854:	d11a      	bne.n	800588c <_printf_common+0xc8>
 8005856:	2000      	movs	r0, #0
 8005858:	e008      	b.n	800586c <_printf_common+0xa8>
 800585a:	2301      	movs	r3, #1
 800585c:	4652      	mov	r2, sl
 800585e:	4641      	mov	r1, r8
 8005860:	4638      	mov	r0, r7
 8005862:	47c8      	blx	r9
 8005864:	3001      	adds	r0, #1
 8005866:	d103      	bne.n	8005870 <_printf_common+0xac>
 8005868:	f04f 30ff 	mov.w	r0, #4294967295
 800586c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005870:	3501      	adds	r5, #1
 8005872:	e7c6      	b.n	8005802 <_printf_common+0x3e>
 8005874:	18e1      	adds	r1, r4, r3
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	2030      	movs	r0, #48	@ 0x30
 800587a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800587e:	4422      	add	r2, r4
 8005880:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005884:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005888:	3302      	adds	r3, #2
 800588a:	e7c7      	b.n	800581c <_printf_common+0x58>
 800588c:	2301      	movs	r3, #1
 800588e:	4622      	mov	r2, r4
 8005890:	4641      	mov	r1, r8
 8005892:	4638      	mov	r0, r7
 8005894:	47c8      	blx	r9
 8005896:	3001      	adds	r0, #1
 8005898:	d0e6      	beq.n	8005868 <_printf_common+0xa4>
 800589a:	3601      	adds	r6, #1
 800589c:	e7d9      	b.n	8005852 <_printf_common+0x8e>
	...

080058a0 <_printf_i>:
 80058a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058a4:	7e0f      	ldrb	r7, [r1, #24]
 80058a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058a8:	2f78      	cmp	r7, #120	@ 0x78
 80058aa:	4691      	mov	r9, r2
 80058ac:	4680      	mov	r8, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	469a      	mov	sl, r3
 80058b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058b6:	d807      	bhi.n	80058c8 <_printf_i+0x28>
 80058b8:	2f62      	cmp	r7, #98	@ 0x62
 80058ba:	d80a      	bhi.n	80058d2 <_printf_i+0x32>
 80058bc:	2f00      	cmp	r7, #0
 80058be:	f000 80d2 	beq.w	8005a66 <_printf_i+0x1c6>
 80058c2:	2f58      	cmp	r7, #88	@ 0x58
 80058c4:	f000 80b9 	beq.w	8005a3a <_printf_i+0x19a>
 80058c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058d0:	e03a      	b.n	8005948 <_printf_i+0xa8>
 80058d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058d6:	2b15      	cmp	r3, #21
 80058d8:	d8f6      	bhi.n	80058c8 <_printf_i+0x28>
 80058da:	a101      	add	r1, pc, #4	@ (adr r1, 80058e0 <_printf_i+0x40>)
 80058dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058e0:	08005939 	.word	0x08005939
 80058e4:	0800594d 	.word	0x0800594d
 80058e8:	080058c9 	.word	0x080058c9
 80058ec:	080058c9 	.word	0x080058c9
 80058f0:	080058c9 	.word	0x080058c9
 80058f4:	080058c9 	.word	0x080058c9
 80058f8:	0800594d 	.word	0x0800594d
 80058fc:	080058c9 	.word	0x080058c9
 8005900:	080058c9 	.word	0x080058c9
 8005904:	080058c9 	.word	0x080058c9
 8005908:	080058c9 	.word	0x080058c9
 800590c:	08005a4d 	.word	0x08005a4d
 8005910:	08005977 	.word	0x08005977
 8005914:	08005a07 	.word	0x08005a07
 8005918:	080058c9 	.word	0x080058c9
 800591c:	080058c9 	.word	0x080058c9
 8005920:	08005a6f 	.word	0x08005a6f
 8005924:	080058c9 	.word	0x080058c9
 8005928:	08005977 	.word	0x08005977
 800592c:	080058c9 	.word	0x080058c9
 8005930:	080058c9 	.word	0x080058c9
 8005934:	08005a0f 	.word	0x08005a0f
 8005938:	6833      	ldr	r3, [r6, #0]
 800593a:	1d1a      	adds	r2, r3, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6032      	str	r2, [r6, #0]
 8005940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005944:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005948:	2301      	movs	r3, #1
 800594a:	e09d      	b.n	8005a88 <_printf_i+0x1e8>
 800594c:	6833      	ldr	r3, [r6, #0]
 800594e:	6820      	ldr	r0, [r4, #0]
 8005950:	1d19      	adds	r1, r3, #4
 8005952:	6031      	str	r1, [r6, #0]
 8005954:	0606      	lsls	r6, r0, #24
 8005956:	d501      	bpl.n	800595c <_printf_i+0xbc>
 8005958:	681d      	ldr	r5, [r3, #0]
 800595a:	e003      	b.n	8005964 <_printf_i+0xc4>
 800595c:	0645      	lsls	r5, r0, #25
 800595e:	d5fb      	bpl.n	8005958 <_printf_i+0xb8>
 8005960:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005964:	2d00      	cmp	r5, #0
 8005966:	da03      	bge.n	8005970 <_printf_i+0xd0>
 8005968:	232d      	movs	r3, #45	@ 0x2d
 800596a:	426d      	negs	r5, r5
 800596c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005970:	4859      	ldr	r0, [pc, #356]	@ (8005ad8 <_printf_i+0x238>)
 8005972:	230a      	movs	r3, #10
 8005974:	e011      	b.n	800599a <_printf_i+0xfa>
 8005976:	6821      	ldr	r1, [r4, #0]
 8005978:	6833      	ldr	r3, [r6, #0]
 800597a:	0608      	lsls	r0, r1, #24
 800597c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005980:	d402      	bmi.n	8005988 <_printf_i+0xe8>
 8005982:	0649      	lsls	r1, r1, #25
 8005984:	bf48      	it	mi
 8005986:	b2ad      	uxthmi	r5, r5
 8005988:	2f6f      	cmp	r7, #111	@ 0x6f
 800598a:	4853      	ldr	r0, [pc, #332]	@ (8005ad8 <_printf_i+0x238>)
 800598c:	6033      	str	r3, [r6, #0]
 800598e:	bf14      	ite	ne
 8005990:	230a      	movne	r3, #10
 8005992:	2308      	moveq	r3, #8
 8005994:	2100      	movs	r1, #0
 8005996:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800599a:	6866      	ldr	r6, [r4, #4]
 800599c:	60a6      	str	r6, [r4, #8]
 800599e:	2e00      	cmp	r6, #0
 80059a0:	bfa2      	ittt	ge
 80059a2:	6821      	ldrge	r1, [r4, #0]
 80059a4:	f021 0104 	bicge.w	r1, r1, #4
 80059a8:	6021      	strge	r1, [r4, #0]
 80059aa:	b90d      	cbnz	r5, 80059b0 <_printf_i+0x110>
 80059ac:	2e00      	cmp	r6, #0
 80059ae:	d04b      	beq.n	8005a48 <_printf_i+0x1a8>
 80059b0:	4616      	mov	r6, r2
 80059b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80059b6:	fb03 5711 	mls	r7, r3, r1, r5
 80059ba:	5dc7      	ldrb	r7, [r0, r7]
 80059bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059c0:	462f      	mov	r7, r5
 80059c2:	42bb      	cmp	r3, r7
 80059c4:	460d      	mov	r5, r1
 80059c6:	d9f4      	bls.n	80059b2 <_printf_i+0x112>
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d10b      	bne.n	80059e4 <_printf_i+0x144>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	07df      	lsls	r7, r3, #31
 80059d0:	d508      	bpl.n	80059e4 <_printf_i+0x144>
 80059d2:	6923      	ldr	r3, [r4, #16]
 80059d4:	6861      	ldr	r1, [r4, #4]
 80059d6:	4299      	cmp	r1, r3
 80059d8:	bfde      	ittt	le
 80059da:	2330      	movle	r3, #48	@ 0x30
 80059dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059e4:	1b92      	subs	r2, r2, r6
 80059e6:	6122      	str	r2, [r4, #16]
 80059e8:	f8cd a000 	str.w	sl, [sp]
 80059ec:	464b      	mov	r3, r9
 80059ee:	aa03      	add	r2, sp, #12
 80059f0:	4621      	mov	r1, r4
 80059f2:	4640      	mov	r0, r8
 80059f4:	f7ff fee6 	bl	80057c4 <_printf_common>
 80059f8:	3001      	adds	r0, #1
 80059fa:	d14a      	bne.n	8005a92 <_printf_i+0x1f2>
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005a00:	b004      	add	sp, #16
 8005a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	f043 0320 	orr.w	r3, r3, #32
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	4833      	ldr	r0, [pc, #204]	@ (8005adc <_printf_i+0x23c>)
 8005a10:	2778      	movs	r7, #120	@ 0x78
 8005a12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	6831      	ldr	r1, [r6, #0]
 8005a1a:	061f      	lsls	r7, r3, #24
 8005a1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a20:	d402      	bmi.n	8005a28 <_printf_i+0x188>
 8005a22:	065f      	lsls	r7, r3, #25
 8005a24:	bf48      	it	mi
 8005a26:	b2ad      	uxthmi	r5, r5
 8005a28:	6031      	str	r1, [r6, #0]
 8005a2a:	07d9      	lsls	r1, r3, #31
 8005a2c:	bf44      	itt	mi
 8005a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a32:	6023      	strmi	r3, [r4, #0]
 8005a34:	b11d      	cbz	r5, 8005a3e <_printf_i+0x19e>
 8005a36:	2310      	movs	r3, #16
 8005a38:	e7ac      	b.n	8005994 <_printf_i+0xf4>
 8005a3a:	4827      	ldr	r0, [pc, #156]	@ (8005ad8 <_printf_i+0x238>)
 8005a3c:	e7e9      	b.n	8005a12 <_printf_i+0x172>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	f023 0320 	bic.w	r3, r3, #32
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	e7f6      	b.n	8005a36 <_printf_i+0x196>
 8005a48:	4616      	mov	r6, r2
 8005a4a:	e7bd      	b.n	80059c8 <_printf_i+0x128>
 8005a4c:	6833      	ldr	r3, [r6, #0]
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	6961      	ldr	r1, [r4, #20]
 8005a52:	1d18      	adds	r0, r3, #4
 8005a54:	6030      	str	r0, [r6, #0]
 8005a56:	062e      	lsls	r6, r5, #24
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	d501      	bpl.n	8005a60 <_printf_i+0x1c0>
 8005a5c:	6019      	str	r1, [r3, #0]
 8005a5e:	e002      	b.n	8005a66 <_printf_i+0x1c6>
 8005a60:	0668      	lsls	r0, r5, #25
 8005a62:	d5fb      	bpl.n	8005a5c <_printf_i+0x1bc>
 8005a64:	8019      	strh	r1, [r3, #0]
 8005a66:	2300      	movs	r3, #0
 8005a68:	6123      	str	r3, [r4, #16]
 8005a6a:	4616      	mov	r6, r2
 8005a6c:	e7bc      	b.n	80059e8 <_printf_i+0x148>
 8005a6e:	6833      	ldr	r3, [r6, #0]
 8005a70:	1d1a      	adds	r2, r3, #4
 8005a72:	6032      	str	r2, [r6, #0]
 8005a74:	681e      	ldr	r6, [r3, #0]
 8005a76:	6862      	ldr	r2, [r4, #4]
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	f7fa fbc8 	bl	8000210 <memchr>
 8005a80:	b108      	cbz	r0, 8005a86 <_printf_i+0x1e6>
 8005a82:	1b80      	subs	r0, r0, r6
 8005a84:	6060      	str	r0, [r4, #4]
 8005a86:	6863      	ldr	r3, [r4, #4]
 8005a88:	6123      	str	r3, [r4, #16]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a90:	e7aa      	b.n	80059e8 <_printf_i+0x148>
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	4632      	mov	r2, r6
 8005a96:	4649      	mov	r1, r9
 8005a98:	4640      	mov	r0, r8
 8005a9a:	47d0      	blx	sl
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d0ad      	beq.n	80059fc <_printf_i+0x15c>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	079b      	lsls	r3, r3, #30
 8005aa4:	d413      	bmi.n	8005ace <_printf_i+0x22e>
 8005aa6:	68e0      	ldr	r0, [r4, #12]
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	4298      	cmp	r0, r3
 8005aac:	bfb8      	it	lt
 8005aae:	4618      	movlt	r0, r3
 8005ab0:	e7a6      	b.n	8005a00 <_printf_i+0x160>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4632      	mov	r2, r6
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	4640      	mov	r0, r8
 8005aba:	47d0      	blx	sl
 8005abc:	3001      	adds	r0, #1
 8005abe:	d09d      	beq.n	80059fc <_printf_i+0x15c>
 8005ac0:	3501      	adds	r5, #1
 8005ac2:	68e3      	ldr	r3, [r4, #12]
 8005ac4:	9903      	ldr	r1, [sp, #12]
 8005ac6:	1a5b      	subs	r3, r3, r1
 8005ac8:	42ab      	cmp	r3, r5
 8005aca:	dcf2      	bgt.n	8005ab2 <_printf_i+0x212>
 8005acc:	e7eb      	b.n	8005aa6 <_printf_i+0x206>
 8005ace:	2500      	movs	r5, #0
 8005ad0:	f104 0619 	add.w	r6, r4, #25
 8005ad4:	e7f5      	b.n	8005ac2 <_printf_i+0x222>
 8005ad6:	bf00      	nop
 8005ad8:	08007b72 	.word	0x08007b72
 8005adc:	08007b83 	.word	0x08007b83

08005ae0 <std>:
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	b510      	push	{r4, lr}
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8005aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aee:	6083      	str	r3, [r0, #8]
 8005af0:	8181      	strh	r1, [r0, #12]
 8005af2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005af4:	81c2      	strh	r2, [r0, #14]
 8005af6:	6183      	str	r3, [r0, #24]
 8005af8:	4619      	mov	r1, r3
 8005afa:	2208      	movs	r2, #8
 8005afc:	305c      	adds	r0, #92	@ 0x5c
 8005afe:	f000 f8f4 	bl	8005cea <memset>
 8005b02:	4b0d      	ldr	r3, [pc, #52]	@ (8005b38 <std+0x58>)
 8005b04:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b06:	4b0d      	ldr	r3, [pc, #52]	@ (8005b3c <std+0x5c>)
 8005b08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b40 <std+0x60>)
 8005b0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b44 <std+0x64>)
 8005b10:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <std+0x68>)
 8005b14:	6224      	str	r4, [r4, #32]
 8005b16:	429c      	cmp	r4, r3
 8005b18:	d006      	beq.n	8005b28 <std+0x48>
 8005b1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b1e:	4294      	cmp	r4, r2
 8005b20:	d002      	beq.n	8005b28 <std+0x48>
 8005b22:	33d0      	adds	r3, #208	@ 0xd0
 8005b24:	429c      	cmp	r4, r3
 8005b26:	d105      	bne.n	8005b34 <std+0x54>
 8005b28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b30:	f000 b958 	b.w	8005de4 <__retarget_lock_init_recursive>
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	bf00      	nop
 8005b38:	08005c65 	.word	0x08005c65
 8005b3c:	08005c87 	.word	0x08005c87
 8005b40:	08005cbf 	.word	0x08005cbf
 8005b44:	08005ce3 	.word	0x08005ce3
 8005b48:	2000033c 	.word	0x2000033c

08005b4c <stdio_exit_handler>:
 8005b4c:	4a02      	ldr	r2, [pc, #8]	@ (8005b58 <stdio_exit_handler+0xc>)
 8005b4e:	4903      	ldr	r1, [pc, #12]	@ (8005b5c <stdio_exit_handler+0x10>)
 8005b50:	4803      	ldr	r0, [pc, #12]	@ (8005b60 <stdio_exit_handler+0x14>)
 8005b52:	f000 b869 	b.w	8005c28 <_fwalk_sglue>
 8005b56:	bf00      	nop
 8005b58:	20000014 	.word	0x20000014
 8005b5c:	08007495 	.word	0x08007495
 8005b60:	20000024 	.word	0x20000024

08005b64 <cleanup_stdio>:
 8005b64:	6841      	ldr	r1, [r0, #4]
 8005b66:	4b0c      	ldr	r3, [pc, #48]	@ (8005b98 <cleanup_stdio+0x34>)
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	d001      	beq.n	8005b74 <cleanup_stdio+0x10>
 8005b70:	f001 fc90 	bl	8007494 <_fflush_r>
 8005b74:	68a1      	ldr	r1, [r4, #8]
 8005b76:	4b09      	ldr	r3, [pc, #36]	@ (8005b9c <cleanup_stdio+0x38>)
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	d002      	beq.n	8005b82 <cleanup_stdio+0x1e>
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f001 fc89 	bl	8007494 <_fflush_r>
 8005b82:	68e1      	ldr	r1, [r4, #12]
 8005b84:	4b06      	ldr	r3, [pc, #24]	@ (8005ba0 <cleanup_stdio+0x3c>)
 8005b86:	4299      	cmp	r1, r3
 8005b88:	d004      	beq.n	8005b94 <cleanup_stdio+0x30>
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b90:	f001 bc80 	b.w	8007494 <_fflush_r>
 8005b94:	bd10      	pop	{r4, pc}
 8005b96:	bf00      	nop
 8005b98:	2000033c 	.word	0x2000033c
 8005b9c:	200003a4 	.word	0x200003a4
 8005ba0:	2000040c 	.word	0x2000040c

08005ba4 <global_stdio_init.part.0>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <global_stdio_init.part.0+0x30>)
 8005ba8:	4c0b      	ldr	r4, [pc, #44]	@ (8005bd8 <global_stdio_init.part.0+0x34>)
 8005baa:	4a0c      	ldr	r2, [pc, #48]	@ (8005bdc <global_stdio_init.part.0+0x38>)
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	4620      	mov	r0, r4
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2104      	movs	r1, #4
 8005bb4:	f7ff ff94 	bl	8005ae0 <std>
 8005bb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	2109      	movs	r1, #9
 8005bc0:	f7ff ff8e 	bl	8005ae0 <std>
 8005bc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005bc8:	2202      	movs	r2, #2
 8005bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bce:	2112      	movs	r1, #18
 8005bd0:	f7ff bf86 	b.w	8005ae0 <std>
 8005bd4:	20000474 	.word	0x20000474
 8005bd8:	2000033c 	.word	0x2000033c
 8005bdc:	08005b4d 	.word	0x08005b4d

08005be0 <__sfp_lock_acquire>:
 8005be0:	4801      	ldr	r0, [pc, #4]	@ (8005be8 <__sfp_lock_acquire+0x8>)
 8005be2:	f000 b900 	b.w	8005de6 <__retarget_lock_acquire_recursive>
 8005be6:	bf00      	nop
 8005be8:	2000047d 	.word	0x2000047d

08005bec <__sfp_lock_release>:
 8005bec:	4801      	ldr	r0, [pc, #4]	@ (8005bf4 <__sfp_lock_release+0x8>)
 8005bee:	f000 b8fb 	b.w	8005de8 <__retarget_lock_release_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	2000047d 	.word	0x2000047d

08005bf8 <__sinit>:
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	f7ff fff0 	bl	8005be0 <__sfp_lock_acquire>
 8005c00:	6a23      	ldr	r3, [r4, #32]
 8005c02:	b11b      	cbz	r3, 8005c0c <__sinit+0x14>
 8005c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c08:	f7ff bff0 	b.w	8005bec <__sfp_lock_release>
 8005c0c:	4b04      	ldr	r3, [pc, #16]	@ (8005c20 <__sinit+0x28>)
 8005c0e:	6223      	str	r3, [r4, #32]
 8005c10:	4b04      	ldr	r3, [pc, #16]	@ (8005c24 <__sinit+0x2c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f5      	bne.n	8005c04 <__sinit+0xc>
 8005c18:	f7ff ffc4 	bl	8005ba4 <global_stdio_init.part.0>
 8005c1c:	e7f2      	b.n	8005c04 <__sinit+0xc>
 8005c1e:	bf00      	nop
 8005c20:	08005b65 	.word	0x08005b65
 8005c24:	20000474 	.word	0x20000474

08005c28 <_fwalk_sglue>:
 8005c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c2c:	4607      	mov	r7, r0
 8005c2e:	4688      	mov	r8, r1
 8005c30:	4614      	mov	r4, r2
 8005c32:	2600      	movs	r6, #0
 8005c34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c38:	f1b9 0901 	subs.w	r9, r9, #1
 8005c3c:	d505      	bpl.n	8005c4a <_fwalk_sglue+0x22>
 8005c3e:	6824      	ldr	r4, [r4, #0]
 8005c40:	2c00      	cmp	r4, #0
 8005c42:	d1f7      	bne.n	8005c34 <_fwalk_sglue+0xc>
 8005c44:	4630      	mov	r0, r6
 8005c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d907      	bls.n	8005c60 <_fwalk_sglue+0x38>
 8005c50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c54:	3301      	adds	r3, #1
 8005c56:	d003      	beq.n	8005c60 <_fwalk_sglue+0x38>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	47c0      	blx	r8
 8005c5e:	4306      	orrs	r6, r0
 8005c60:	3568      	adds	r5, #104	@ 0x68
 8005c62:	e7e9      	b.n	8005c38 <_fwalk_sglue+0x10>

08005c64 <__sread>:
 8005c64:	b510      	push	{r4, lr}
 8005c66:	460c      	mov	r4, r1
 8005c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c6c:	f000 f86c 	bl	8005d48 <_read_r>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	bfab      	itete	ge
 8005c74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c76:	89a3      	ldrhlt	r3, [r4, #12]
 8005c78:	181b      	addge	r3, r3, r0
 8005c7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c7e:	bfac      	ite	ge
 8005c80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c82:	81a3      	strhlt	r3, [r4, #12]
 8005c84:	bd10      	pop	{r4, pc}

08005c86 <__swrite>:
 8005c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8a:	461f      	mov	r7, r3
 8005c8c:	898b      	ldrh	r3, [r1, #12]
 8005c8e:	05db      	lsls	r3, r3, #23
 8005c90:	4605      	mov	r5, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	4616      	mov	r6, r2
 8005c96:	d505      	bpl.n	8005ca4 <__swrite+0x1e>
 8005c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f000 f840 	bl	8005d24 <_lseek_r>
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005caa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cae:	81a3      	strh	r3, [r4, #12]
 8005cb0:	4632      	mov	r2, r6
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cba:	f000 b857 	b.w	8005d6c <_write_r>

08005cbe <__sseek>:
 8005cbe:	b510      	push	{r4, lr}
 8005cc0:	460c      	mov	r4, r1
 8005cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc6:	f000 f82d 	bl	8005d24 <_lseek_r>
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	bf15      	itete	ne
 8005cd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cda:	81a3      	strheq	r3, [r4, #12]
 8005cdc:	bf18      	it	ne
 8005cde:	81a3      	strhne	r3, [r4, #12]
 8005ce0:	bd10      	pop	{r4, pc}

08005ce2 <__sclose>:
 8005ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce6:	f000 b80d 	b.w	8005d04 <_close_r>

08005cea <memset>:
 8005cea:	4402      	add	r2, r0
 8005cec:	4603      	mov	r3, r0
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d100      	bne.n	8005cf4 <memset+0xa>
 8005cf2:	4770      	bx	lr
 8005cf4:	f803 1b01 	strb.w	r1, [r3], #1
 8005cf8:	e7f9      	b.n	8005cee <memset+0x4>
	...

08005cfc <_localeconv_r>:
 8005cfc:	4800      	ldr	r0, [pc, #0]	@ (8005d00 <_localeconv_r+0x4>)
 8005cfe:	4770      	bx	lr
 8005d00:	20000160 	.word	0x20000160

08005d04 <_close_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d06      	ldr	r5, [pc, #24]	@ (8005d20 <_close_r+0x1c>)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	f7fb fc32 	bl	8001578 <_close>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_close_r+0x1a>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_close_r+0x1a>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	20000478 	.word	0x20000478

08005d24 <_lseek_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	@ (8005d44 <_lseek_r+0x20>)
 8005d28:	4604      	mov	r4, r0
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	602a      	str	r2, [r5, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f7fb fc47 	bl	80015c6 <_lseek>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_lseek_r+0x1e>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_lseek_r+0x1e>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	20000478 	.word	0x20000478

08005d48 <_read_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4d07      	ldr	r5, [pc, #28]	@ (8005d68 <_read_r+0x20>)
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	4608      	mov	r0, r1
 8005d50:	4611      	mov	r1, r2
 8005d52:	2200      	movs	r2, #0
 8005d54:	602a      	str	r2, [r5, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f7fb fbd5 	bl	8001506 <_read>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d102      	bne.n	8005d66 <_read_r+0x1e>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	b103      	cbz	r3, 8005d66 <_read_r+0x1e>
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	20000478 	.word	0x20000478

08005d6c <_write_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d07      	ldr	r5, [pc, #28]	@ (8005d8c <_write_r+0x20>)
 8005d70:	4604      	mov	r4, r0
 8005d72:	4608      	mov	r0, r1
 8005d74:	4611      	mov	r1, r2
 8005d76:	2200      	movs	r2, #0
 8005d78:	602a      	str	r2, [r5, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f7fb fbe0 	bl	8001540 <_write>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_write_r+0x1e>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_write_r+0x1e>
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	20000478 	.word	0x20000478

08005d90 <__errno>:
 8005d90:	4b01      	ldr	r3, [pc, #4]	@ (8005d98 <__errno+0x8>)
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20000020 	.word	0x20000020

08005d9c <__libc_init_array>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005dd4 <__libc_init_array+0x38>)
 8005da0:	4c0d      	ldr	r4, [pc, #52]	@ (8005dd8 <__libc_init_array+0x3c>)
 8005da2:	1b64      	subs	r4, r4, r5
 8005da4:	10a4      	asrs	r4, r4, #2
 8005da6:	2600      	movs	r6, #0
 8005da8:	42a6      	cmp	r6, r4
 8005daa:	d109      	bne.n	8005dc0 <__libc_init_array+0x24>
 8005dac:	4d0b      	ldr	r5, [pc, #44]	@ (8005ddc <__libc_init_array+0x40>)
 8005dae:	4c0c      	ldr	r4, [pc, #48]	@ (8005de0 <__libc_init_array+0x44>)
 8005db0:	f001 febe 	bl	8007b30 <_init>
 8005db4:	1b64      	subs	r4, r4, r5
 8005db6:	10a4      	asrs	r4, r4, #2
 8005db8:	2600      	movs	r6, #0
 8005dba:	42a6      	cmp	r6, r4
 8005dbc:	d105      	bne.n	8005dca <__libc_init_array+0x2e>
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}
 8005dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc4:	4798      	blx	r3
 8005dc6:	3601      	adds	r6, #1
 8005dc8:	e7ee      	b.n	8005da8 <__libc_init_array+0xc>
 8005dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dce:	4798      	blx	r3
 8005dd0:	3601      	adds	r6, #1
 8005dd2:	e7f2      	b.n	8005dba <__libc_init_array+0x1e>
 8005dd4:	08007ed8 	.word	0x08007ed8
 8005dd8:	08007ed8 	.word	0x08007ed8
 8005ddc:	08007ed8 	.word	0x08007ed8
 8005de0:	08007edc 	.word	0x08007edc

08005de4 <__retarget_lock_init_recursive>:
 8005de4:	4770      	bx	lr

08005de6 <__retarget_lock_acquire_recursive>:
 8005de6:	4770      	bx	lr

08005de8 <__retarget_lock_release_recursive>:
 8005de8:	4770      	bx	lr

08005dea <quorem>:
 8005dea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dee:	6903      	ldr	r3, [r0, #16]
 8005df0:	690c      	ldr	r4, [r1, #16]
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	4607      	mov	r7, r0
 8005df6:	db7e      	blt.n	8005ef6 <quorem+0x10c>
 8005df8:	3c01      	subs	r4, #1
 8005dfa:	f101 0814 	add.w	r8, r1, #20
 8005dfe:	00a3      	lsls	r3, r4, #2
 8005e00:	f100 0514 	add.w	r5, r0, #20
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e14:	3301      	adds	r3, #1
 8005e16:	429a      	cmp	r2, r3
 8005e18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e20:	d32e      	bcc.n	8005e80 <quorem+0x96>
 8005e22:	f04f 0a00 	mov.w	sl, #0
 8005e26:	46c4      	mov	ip, r8
 8005e28:	46ae      	mov	lr, r5
 8005e2a:	46d3      	mov	fp, sl
 8005e2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e30:	b298      	uxth	r0, r3
 8005e32:	fb06 a000 	mla	r0, r6, r0, sl
 8005e36:	0c02      	lsrs	r2, r0, #16
 8005e38:	0c1b      	lsrs	r3, r3, #16
 8005e3a:	fb06 2303 	mla	r3, r6, r3, r2
 8005e3e:	f8de 2000 	ldr.w	r2, [lr]
 8005e42:	b280      	uxth	r0, r0
 8005e44:	b292      	uxth	r2, r2
 8005e46:	1a12      	subs	r2, r2, r0
 8005e48:	445a      	add	r2, fp
 8005e4a:	f8de 0000 	ldr.w	r0, [lr]
 8005e4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005e58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005e5c:	b292      	uxth	r2, r2
 8005e5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e62:	45e1      	cmp	r9, ip
 8005e64:	f84e 2b04 	str.w	r2, [lr], #4
 8005e68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e6c:	d2de      	bcs.n	8005e2c <quorem+0x42>
 8005e6e:	9b00      	ldr	r3, [sp, #0]
 8005e70:	58eb      	ldr	r3, [r5, r3]
 8005e72:	b92b      	cbnz	r3, 8005e80 <quorem+0x96>
 8005e74:	9b01      	ldr	r3, [sp, #4]
 8005e76:	3b04      	subs	r3, #4
 8005e78:	429d      	cmp	r5, r3
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	d32f      	bcc.n	8005ede <quorem+0xf4>
 8005e7e:	613c      	str	r4, [r7, #16]
 8005e80:	4638      	mov	r0, r7
 8005e82:	f001 f97b 	bl	800717c <__mcmp>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	db25      	blt.n	8005ed6 <quorem+0xec>
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e92:	f8d1 c000 	ldr.w	ip, [r1]
 8005e96:	fa1f fe82 	uxth.w	lr, r2
 8005e9a:	fa1f f38c 	uxth.w	r3, ip
 8005e9e:	eba3 030e 	sub.w	r3, r3, lr
 8005ea2:	4403      	add	r3, r0
 8005ea4:	0c12      	lsrs	r2, r2, #16
 8005ea6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005eaa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eb4:	45c1      	cmp	r9, r8
 8005eb6:	f841 3b04 	str.w	r3, [r1], #4
 8005eba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ebe:	d2e6      	bcs.n	8005e8e <quorem+0xa4>
 8005ec0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ec4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ec8:	b922      	cbnz	r2, 8005ed4 <quorem+0xea>
 8005eca:	3b04      	subs	r3, #4
 8005ecc:	429d      	cmp	r5, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	d30b      	bcc.n	8005eea <quorem+0x100>
 8005ed2:	613c      	str	r4, [r7, #16]
 8005ed4:	3601      	adds	r6, #1
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	b003      	add	sp, #12
 8005eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	3b04      	subs	r3, #4
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	d1cb      	bne.n	8005e7e <quorem+0x94>
 8005ee6:	3c01      	subs	r4, #1
 8005ee8:	e7c6      	b.n	8005e78 <quorem+0x8e>
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	3b04      	subs	r3, #4
 8005eee:	2a00      	cmp	r2, #0
 8005ef0:	d1ef      	bne.n	8005ed2 <quorem+0xe8>
 8005ef2:	3c01      	subs	r4, #1
 8005ef4:	e7ea      	b.n	8005ecc <quorem+0xe2>
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	e7ee      	b.n	8005ed8 <quorem+0xee>
 8005efa:	0000      	movs	r0, r0
 8005efc:	0000      	movs	r0, r0
	...

08005f00 <_dtoa_r>:
 8005f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f04:	69c7      	ldr	r7, [r0, #28]
 8005f06:	b099      	sub	sp, #100	@ 0x64
 8005f08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f0c:	ec55 4b10 	vmov	r4, r5, d0
 8005f10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005f12:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f14:	4683      	mov	fp, r0
 8005f16:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f1a:	b97f      	cbnz	r7, 8005f3c <_dtoa_r+0x3c>
 8005f1c:	2010      	movs	r0, #16
 8005f1e:	f000 fdfd 	bl	8006b1c <malloc>
 8005f22:	4602      	mov	r2, r0
 8005f24:	f8cb 001c 	str.w	r0, [fp, #28]
 8005f28:	b920      	cbnz	r0, 8005f34 <_dtoa_r+0x34>
 8005f2a:	4ba7      	ldr	r3, [pc, #668]	@ (80061c8 <_dtoa_r+0x2c8>)
 8005f2c:	21ef      	movs	r1, #239	@ 0xef
 8005f2e:	48a7      	ldr	r0, [pc, #668]	@ (80061cc <_dtoa_r+0x2cc>)
 8005f30:	f001 faf6 	bl	8007520 <__assert_func>
 8005f34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005f38:	6007      	str	r7, [r0, #0]
 8005f3a:	60c7      	str	r7, [r0, #12]
 8005f3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f40:	6819      	ldr	r1, [r3, #0]
 8005f42:	b159      	cbz	r1, 8005f5c <_dtoa_r+0x5c>
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	604a      	str	r2, [r1, #4]
 8005f48:	2301      	movs	r3, #1
 8005f4a:	4093      	lsls	r3, r2
 8005f4c:	608b      	str	r3, [r1, #8]
 8005f4e:	4658      	mov	r0, fp
 8005f50:	f000 feda 	bl	8006d08 <_Bfree>
 8005f54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	1e2b      	subs	r3, r5, #0
 8005f5e:	bfb9      	ittee	lt
 8005f60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f64:	9303      	strlt	r3, [sp, #12]
 8005f66:	2300      	movge	r3, #0
 8005f68:	6033      	strge	r3, [r6, #0]
 8005f6a:	9f03      	ldr	r7, [sp, #12]
 8005f6c:	4b98      	ldr	r3, [pc, #608]	@ (80061d0 <_dtoa_r+0x2d0>)
 8005f6e:	bfbc      	itt	lt
 8005f70:	2201      	movlt	r2, #1
 8005f72:	6032      	strlt	r2, [r6, #0]
 8005f74:	43bb      	bics	r3, r7
 8005f76:	d112      	bne.n	8005f9e <_dtoa_r+0x9e>
 8005f78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f84:	4323      	orrs	r3, r4
 8005f86:	f000 854d 	beq.w	8006a24 <_dtoa_r+0xb24>
 8005f8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80061e4 <_dtoa_r+0x2e4>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 854f 	beq.w	8006a34 <_dtoa_r+0xb34>
 8005f96:	f10a 0303 	add.w	r3, sl, #3
 8005f9a:	f000 bd49 	b.w	8006a30 <_dtoa_r+0xb30>
 8005f9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	ec51 0b17 	vmov	r0, r1, d7
 8005fa8:	2300      	movs	r3, #0
 8005faa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005fae:	f7fa fdab 	bl	8000b08 <__aeabi_dcmpeq>
 8005fb2:	4680      	mov	r8, r0
 8005fb4:	b158      	cbz	r0, 8005fce <_dtoa_r+0xce>
 8005fb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005fb8:	2301      	movs	r3, #1
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005fbe:	b113      	cbz	r3, 8005fc6 <_dtoa_r+0xc6>
 8005fc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005fc2:	4b84      	ldr	r3, [pc, #528]	@ (80061d4 <_dtoa_r+0x2d4>)
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80061e8 <_dtoa_r+0x2e8>
 8005fca:	f000 bd33 	b.w	8006a34 <_dtoa_r+0xb34>
 8005fce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005fd2:	aa16      	add	r2, sp, #88	@ 0x58
 8005fd4:	a917      	add	r1, sp, #92	@ 0x5c
 8005fd6:	4658      	mov	r0, fp
 8005fd8:	f001 f980 	bl	80072dc <__d2b>
 8005fdc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005fe0:	4681      	mov	r9, r0
 8005fe2:	2e00      	cmp	r6, #0
 8005fe4:	d077      	beq.n	80060d6 <_dtoa_r+0x1d6>
 8005fe6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fe8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ff4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ff8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005ffc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006000:	4619      	mov	r1, r3
 8006002:	2200      	movs	r2, #0
 8006004:	4b74      	ldr	r3, [pc, #464]	@ (80061d8 <_dtoa_r+0x2d8>)
 8006006:	f7fa f95f 	bl	80002c8 <__aeabi_dsub>
 800600a:	a369      	add	r3, pc, #420	@ (adr r3, 80061b0 <_dtoa_r+0x2b0>)
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	f7fa fb12 	bl	8000638 <__aeabi_dmul>
 8006014:	a368      	add	r3, pc, #416	@ (adr r3, 80061b8 <_dtoa_r+0x2b8>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f7fa f957 	bl	80002cc <__adddf3>
 800601e:	4604      	mov	r4, r0
 8006020:	4630      	mov	r0, r6
 8006022:	460d      	mov	r5, r1
 8006024:	f7fa fa9e 	bl	8000564 <__aeabi_i2d>
 8006028:	a365      	add	r3, pc, #404	@ (adr r3, 80061c0 <_dtoa_r+0x2c0>)
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	f7fa fb03 	bl	8000638 <__aeabi_dmul>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4620      	mov	r0, r4
 8006038:	4629      	mov	r1, r5
 800603a:	f7fa f947 	bl	80002cc <__adddf3>
 800603e:	4604      	mov	r4, r0
 8006040:	460d      	mov	r5, r1
 8006042:	f7fa fda9 	bl	8000b98 <__aeabi_d2iz>
 8006046:	2200      	movs	r2, #0
 8006048:	4607      	mov	r7, r0
 800604a:	2300      	movs	r3, #0
 800604c:	4620      	mov	r0, r4
 800604e:	4629      	mov	r1, r5
 8006050:	f7fa fd64 	bl	8000b1c <__aeabi_dcmplt>
 8006054:	b140      	cbz	r0, 8006068 <_dtoa_r+0x168>
 8006056:	4638      	mov	r0, r7
 8006058:	f7fa fa84 	bl	8000564 <__aeabi_i2d>
 800605c:	4622      	mov	r2, r4
 800605e:	462b      	mov	r3, r5
 8006060:	f7fa fd52 	bl	8000b08 <__aeabi_dcmpeq>
 8006064:	b900      	cbnz	r0, 8006068 <_dtoa_r+0x168>
 8006066:	3f01      	subs	r7, #1
 8006068:	2f16      	cmp	r7, #22
 800606a:	d851      	bhi.n	8006110 <_dtoa_r+0x210>
 800606c:	4b5b      	ldr	r3, [pc, #364]	@ (80061dc <_dtoa_r+0x2dc>)
 800606e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800607a:	f7fa fd4f 	bl	8000b1c <__aeabi_dcmplt>
 800607e:	2800      	cmp	r0, #0
 8006080:	d048      	beq.n	8006114 <_dtoa_r+0x214>
 8006082:	3f01      	subs	r7, #1
 8006084:	2300      	movs	r3, #0
 8006086:	9312      	str	r3, [sp, #72]	@ 0x48
 8006088:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800608a:	1b9b      	subs	r3, r3, r6
 800608c:	1e5a      	subs	r2, r3, #1
 800608e:	bf44      	itt	mi
 8006090:	f1c3 0801 	rsbmi	r8, r3, #1
 8006094:	2300      	movmi	r3, #0
 8006096:	9208      	str	r2, [sp, #32]
 8006098:	bf54      	ite	pl
 800609a:	f04f 0800 	movpl.w	r8, #0
 800609e:	9308      	strmi	r3, [sp, #32]
 80060a0:	2f00      	cmp	r7, #0
 80060a2:	db39      	blt.n	8006118 <_dtoa_r+0x218>
 80060a4:	9b08      	ldr	r3, [sp, #32]
 80060a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80060a8:	443b      	add	r3, r7
 80060aa:	9308      	str	r3, [sp, #32]
 80060ac:	2300      	movs	r3, #0
 80060ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80060b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060b2:	2b09      	cmp	r3, #9
 80060b4:	d864      	bhi.n	8006180 <_dtoa_r+0x280>
 80060b6:	2b05      	cmp	r3, #5
 80060b8:	bfc4      	itt	gt
 80060ba:	3b04      	subgt	r3, #4
 80060bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80060be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c0:	f1a3 0302 	sub.w	r3, r3, #2
 80060c4:	bfcc      	ite	gt
 80060c6:	2400      	movgt	r4, #0
 80060c8:	2401      	movle	r4, #1
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d863      	bhi.n	8006196 <_dtoa_r+0x296>
 80060ce:	e8df f003 	tbb	[pc, r3]
 80060d2:	372a      	.short	0x372a
 80060d4:	5535      	.short	0x5535
 80060d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80060da:	441e      	add	r6, r3
 80060dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	bfc1      	itttt	gt
 80060e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80060e8:	409f      	lslgt	r7, r3
 80060ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80060ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80060f2:	bfd6      	itet	le
 80060f4:	f1c3 0320 	rsble	r3, r3, #32
 80060f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80060fc:	fa04 f003 	lslle.w	r0, r4, r3
 8006100:	f7fa fa20 	bl	8000544 <__aeabi_ui2d>
 8006104:	2201      	movs	r2, #1
 8006106:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800610a:	3e01      	subs	r6, #1
 800610c:	9214      	str	r2, [sp, #80]	@ 0x50
 800610e:	e777      	b.n	8006000 <_dtoa_r+0x100>
 8006110:	2301      	movs	r3, #1
 8006112:	e7b8      	b.n	8006086 <_dtoa_r+0x186>
 8006114:	9012      	str	r0, [sp, #72]	@ 0x48
 8006116:	e7b7      	b.n	8006088 <_dtoa_r+0x188>
 8006118:	427b      	negs	r3, r7
 800611a:	930a      	str	r3, [sp, #40]	@ 0x28
 800611c:	2300      	movs	r3, #0
 800611e:	eba8 0807 	sub.w	r8, r8, r7
 8006122:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006124:	e7c4      	b.n	80060b0 <_dtoa_r+0x1b0>
 8006126:	2300      	movs	r3, #0
 8006128:	930b      	str	r3, [sp, #44]	@ 0x2c
 800612a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800612c:	2b00      	cmp	r3, #0
 800612e:	dc35      	bgt.n	800619c <_dtoa_r+0x29c>
 8006130:	2301      	movs	r3, #1
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	9307      	str	r3, [sp, #28]
 8006136:	461a      	mov	r2, r3
 8006138:	920e      	str	r2, [sp, #56]	@ 0x38
 800613a:	e00b      	b.n	8006154 <_dtoa_r+0x254>
 800613c:	2301      	movs	r3, #1
 800613e:	e7f3      	b.n	8006128 <_dtoa_r+0x228>
 8006140:	2300      	movs	r3, #0
 8006142:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006146:	18fb      	adds	r3, r7, r3
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	3301      	adds	r3, #1
 800614c:	2b01      	cmp	r3, #1
 800614e:	9307      	str	r3, [sp, #28]
 8006150:	bfb8      	it	lt
 8006152:	2301      	movlt	r3, #1
 8006154:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006158:	2100      	movs	r1, #0
 800615a:	2204      	movs	r2, #4
 800615c:	f102 0514 	add.w	r5, r2, #20
 8006160:	429d      	cmp	r5, r3
 8006162:	d91f      	bls.n	80061a4 <_dtoa_r+0x2a4>
 8006164:	6041      	str	r1, [r0, #4]
 8006166:	4658      	mov	r0, fp
 8006168:	f000 fd8e 	bl	8006c88 <_Balloc>
 800616c:	4682      	mov	sl, r0
 800616e:	2800      	cmp	r0, #0
 8006170:	d13c      	bne.n	80061ec <_dtoa_r+0x2ec>
 8006172:	4b1b      	ldr	r3, [pc, #108]	@ (80061e0 <_dtoa_r+0x2e0>)
 8006174:	4602      	mov	r2, r0
 8006176:	f240 11af 	movw	r1, #431	@ 0x1af
 800617a:	e6d8      	b.n	8005f2e <_dtoa_r+0x2e>
 800617c:	2301      	movs	r3, #1
 800617e:	e7e0      	b.n	8006142 <_dtoa_r+0x242>
 8006180:	2401      	movs	r4, #1
 8006182:	2300      	movs	r3, #0
 8006184:	9309      	str	r3, [sp, #36]	@ 0x24
 8006186:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006188:	f04f 33ff 	mov.w	r3, #4294967295
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	9307      	str	r3, [sp, #28]
 8006190:	2200      	movs	r2, #0
 8006192:	2312      	movs	r3, #18
 8006194:	e7d0      	b.n	8006138 <_dtoa_r+0x238>
 8006196:	2301      	movs	r3, #1
 8006198:	930b      	str	r3, [sp, #44]	@ 0x2c
 800619a:	e7f5      	b.n	8006188 <_dtoa_r+0x288>
 800619c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	9307      	str	r3, [sp, #28]
 80061a2:	e7d7      	b.n	8006154 <_dtoa_r+0x254>
 80061a4:	3101      	adds	r1, #1
 80061a6:	0052      	lsls	r2, r2, #1
 80061a8:	e7d8      	b.n	800615c <_dtoa_r+0x25c>
 80061aa:	bf00      	nop
 80061ac:	f3af 8000 	nop.w
 80061b0:	636f4361 	.word	0x636f4361
 80061b4:	3fd287a7 	.word	0x3fd287a7
 80061b8:	8b60c8b3 	.word	0x8b60c8b3
 80061bc:	3fc68a28 	.word	0x3fc68a28
 80061c0:	509f79fb 	.word	0x509f79fb
 80061c4:	3fd34413 	.word	0x3fd34413
 80061c8:	08007ba1 	.word	0x08007ba1
 80061cc:	08007bb8 	.word	0x08007bb8
 80061d0:	7ff00000 	.word	0x7ff00000
 80061d4:	08007b71 	.word	0x08007b71
 80061d8:	3ff80000 	.word	0x3ff80000
 80061dc:	08007cb0 	.word	0x08007cb0
 80061e0:	08007c10 	.word	0x08007c10
 80061e4:	08007b9d 	.word	0x08007b9d
 80061e8:	08007b70 	.word	0x08007b70
 80061ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061f0:	6018      	str	r0, [r3, #0]
 80061f2:	9b07      	ldr	r3, [sp, #28]
 80061f4:	2b0e      	cmp	r3, #14
 80061f6:	f200 80a4 	bhi.w	8006342 <_dtoa_r+0x442>
 80061fa:	2c00      	cmp	r4, #0
 80061fc:	f000 80a1 	beq.w	8006342 <_dtoa_r+0x442>
 8006200:	2f00      	cmp	r7, #0
 8006202:	dd33      	ble.n	800626c <_dtoa_r+0x36c>
 8006204:	4bad      	ldr	r3, [pc, #692]	@ (80064bc <_dtoa_r+0x5bc>)
 8006206:	f007 020f 	and.w	r2, r7, #15
 800620a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800620e:	ed93 7b00 	vldr	d7, [r3]
 8006212:	05f8      	lsls	r0, r7, #23
 8006214:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006218:	ea4f 1427 	mov.w	r4, r7, asr #4
 800621c:	d516      	bpl.n	800624c <_dtoa_r+0x34c>
 800621e:	4ba8      	ldr	r3, [pc, #672]	@ (80064c0 <_dtoa_r+0x5c0>)
 8006220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006224:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006228:	f7fa fb30 	bl	800088c <__aeabi_ddiv>
 800622c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006230:	f004 040f 	and.w	r4, r4, #15
 8006234:	2603      	movs	r6, #3
 8006236:	4da2      	ldr	r5, [pc, #648]	@ (80064c0 <_dtoa_r+0x5c0>)
 8006238:	b954      	cbnz	r4, 8006250 <_dtoa_r+0x350>
 800623a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800623e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006242:	f7fa fb23 	bl	800088c <__aeabi_ddiv>
 8006246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800624a:	e028      	b.n	800629e <_dtoa_r+0x39e>
 800624c:	2602      	movs	r6, #2
 800624e:	e7f2      	b.n	8006236 <_dtoa_r+0x336>
 8006250:	07e1      	lsls	r1, r4, #31
 8006252:	d508      	bpl.n	8006266 <_dtoa_r+0x366>
 8006254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006258:	e9d5 2300 	ldrd	r2, r3, [r5]
 800625c:	f7fa f9ec 	bl	8000638 <__aeabi_dmul>
 8006260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006264:	3601      	adds	r6, #1
 8006266:	1064      	asrs	r4, r4, #1
 8006268:	3508      	adds	r5, #8
 800626a:	e7e5      	b.n	8006238 <_dtoa_r+0x338>
 800626c:	f000 80d2 	beq.w	8006414 <_dtoa_r+0x514>
 8006270:	427c      	negs	r4, r7
 8006272:	4b92      	ldr	r3, [pc, #584]	@ (80064bc <_dtoa_r+0x5bc>)
 8006274:	4d92      	ldr	r5, [pc, #584]	@ (80064c0 <_dtoa_r+0x5c0>)
 8006276:	f004 020f 	and.w	r2, r4, #15
 800627a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006286:	f7fa f9d7 	bl	8000638 <__aeabi_dmul>
 800628a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800628e:	1124      	asrs	r4, r4, #4
 8006290:	2300      	movs	r3, #0
 8006292:	2602      	movs	r6, #2
 8006294:	2c00      	cmp	r4, #0
 8006296:	f040 80b2 	bne.w	80063fe <_dtoa_r+0x4fe>
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1d3      	bne.n	8006246 <_dtoa_r+0x346>
 800629e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80062a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 80b7 	beq.w	8006418 <_dtoa_r+0x518>
 80062aa:	4b86      	ldr	r3, [pc, #536]	@ (80064c4 <_dtoa_r+0x5c4>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	4620      	mov	r0, r4
 80062b0:	4629      	mov	r1, r5
 80062b2:	f7fa fc33 	bl	8000b1c <__aeabi_dcmplt>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	f000 80ae 	beq.w	8006418 <_dtoa_r+0x518>
 80062bc:	9b07      	ldr	r3, [sp, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80aa 	beq.w	8006418 <_dtoa_r+0x518>
 80062c4:	9b00      	ldr	r3, [sp, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	dd37      	ble.n	800633a <_dtoa_r+0x43a>
 80062ca:	1e7b      	subs	r3, r7, #1
 80062cc:	9304      	str	r3, [sp, #16]
 80062ce:	4620      	mov	r0, r4
 80062d0:	4b7d      	ldr	r3, [pc, #500]	@ (80064c8 <_dtoa_r+0x5c8>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	4629      	mov	r1, r5
 80062d6:	f7fa f9af 	bl	8000638 <__aeabi_dmul>
 80062da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062de:	9c00      	ldr	r4, [sp, #0]
 80062e0:	3601      	adds	r6, #1
 80062e2:	4630      	mov	r0, r6
 80062e4:	f7fa f93e 	bl	8000564 <__aeabi_i2d>
 80062e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062ec:	f7fa f9a4 	bl	8000638 <__aeabi_dmul>
 80062f0:	4b76      	ldr	r3, [pc, #472]	@ (80064cc <_dtoa_r+0x5cc>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	f7f9 ffea 	bl	80002cc <__adddf3>
 80062f8:	4605      	mov	r5, r0
 80062fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80062fe:	2c00      	cmp	r4, #0
 8006300:	f040 808d 	bne.w	800641e <_dtoa_r+0x51e>
 8006304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006308:	4b71      	ldr	r3, [pc, #452]	@ (80064d0 <_dtoa_r+0x5d0>)
 800630a:	2200      	movs	r2, #0
 800630c:	f7f9 ffdc 	bl	80002c8 <__aeabi_dsub>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006318:	462a      	mov	r2, r5
 800631a:	4633      	mov	r3, r6
 800631c:	f7fa fc1c 	bl	8000b58 <__aeabi_dcmpgt>
 8006320:	2800      	cmp	r0, #0
 8006322:	f040 828b 	bne.w	800683c <_dtoa_r+0x93c>
 8006326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800632a:	462a      	mov	r2, r5
 800632c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006330:	f7fa fbf4 	bl	8000b1c <__aeabi_dcmplt>
 8006334:	2800      	cmp	r0, #0
 8006336:	f040 8128 	bne.w	800658a <_dtoa_r+0x68a>
 800633a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800633e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006342:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006344:	2b00      	cmp	r3, #0
 8006346:	f2c0 815a 	blt.w	80065fe <_dtoa_r+0x6fe>
 800634a:	2f0e      	cmp	r7, #14
 800634c:	f300 8157 	bgt.w	80065fe <_dtoa_r+0x6fe>
 8006350:	4b5a      	ldr	r3, [pc, #360]	@ (80064bc <_dtoa_r+0x5bc>)
 8006352:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006356:	ed93 7b00 	vldr	d7, [r3]
 800635a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800635c:	2b00      	cmp	r3, #0
 800635e:	ed8d 7b00 	vstr	d7, [sp]
 8006362:	da03      	bge.n	800636c <_dtoa_r+0x46c>
 8006364:	9b07      	ldr	r3, [sp, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f340 8101 	ble.w	800656e <_dtoa_r+0x66e>
 800636c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006370:	4656      	mov	r6, sl
 8006372:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006376:	4620      	mov	r0, r4
 8006378:	4629      	mov	r1, r5
 800637a:	f7fa fa87 	bl	800088c <__aeabi_ddiv>
 800637e:	f7fa fc0b 	bl	8000b98 <__aeabi_d2iz>
 8006382:	4680      	mov	r8, r0
 8006384:	f7fa f8ee 	bl	8000564 <__aeabi_i2d>
 8006388:	e9dd 2300 	ldrd	r2, r3, [sp]
 800638c:	f7fa f954 	bl	8000638 <__aeabi_dmul>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4620      	mov	r0, r4
 8006396:	4629      	mov	r1, r5
 8006398:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800639c:	f7f9 ff94 	bl	80002c8 <__aeabi_dsub>
 80063a0:	f806 4b01 	strb.w	r4, [r6], #1
 80063a4:	9d07      	ldr	r5, [sp, #28]
 80063a6:	eba6 040a 	sub.w	r4, r6, sl
 80063aa:	42a5      	cmp	r5, r4
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	f040 8117 	bne.w	80065e2 <_dtoa_r+0x6e2>
 80063b4:	f7f9 ff8a 	bl	80002cc <__adddf3>
 80063b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063bc:	4604      	mov	r4, r0
 80063be:	460d      	mov	r5, r1
 80063c0:	f7fa fbca 	bl	8000b58 <__aeabi_dcmpgt>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f040 80f9 	bne.w	80065bc <_dtoa_r+0x6bc>
 80063ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063ce:	4620      	mov	r0, r4
 80063d0:	4629      	mov	r1, r5
 80063d2:	f7fa fb99 	bl	8000b08 <__aeabi_dcmpeq>
 80063d6:	b118      	cbz	r0, 80063e0 <_dtoa_r+0x4e0>
 80063d8:	f018 0f01 	tst.w	r8, #1
 80063dc:	f040 80ee 	bne.w	80065bc <_dtoa_r+0x6bc>
 80063e0:	4649      	mov	r1, r9
 80063e2:	4658      	mov	r0, fp
 80063e4:	f000 fc90 	bl	8006d08 <_Bfree>
 80063e8:	2300      	movs	r3, #0
 80063ea:	7033      	strb	r3, [r6, #0]
 80063ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063ee:	3701      	adds	r7, #1
 80063f0:	601f      	str	r7, [r3, #0]
 80063f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 831d 	beq.w	8006a34 <_dtoa_r+0xb34>
 80063fa:	601e      	str	r6, [r3, #0]
 80063fc:	e31a      	b.n	8006a34 <_dtoa_r+0xb34>
 80063fe:	07e2      	lsls	r2, r4, #31
 8006400:	d505      	bpl.n	800640e <_dtoa_r+0x50e>
 8006402:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006406:	f7fa f917 	bl	8000638 <__aeabi_dmul>
 800640a:	3601      	adds	r6, #1
 800640c:	2301      	movs	r3, #1
 800640e:	1064      	asrs	r4, r4, #1
 8006410:	3508      	adds	r5, #8
 8006412:	e73f      	b.n	8006294 <_dtoa_r+0x394>
 8006414:	2602      	movs	r6, #2
 8006416:	e742      	b.n	800629e <_dtoa_r+0x39e>
 8006418:	9c07      	ldr	r4, [sp, #28]
 800641a:	9704      	str	r7, [sp, #16]
 800641c:	e761      	b.n	80062e2 <_dtoa_r+0x3e2>
 800641e:	4b27      	ldr	r3, [pc, #156]	@ (80064bc <_dtoa_r+0x5bc>)
 8006420:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006422:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006426:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800642a:	4454      	add	r4, sl
 800642c:	2900      	cmp	r1, #0
 800642e:	d053      	beq.n	80064d8 <_dtoa_r+0x5d8>
 8006430:	4928      	ldr	r1, [pc, #160]	@ (80064d4 <_dtoa_r+0x5d4>)
 8006432:	2000      	movs	r0, #0
 8006434:	f7fa fa2a 	bl	800088c <__aeabi_ddiv>
 8006438:	4633      	mov	r3, r6
 800643a:	462a      	mov	r2, r5
 800643c:	f7f9 ff44 	bl	80002c8 <__aeabi_dsub>
 8006440:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006444:	4656      	mov	r6, sl
 8006446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800644a:	f7fa fba5 	bl	8000b98 <__aeabi_d2iz>
 800644e:	4605      	mov	r5, r0
 8006450:	f7fa f888 	bl	8000564 <__aeabi_i2d>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645c:	f7f9 ff34 	bl	80002c8 <__aeabi_dsub>
 8006460:	3530      	adds	r5, #48	@ 0x30
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800646a:	f806 5b01 	strb.w	r5, [r6], #1
 800646e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006472:	f7fa fb53 	bl	8000b1c <__aeabi_dcmplt>
 8006476:	2800      	cmp	r0, #0
 8006478:	d171      	bne.n	800655e <_dtoa_r+0x65e>
 800647a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800647e:	4911      	ldr	r1, [pc, #68]	@ (80064c4 <_dtoa_r+0x5c4>)
 8006480:	2000      	movs	r0, #0
 8006482:	f7f9 ff21 	bl	80002c8 <__aeabi_dsub>
 8006486:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800648a:	f7fa fb47 	bl	8000b1c <__aeabi_dcmplt>
 800648e:	2800      	cmp	r0, #0
 8006490:	f040 8095 	bne.w	80065be <_dtoa_r+0x6be>
 8006494:	42a6      	cmp	r6, r4
 8006496:	f43f af50 	beq.w	800633a <_dtoa_r+0x43a>
 800649a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800649e:	4b0a      	ldr	r3, [pc, #40]	@ (80064c8 <_dtoa_r+0x5c8>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	f7fa f8c9 	bl	8000638 <__aeabi_dmul>
 80064a6:	4b08      	ldr	r3, [pc, #32]	@ (80064c8 <_dtoa_r+0x5c8>)
 80064a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064ac:	2200      	movs	r2, #0
 80064ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b2:	f7fa f8c1 	bl	8000638 <__aeabi_dmul>
 80064b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ba:	e7c4      	b.n	8006446 <_dtoa_r+0x546>
 80064bc:	08007cb0 	.word	0x08007cb0
 80064c0:	08007c88 	.word	0x08007c88
 80064c4:	3ff00000 	.word	0x3ff00000
 80064c8:	40240000 	.word	0x40240000
 80064cc:	401c0000 	.word	0x401c0000
 80064d0:	40140000 	.word	0x40140000
 80064d4:	3fe00000 	.word	0x3fe00000
 80064d8:	4631      	mov	r1, r6
 80064da:	4628      	mov	r0, r5
 80064dc:	f7fa f8ac 	bl	8000638 <__aeabi_dmul>
 80064e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80064e6:	4656      	mov	r6, sl
 80064e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ec:	f7fa fb54 	bl	8000b98 <__aeabi_d2iz>
 80064f0:	4605      	mov	r5, r0
 80064f2:	f7fa f837 	bl	8000564 <__aeabi_i2d>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064fe:	f7f9 fee3 	bl	80002c8 <__aeabi_dsub>
 8006502:	3530      	adds	r5, #48	@ 0x30
 8006504:	f806 5b01 	strb.w	r5, [r6], #1
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	42a6      	cmp	r6, r4
 800650e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	d124      	bne.n	8006562 <_dtoa_r+0x662>
 8006518:	4bac      	ldr	r3, [pc, #688]	@ (80067cc <_dtoa_r+0x8cc>)
 800651a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800651e:	f7f9 fed5 	bl	80002cc <__adddf3>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800652a:	f7fa fb15 	bl	8000b58 <__aeabi_dcmpgt>
 800652e:	2800      	cmp	r0, #0
 8006530:	d145      	bne.n	80065be <_dtoa_r+0x6be>
 8006532:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006536:	49a5      	ldr	r1, [pc, #660]	@ (80067cc <_dtoa_r+0x8cc>)
 8006538:	2000      	movs	r0, #0
 800653a:	f7f9 fec5 	bl	80002c8 <__aeabi_dsub>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006546:	f7fa fae9 	bl	8000b1c <__aeabi_dcmplt>
 800654a:	2800      	cmp	r0, #0
 800654c:	f43f aef5 	beq.w	800633a <_dtoa_r+0x43a>
 8006550:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006552:	1e73      	subs	r3, r6, #1
 8006554:	9315      	str	r3, [sp, #84]	@ 0x54
 8006556:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800655a:	2b30      	cmp	r3, #48	@ 0x30
 800655c:	d0f8      	beq.n	8006550 <_dtoa_r+0x650>
 800655e:	9f04      	ldr	r7, [sp, #16]
 8006560:	e73e      	b.n	80063e0 <_dtoa_r+0x4e0>
 8006562:	4b9b      	ldr	r3, [pc, #620]	@ (80067d0 <_dtoa_r+0x8d0>)
 8006564:	f7fa f868 	bl	8000638 <__aeabi_dmul>
 8006568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800656c:	e7bc      	b.n	80064e8 <_dtoa_r+0x5e8>
 800656e:	d10c      	bne.n	800658a <_dtoa_r+0x68a>
 8006570:	4b98      	ldr	r3, [pc, #608]	@ (80067d4 <_dtoa_r+0x8d4>)
 8006572:	2200      	movs	r2, #0
 8006574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006578:	f7fa f85e 	bl	8000638 <__aeabi_dmul>
 800657c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006580:	f7fa fae0 	bl	8000b44 <__aeabi_dcmpge>
 8006584:	2800      	cmp	r0, #0
 8006586:	f000 8157 	beq.w	8006838 <_dtoa_r+0x938>
 800658a:	2400      	movs	r4, #0
 800658c:	4625      	mov	r5, r4
 800658e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006590:	43db      	mvns	r3, r3
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	4656      	mov	r6, sl
 8006596:	2700      	movs	r7, #0
 8006598:	4621      	mov	r1, r4
 800659a:	4658      	mov	r0, fp
 800659c:	f000 fbb4 	bl	8006d08 <_Bfree>
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	d0dc      	beq.n	800655e <_dtoa_r+0x65e>
 80065a4:	b12f      	cbz	r7, 80065b2 <_dtoa_r+0x6b2>
 80065a6:	42af      	cmp	r7, r5
 80065a8:	d003      	beq.n	80065b2 <_dtoa_r+0x6b2>
 80065aa:	4639      	mov	r1, r7
 80065ac:	4658      	mov	r0, fp
 80065ae:	f000 fbab 	bl	8006d08 <_Bfree>
 80065b2:	4629      	mov	r1, r5
 80065b4:	4658      	mov	r0, fp
 80065b6:	f000 fba7 	bl	8006d08 <_Bfree>
 80065ba:	e7d0      	b.n	800655e <_dtoa_r+0x65e>
 80065bc:	9704      	str	r7, [sp, #16]
 80065be:	4633      	mov	r3, r6
 80065c0:	461e      	mov	r6, r3
 80065c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065c6:	2a39      	cmp	r2, #57	@ 0x39
 80065c8:	d107      	bne.n	80065da <_dtoa_r+0x6da>
 80065ca:	459a      	cmp	sl, r3
 80065cc:	d1f8      	bne.n	80065c0 <_dtoa_r+0x6c0>
 80065ce:	9a04      	ldr	r2, [sp, #16]
 80065d0:	3201      	adds	r2, #1
 80065d2:	9204      	str	r2, [sp, #16]
 80065d4:	2230      	movs	r2, #48	@ 0x30
 80065d6:	f88a 2000 	strb.w	r2, [sl]
 80065da:	781a      	ldrb	r2, [r3, #0]
 80065dc:	3201      	adds	r2, #1
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	e7bd      	b.n	800655e <_dtoa_r+0x65e>
 80065e2:	4b7b      	ldr	r3, [pc, #492]	@ (80067d0 <_dtoa_r+0x8d0>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	f7fa f827 	bl	8000638 <__aeabi_dmul>
 80065ea:	2200      	movs	r2, #0
 80065ec:	2300      	movs	r3, #0
 80065ee:	4604      	mov	r4, r0
 80065f0:	460d      	mov	r5, r1
 80065f2:	f7fa fa89 	bl	8000b08 <__aeabi_dcmpeq>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	f43f aebb 	beq.w	8006372 <_dtoa_r+0x472>
 80065fc:	e6f0      	b.n	80063e0 <_dtoa_r+0x4e0>
 80065fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006600:	2a00      	cmp	r2, #0
 8006602:	f000 80db 	beq.w	80067bc <_dtoa_r+0x8bc>
 8006606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006608:	2a01      	cmp	r2, #1
 800660a:	f300 80bf 	bgt.w	800678c <_dtoa_r+0x88c>
 800660e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006610:	2a00      	cmp	r2, #0
 8006612:	f000 80b7 	beq.w	8006784 <_dtoa_r+0x884>
 8006616:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800661a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800661c:	4646      	mov	r6, r8
 800661e:	9a08      	ldr	r2, [sp, #32]
 8006620:	2101      	movs	r1, #1
 8006622:	441a      	add	r2, r3
 8006624:	4658      	mov	r0, fp
 8006626:	4498      	add	r8, r3
 8006628:	9208      	str	r2, [sp, #32]
 800662a:	f000 fc21 	bl	8006e70 <__i2b>
 800662e:	4605      	mov	r5, r0
 8006630:	b15e      	cbz	r6, 800664a <_dtoa_r+0x74a>
 8006632:	9b08      	ldr	r3, [sp, #32]
 8006634:	2b00      	cmp	r3, #0
 8006636:	dd08      	ble.n	800664a <_dtoa_r+0x74a>
 8006638:	42b3      	cmp	r3, r6
 800663a:	9a08      	ldr	r2, [sp, #32]
 800663c:	bfa8      	it	ge
 800663e:	4633      	movge	r3, r6
 8006640:	eba8 0803 	sub.w	r8, r8, r3
 8006644:	1af6      	subs	r6, r6, r3
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	9308      	str	r3, [sp, #32]
 800664a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800664c:	b1f3      	cbz	r3, 800668c <_dtoa_r+0x78c>
 800664e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 80b7 	beq.w	80067c4 <_dtoa_r+0x8c4>
 8006656:	b18c      	cbz	r4, 800667c <_dtoa_r+0x77c>
 8006658:	4629      	mov	r1, r5
 800665a:	4622      	mov	r2, r4
 800665c:	4658      	mov	r0, fp
 800665e:	f000 fcc7 	bl	8006ff0 <__pow5mult>
 8006662:	464a      	mov	r2, r9
 8006664:	4601      	mov	r1, r0
 8006666:	4605      	mov	r5, r0
 8006668:	4658      	mov	r0, fp
 800666a:	f000 fc17 	bl	8006e9c <__multiply>
 800666e:	4649      	mov	r1, r9
 8006670:	9004      	str	r0, [sp, #16]
 8006672:	4658      	mov	r0, fp
 8006674:	f000 fb48 	bl	8006d08 <_Bfree>
 8006678:	9b04      	ldr	r3, [sp, #16]
 800667a:	4699      	mov	r9, r3
 800667c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800667e:	1b1a      	subs	r2, r3, r4
 8006680:	d004      	beq.n	800668c <_dtoa_r+0x78c>
 8006682:	4649      	mov	r1, r9
 8006684:	4658      	mov	r0, fp
 8006686:	f000 fcb3 	bl	8006ff0 <__pow5mult>
 800668a:	4681      	mov	r9, r0
 800668c:	2101      	movs	r1, #1
 800668e:	4658      	mov	r0, fp
 8006690:	f000 fbee 	bl	8006e70 <__i2b>
 8006694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006696:	4604      	mov	r4, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 81cf 	beq.w	8006a3c <_dtoa_r+0xb3c>
 800669e:	461a      	mov	r2, r3
 80066a0:	4601      	mov	r1, r0
 80066a2:	4658      	mov	r0, fp
 80066a4:	f000 fca4 	bl	8006ff0 <__pow5mult>
 80066a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	4604      	mov	r4, r0
 80066ae:	f300 8095 	bgt.w	80067dc <_dtoa_r+0x8dc>
 80066b2:	9b02      	ldr	r3, [sp, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f040 8087 	bne.w	80067c8 <_dtoa_r+0x8c8>
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f040 8089 	bne.w	80067d8 <_dtoa_r+0x8d8>
 80066c6:	9b03      	ldr	r3, [sp, #12]
 80066c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066cc:	0d1b      	lsrs	r3, r3, #20
 80066ce:	051b      	lsls	r3, r3, #20
 80066d0:	b12b      	cbz	r3, 80066de <_dtoa_r+0x7de>
 80066d2:	9b08      	ldr	r3, [sp, #32]
 80066d4:	3301      	adds	r3, #1
 80066d6:	9308      	str	r3, [sp, #32]
 80066d8:	f108 0801 	add.w	r8, r8, #1
 80066dc:	2301      	movs	r3, #1
 80066de:	930a      	str	r3, [sp, #40]	@ 0x28
 80066e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 81b0 	beq.w	8006a48 <_dtoa_r+0xb48>
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066ee:	6918      	ldr	r0, [r3, #16]
 80066f0:	f000 fb72 	bl	8006dd8 <__hi0bits>
 80066f4:	f1c0 0020 	rsb	r0, r0, #32
 80066f8:	9b08      	ldr	r3, [sp, #32]
 80066fa:	4418      	add	r0, r3
 80066fc:	f010 001f 	ands.w	r0, r0, #31
 8006700:	d077      	beq.n	80067f2 <_dtoa_r+0x8f2>
 8006702:	f1c0 0320 	rsb	r3, r0, #32
 8006706:	2b04      	cmp	r3, #4
 8006708:	dd6b      	ble.n	80067e2 <_dtoa_r+0x8e2>
 800670a:	9b08      	ldr	r3, [sp, #32]
 800670c:	f1c0 001c 	rsb	r0, r0, #28
 8006710:	4403      	add	r3, r0
 8006712:	4480      	add	r8, r0
 8006714:	4406      	add	r6, r0
 8006716:	9308      	str	r3, [sp, #32]
 8006718:	f1b8 0f00 	cmp.w	r8, #0
 800671c:	dd05      	ble.n	800672a <_dtoa_r+0x82a>
 800671e:	4649      	mov	r1, r9
 8006720:	4642      	mov	r2, r8
 8006722:	4658      	mov	r0, fp
 8006724:	f000 fcbe 	bl	80070a4 <__lshift>
 8006728:	4681      	mov	r9, r0
 800672a:	9b08      	ldr	r3, [sp, #32]
 800672c:	2b00      	cmp	r3, #0
 800672e:	dd05      	ble.n	800673c <_dtoa_r+0x83c>
 8006730:	4621      	mov	r1, r4
 8006732:	461a      	mov	r2, r3
 8006734:	4658      	mov	r0, fp
 8006736:	f000 fcb5 	bl	80070a4 <__lshift>
 800673a:	4604      	mov	r4, r0
 800673c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800673e:	2b00      	cmp	r3, #0
 8006740:	d059      	beq.n	80067f6 <_dtoa_r+0x8f6>
 8006742:	4621      	mov	r1, r4
 8006744:	4648      	mov	r0, r9
 8006746:	f000 fd19 	bl	800717c <__mcmp>
 800674a:	2800      	cmp	r0, #0
 800674c:	da53      	bge.n	80067f6 <_dtoa_r+0x8f6>
 800674e:	1e7b      	subs	r3, r7, #1
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	4649      	mov	r1, r9
 8006754:	2300      	movs	r3, #0
 8006756:	220a      	movs	r2, #10
 8006758:	4658      	mov	r0, fp
 800675a:	f000 faf7 	bl	8006d4c <__multadd>
 800675e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006760:	4681      	mov	r9, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8172 	beq.w	8006a4c <_dtoa_r+0xb4c>
 8006768:	2300      	movs	r3, #0
 800676a:	4629      	mov	r1, r5
 800676c:	220a      	movs	r2, #10
 800676e:	4658      	mov	r0, fp
 8006770:	f000 faec 	bl	8006d4c <__multadd>
 8006774:	9b00      	ldr	r3, [sp, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	4605      	mov	r5, r0
 800677a:	dc67      	bgt.n	800684c <_dtoa_r+0x94c>
 800677c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800677e:	2b02      	cmp	r3, #2
 8006780:	dc41      	bgt.n	8006806 <_dtoa_r+0x906>
 8006782:	e063      	b.n	800684c <_dtoa_r+0x94c>
 8006784:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006786:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800678a:	e746      	b.n	800661a <_dtoa_r+0x71a>
 800678c:	9b07      	ldr	r3, [sp, #28]
 800678e:	1e5c      	subs	r4, r3, #1
 8006790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006792:	42a3      	cmp	r3, r4
 8006794:	bfbf      	itttt	lt
 8006796:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006798:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800679a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800679c:	1ae3      	sublt	r3, r4, r3
 800679e:	bfb4      	ite	lt
 80067a0:	18d2      	addlt	r2, r2, r3
 80067a2:	1b1c      	subge	r4, r3, r4
 80067a4:	9b07      	ldr	r3, [sp, #28]
 80067a6:	bfbc      	itt	lt
 80067a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80067aa:	2400      	movlt	r4, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bfb5      	itete	lt
 80067b0:	eba8 0603 	sublt.w	r6, r8, r3
 80067b4:	9b07      	ldrge	r3, [sp, #28]
 80067b6:	2300      	movlt	r3, #0
 80067b8:	4646      	movge	r6, r8
 80067ba:	e730      	b.n	800661e <_dtoa_r+0x71e>
 80067bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80067be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80067c0:	4646      	mov	r6, r8
 80067c2:	e735      	b.n	8006630 <_dtoa_r+0x730>
 80067c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067c6:	e75c      	b.n	8006682 <_dtoa_r+0x782>
 80067c8:	2300      	movs	r3, #0
 80067ca:	e788      	b.n	80066de <_dtoa_r+0x7de>
 80067cc:	3fe00000 	.word	0x3fe00000
 80067d0:	40240000 	.word	0x40240000
 80067d4:	40140000 	.word	0x40140000
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	e780      	b.n	80066de <_dtoa_r+0x7de>
 80067dc:	2300      	movs	r3, #0
 80067de:	930a      	str	r3, [sp, #40]	@ 0x28
 80067e0:	e782      	b.n	80066e8 <_dtoa_r+0x7e8>
 80067e2:	d099      	beq.n	8006718 <_dtoa_r+0x818>
 80067e4:	9a08      	ldr	r2, [sp, #32]
 80067e6:	331c      	adds	r3, #28
 80067e8:	441a      	add	r2, r3
 80067ea:	4498      	add	r8, r3
 80067ec:	441e      	add	r6, r3
 80067ee:	9208      	str	r2, [sp, #32]
 80067f0:	e792      	b.n	8006718 <_dtoa_r+0x818>
 80067f2:	4603      	mov	r3, r0
 80067f4:	e7f6      	b.n	80067e4 <_dtoa_r+0x8e4>
 80067f6:	9b07      	ldr	r3, [sp, #28]
 80067f8:	9704      	str	r7, [sp, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	dc20      	bgt.n	8006840 <_dtoa_r+0x940>
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006802:	2b02      	cmp	r3, #2
 8006804:	dd1e      	ble.n	8006844 <_dtoa_r+0x944>
 8006806:	9b00      	ldr	r3, [sp, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	f47f aec0 	bne.w	800658e <_dtoa_r+0x68e>
 800680e:	4621      	mov	r1, r4
 8006810:	2205      	movs	r2, #5
 8006812:	4658      	mov	r0, fp
 8006814:	f000 fa9a 	bl	8006d4c <__multadd>
 8006818:	4601      	mov	r1, r0
 800681a:	4604      	mov	r4, r0
 800681c:	4648      	mov	r0, r9
 800681e:	f000 fcad 	bl	800717c <__mcmp>
 8006822:	2800      	cmp	r0, #0
 8006824:	f77f aeb3 	ble.w	800658e <_dtoa_r+0x68e>
 8006828:	4656      	mov	r6, sl
 800682a:	2331      	movs	r3, #49	@ 0x31
 800682c:	f806 3b01 	strb.w	r3, [r6], #1
 8006830:	9b04      	ldr	r3, [sp, #16]
 8006832:	3301      	adds	r3, #1
 8006834:	9304      	str	r3, [sp, #16]
 8006836:	e6ae      	b.n	8006596 <_dtoa_r+0x696>
 8006838:	9c07      	ldr	r4, [sp, #28]
 800683a:	9704      	str	r7, [sp, #16]
 800683c:	4625      	mov	r5, r4
 800683e:	e7f3      	b.n	8006828 <_dtoa_r+0x928>
 8006840:	9b07      	ldr	r3, [sp, #28]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 8104 	beq.w	8006a54 <_dtoa_r+0xb54>
 800684c:	2e00      	cmp	r6, #0
 800684e:	dd05      	ble.n	800685c <_dtoa_r+0x95c>
 8006850:	4629      	mov	r1, r5
 8006852:	4632      	mov	r2, r6
 8006854:	4658      	mov	r0, fp
 8006856:	f000 fc25 	bl	80070a4 <__lshift>
 800685a:	4605      	mov	r5, r0
 800685c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800685e:	2b00      	cmp	r3, #0
 8006860:	d05a      	beq.n	8006918 <_dtoa_r+0xa18>
 8006862:	6869      	ldr	r1, [r5, #4]
 8006864:	4658      	mov	r0, fp
 8006866:	f000 fa0f 	bl	8006c88 <_Balloc>
 800686a:	4606      	mov	r6, r0
 800686c:	b928      	cbnz	r0, 800687a <_dtoa_r+0x97a>
 800686e:	4b84      	ldr	r3, [pc, #528]	@ (8006a80 <_dtoa_r+0xb80>)
 8006870:	4602      	mov	r2, r0
 8006872:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006876:	f7ff bb5a 	b.w	8005f2e <_dtoa_r+0x2e>
 800687a:	692a      	ldr	r2, [r5, #16]
 800687c:	3202      	adds	r2, #2
 800687e:	0092      	lsls	r2, r2, #2
 8006880:	f105 010c 	add.w	r1, r5, #12
 8006884:	300c      	adds	r0, #12
 8006886:	f000 fe3d 	bl	8007504 <memcpy>
 800688a:	2201      	movs	r2, #1
 800688c:	4631      	mov	r1, r6
 800688e:	4658      	mov	r0, fp
 8006890:	f000 fc08 	bl	80070a4 <__lshift>
 8006894:	f10a 0301 	add.w	r3, sl, #1
 8006898:	9307      	str	r3, [sp, #28]
 800689a:	9b00      	ldr	r3, [sp, #0]
 800689c:	4453      	add	r3, sl
 800689e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068a0:	9b02      	ldr	r3, [sp, #8]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	462f      	mov	r7, r5
 80068a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80068aa:	4605      	mov	r5, r0
 80068ac:	9b07      	ldr	r3, [sp, #28]
 80068ae:	4621      	mov	r1, r4
 80068b0:	3b01      	subs	r3, #1
 80068b2:	4648      	mov	r0, r9
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	f7ff fa98 	bl	8005dea <quorem>
 80068ba:	4639      	mov	r1, r7
 80068bc:	9002      	str	r0, [sp, #8]
 80068be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80068c2:	4648      	mov	r0, r9
 80068c4:	f000 fc5a 	bl	800717c <__mcmp>
 80068c8:	462a      	mov	r2, r5
 80068ca:	9008      	str	r0, [sp, #32]
 80068cc:	4621      	mov	r1, r4
 80068ce:	4658      	mov	r0, fp
 80068d0:	f000 fc70 	bl	80071b4 <__mdiff>
 80068d4:	68c2      	ldr	r2, [r0, #12]
 80068d6:	4606      	mov	r6, r0
 80068d8:	bb02      	cbnz	r2, 800691c <_dtoa_r+0xa1c>
 80068da:	4601      	mov	r1, r0
 80068dc:	4648      	mov	r0, r9
 80068de:	f000 fc4d 	bl	800717c <__mcmp>
 80068e2:	4602      	mov	r2, r0
 80068e4:	4631      	mov	r1, r6
 80068e6:	4658      	mov	r0, fp
 80068e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80068ea:	f000 fa0d 	bl	8006d08 <_Bfree>
 80068ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068f2:	9e07      	ldr	r6, [sp, #28]
 80068f4:	ea43 0102 	orr.w	r1, r3, r2
 80068f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068fa:	4319      	orrs	r1, r3
 80068fc:	d110      	bne.n	8006920 <_dtoa_r+0xa20>
 80068fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006902:	d029      	beq.n	8006958 <_dtoa_r+0xa58>
 8006904:	9b08      	ldr	r3, [sp, #32]
 8006906:	2b00      	cmp	r3, #0
 8006908:	dd02      	ble.n	8006910 <_dtoa_r+0xa10>
 800690a:	9b02      	ldr	r3, [sp, #8]
 800690c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006910:	9b00      	ldr	r3, [sp, #0]
 8006912:	f883 8000 	strb.w	r8, [r3]
 8006916:	e63f      	b.n	8006598 <_dtoa_r+0x698>
 8006918:	4628      	mov	r0, r5
 800691a:	e7bb      	b.n	8006894 <_dtoa_r+0x994>
 800691c:	2201      	movs	r2, #1
 800691e:	e7e1      	b.n	80068e4 <_dtoa_r+0x9e4>
 8006920:	9b08      	ldr	r3, [sp, #32]
 8006922:	2b00      	cmp	r3, #0
 8006924:	db04      	blt.n	8006930 <_dtoa_r+0xa30>
 8006926:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006928:	430b      	orrs	r3, r1
 800692a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800692c:	430b      	orrs	r3, r1
 800692e:	d120      	bne.n	8006972 <_dtoa_r+0xa72>
 8006930:	2a00      	cmp	r2, #0
 8006932:	dded      	ble.n	8006910 <_dtoa_r+0xa10>
 8006934:	4649      	mov	r1, r9
 8006936:	2201      	movs	r2, #1
 8006938:	4658      	mov	r0, fp
 800693a:	f000 fbb3 	bl	80070a4 <__lshift>
 800693e:	4621      	mov	r1, r4
 8006940:	4681      	mov	r9, r0
 8006942:	f000 fc1b 	bl	800717c <__mcmp>
 8006946:	2800      	cmp	r0, #0
 8006948:	dc03      	bgt.n	8006952 <_dtoa_r+0xa52>
 800694a:	d1e1      	bne.n	8006910 <_dtoa_r+0xa10>
 800694c:	f018 0f01 	tst.w	r8, #1
 8006950:	d0de      	beq.n	8006910 <_dtoa_r+0xa10>
 8006952:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006956:	d1d8      	bne.n	800690a <_dtoa_r+0xa0a>
 8006958:	9a00      	ldr	r2, [sp, #0]
 800695a:	2339      	movs	r3, #57	@ 0x39
 800695c:	7013      	strb	r3, [r2, #0]
 800695e:	4633      	mov	r3, r6
 8006960:	461e      	mov	r6, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006968:	2a39      	cmp	r2, #57	@ 0x39
 800696a:	d052      	beq.n	8006a12 <_dtoa_r+0xb12>
 800696c:	3201      	adds	r2, #1
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	e612      	b.n	8006598 <_dtoa_r+0x698>
 8006972:	2a00      	cmp	r2, #0
 8006974:	dd07      	ble.n	8006986 <_dtoa_r+0xa86>
 8006976:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800697a:	d0ed      	beq.n	8006958 <_dtoa_r+0xa58>
 800697c:	9a00      	ldr	r2, [sp, #0]
 800697e:	f108 0301 	add.w	r3, r8, #1
 8006982:	7013      	strb	r3, [r2, #0]
 8006984:	e608      	b.n	8006598 <_dtoa_r+0x698>
 8006986:	9b07      	ldr	r3, [sp, #28]
 8006988:	9a07      	ldr	r2, [sp, #28]
 800698a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800698e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006990:	4293      	cmp	r3, r2
 8006992:	d028      	beq.n	80069e6 <_dtoa_r+0xae6>
 8006994:	4649      	mov	r1, r9
 8006996:	2300      	movs	r3, #0
 8006998:	220a      	movs	r2, #10
 800699a:	4658      	mov	r0, fp
 800699c:	f000 f9d6 	bl	8006d4c <__multadd>
 80069a0:	42af      	cmp	r7, r5
 80069a2:	4681      	mov	r9, r0
 80069a4:	f04f 0300 	mov.w	r3, #0
 80069a8:	f04f 020a 	mov.w	r2, #10
 80069ac:	4639      	mov	r1, r7
 80069ae:	4658      	mov	r0, fp
 80069b0:	d107      	bne.n	80069c2 <_dtoa_r+0xac2>
 80069b2:	f000 f9cb 	bl	8006d4c <__multadd>
 80069b6:	4607      	mov	r7, r0
 80069b8:	4605      	mov	r5, r0
 80069ba:	9b07      	ldr	r3, [sp, #28]
 80069bc:	3301      	adds	r3, #1
 80069be:	9307      	str	r3, [sp, #28]
 80069c0:	e774      	b.n	80068ac <_dtoa_r+0x9ac>
 80069c2:	f000 f9c3 	bl	8006d4c <__multadd>
 80069c6:	4629      	mov	r1, r5
 80069c8:	4607      	mov	r7, r0
 80069ca:	2300      	movs	r3, #0
 80069cc:	220a      	movs	r2, #10
 80069ce:	4658      	mov	r0, fp
 80069d0:	f000 f9bc 	bl	8006d4c <__multadd>
 80069d4:	4605      	mov	r5, r0
 80069d6:	e7f0      	b.n	80069ba <_dtoa_r+0xaba>
 80069d8:	9b00      	ldr	r3, [sp, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bfcc      	ite	gt
 80069de:	461e      	movgt	r6, r3
 80069e0:	2601      	movle	r6, #1
 80069e2:	4456      	add	r6, sl
 80069e4:	2700      	movs	r7, #0
 80069e6:	4649      	mov	r1, r9
 80069e8:	2201      	movs	r2, #1
 80069ea:	4658      	mov	r0, fp
 80069ec:	f000 fb5a 	bl	80070a4 <__lshift>
 80069f0:	4621      	mov	r1, r4
 80069f2:	4681      	mov	r9, r0
 80069f4:	f000 fbc2 	bl	800717c <__mcmp>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	dcb0      	bgt.n	800695e <_dtoa_r+0xa5e>
 80069fc:	d102      	bne.n	8006a04 <_dtoa_r+0xb04>
 80069fe:	f018 0f01 	tst.w	r8, #1
 8006a02:	d1ac      	bne.n	800695e <_dtoa_r+0xa5e>
 8006a04:	4633      	mov	r3, r6
 8006a06:	461e      	mov	r6, r3
 8006a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a0c:	2a30      	cmp	r2, #48	@ 0x30
 8006a0e:	d0fa      	beq.n	8006a06 <_dtoa_r+0xb06>
 8006a10:	e5c2      	b.n	8006598 <_dtoa_r+0x698>
 8006a12:	459a      	cmp	sl, r3
 8006a14:	d1a4      	bne.n	8006960 <_dtoa_r+0xa60>
 8006a16:	9b04      	ldr	r3, [sp, #16]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	9304      	str	r3, [sp, #16]
 8006a1c:	2331      	movs	r3, #49	@ 0x31
 8006a1e:	f88a 3000 	strb.w	r3, [sl]
 8006a22:	e5b9      	b.n	8006598 <_dtoa_r+0x698>
 8006a24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006a84 <_dtoa_r+0xb84>
 8006a2a:	b11b      	cbz	r3, 8006a34 <_dtoa_r+0xb34>
 8006a2c:	f10a 0308 	add.w	r3, sl, #8
 8006a30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	4650      	mov	r0, sl
 8006a36:	b019      	add	sp, #100	@ 0x64
 8006a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	f77f ae37 	ble.w	80066b2 <_dtoa_r+0x7b2>
 8006a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a48:	2001      	movs	r0, #1
 8006a4a:	e655      	b.n	80066f8 <_dtoa_r+0x7f8>
 8006a4c:	9b00      	ldr	r3, [sp, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f77f aed6 	ble.w	8006800 <_dtoa_r+0x900>
 8006a54:	4656      	mov	r6, sl
 8006a56:	4621      	mov	r1, r4
 8006a58:	4648      	mov	r0, r9
 8006a5a:	f7ff f9c6 	bl	8005dea <quorem>
 8006a5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a62:	f806 8b01 	strb.w	r8, [r6], #1
 8006a66:	9b00      	ldr	r3, [sp, #0]
 8006a68:	eba6 020a 	sub.w	r2, r6, sl
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	ddb3      	ble.n	80069d8 <_dtoa_r+0xad8>
 8006a70:	4649      	mov	r1, r9
 8006a72:	2300      	movs	r3, #0
 8006a74:	220a      	movs	r2, #10
 8006a76:	4658      	mov	r0, fp
 8006a78:	f000 f968 	bl	8006d4c <__multadd>
 8006a7c:	4681      	mov	r9, r0
 8006a7e:	e7ea      	b.n	8006a56 <_dtoa_r+0xb56>
 8006a80:	08007c10 	.word	0x08007c10
 8006a84:	08007b94 	.word	0x08007b94

08006a88 <_free_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	d041      	beq.n	8006b14 <_free_r+0x8c>
 8006a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a94:	1f0c      	subs	r4, r1, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bfb8      	it	lt
 8006a9a:	18e4      	addlt	r4, r4, r3
 8006a9c:	f000 f8e8 	bl	8006c70 <__malloc_lock>
 8006aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b18 <_free_r+0x90>)
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	b933      	cbnz	r3, 8006ab4 <_free_r+0x2c>
 8006aa6:	6063      	str	r3, [r4, #4]
 8006aa8:	6014      	str	r4, [r2, #0]
 8006aaa:	4628      	mov	r0, r5
 8006aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ab0:	f000 b8e4 	b.w	8006c7c <__malloc_unlock>
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	d908      	bls.n	8006aca <_free_r+0x42>
 8006ab8:	6820      	ldr	r0, [r4, #0]
 8006aba:	1821      	adds	r1, r4, r0
 8006abc:	428b      	cmp	r3, r1
 8006abe:	bf01      	itttt	eq
 8006ac0:	6819      	ldreq	r1, [r3, #0]
 8006ac2:	685b      	ldreq	r3, [r3, #4]
 8006ac4:	1809      	addeq	r1, r1, r0
 8006ac6:	6021      	streq	r1, [r4, #0]
 8006ac8:	e7ed      	b.n	8006aa6 <_free_r+0x1e>
 8006aca:	461a      	mov	r2, r3
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	b10b      	cbz	r3, 8006ad4 <_free_r+0x4c>
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	d9fa      	bls.n	8006aca <_free_r+0x42>
 8006ad4:	6811      	ldr	r1, [r2, #0]
 8006ad6:	1850      	adds	r0, r2, r1
 8006ad8:	42a0      	cmp	r0, r4
 8006ada:	d10b      	bne.n	8006af4 <_free_r+0x6c>
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	4401      	add	r1, r0
 8006ae0:	1850      	adds	r0, r2, r1
 8006ae2:	4283      	cmp	r3, r0
 8006ae4:	6011      	str	r1, [r2, #0]
 8006ae6:	d1e0      	bne.n	8006aaa <_free_r+0x22>
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	6053      	str	r3, [r2, #4]
 8006aee:	4408      	add	r0, r1
 8006af0:	6010      	str	r0, [r2, #0]
 8006af2:	e7da      	b.n	8006aaa <_free_r+0x22>
 8006af4:	d902      	bls.n	8006afc <_free_r+0x74>
 8006af6:	230c      	movs	r3, #12
 8006af8:	602b      	str	r3, [r5, #0]
 8006afa:	e7d6      	b.n	8006aaa <_free_r+0x22>
 8006afc:	6820      	ldr	r0, [r4, #0]
 8006afe:	1821      	adds	r1, r4, r0
 8006b00:	428b      	cmp	r3, r1
 8006b02:	bf04      	itt	eq
 8006b04:	6819      	ldreq	r1, [r3, #0]
 8006b06:	685b      	ldreq	r3, [r3, #4]
 8006b08:	6063      	str	r3, [r4, #4]
 8006b0a:	bf04      	itt	eq
 8006b0c:	1809      	addeq	r1, r1, r0
 8006b0e:	6021      	streq	r1, [r4, #0]
 8006b10:	6054      	str	r4, [r2, #4]
 8006b12:	e7ca      	b.n	8006aaa <_free_r+0x22>
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
 8006b16:	bf00      	nop
 8006b18:	20000484 	.word	0x20000484

08006b1c <malloc>:
 8006b1c:	4b02      	ldr	r3, [pc, #8]	@ (8006b28 <malloc+0xc>)
 8006b1e:	4601      	mov	r1, r0
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	f000 b825 	b.w	8006b70 <_malloc_r>
 8006b26:	bf00      	nop
 8006b28:	20000020 	.word	0x20000020

08006b2c <sbrk_aligned>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	4e0f      	ldr	r6, [pc, #60]	@ (8006b6c <sbrk_aligned+0x40>)
 8006b30:	460c      	mov	r4, r1
 8006b32:	6831      	ldr	r1, [r6, #0]
 8006b34:	4605      	mov	r5, r0
 8006b36:	b911      	cbnz	r1, 8006b3e <sbrk_aligned+0x12>
 8006b38:	f000 fcd4 	bl	80074e4 <_sbrk_r>
 8006b3c:	6030      	str	r0, [r6, #0]
 8006b3e:	4621      	mov	r1, r4
 8006b40:	4628      	mov	r0, r5
 8006b42:	f000 fccf 	bl	80074e4 <_sbrk_r>
 8006b46:	1c43      	adds	r3, r0, #1
 8006b48:	d103      	bne.n	8006b52 <sbrk_aligned+0x26>
 8006b4a:	f04f 34ff 	mov.w	r4, #4294967295
 8006b4e:	4620      	mov	r0, r4
 8006b50:	bd70      	pop	{r4, r5, r6, pc}
 8006b52:	1cc4      	adds	r4, r0, #3
 8006b54:	f024 0403 	bic.w	r4, r4, #3
 8006b58:	42a0      	cmp	r0, r4
 8006b5a:	d0f8      	beq.n	8006b4e <sbrk_aligned+0x22>
 8006b5c:	1a21      	subs	r1, r4, r0
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 fcc0 	bl	80074e4 <_sbrk_r>
 8006b64:	3001      	adds	r0, #1
 8006b66:	d1f2      	bne.n	8006b4e <sbrk_aligned+0x22>
 8006b68:	e7ef      	b.n	8006b4a <sbrk_aligned+0x1e>
 8006b6a:	bf00      	nop
 8006b6c:	20000480 	.word	0x20000480

08006b70 <_malloc_r>:
 8006b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b74:	1ccd      	adds	r5, r1, #3
 8006b76:	f025 0503 	bic.w	r5, r5, #3
 8006b7a:	3508      	adds	r5, #8
 8006b7c:	2d0c      	cmp	r5, #12
 8006b7e:	bf38      	it	cc
 8006b80:	250c      	movcc	r5, #12
 8006b82:	2d00      	cmp	r5, #0
 8006b84:	4606      	mov	r6, r0
 8006b86:	db01      	blt.n	8006b8c <_malloc_r+0x1c>
 8006b88:	42a9      	cmp	r1, r5
 8006b8a:	d904      	bls.n	8006b96 <_malloc_r+0x26>
 8006b8c:	230c      	movs	r3, #12
 8006b8e:	6033      	str	r3, [r6, #0]
 8006b90:	2000      	movs	r0, #0
 8006b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c6c <_malloc_r+0xfc>
 8006b9a:	f000 f869 	bl	8006c70 <__malloc_lock>
 8006b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba2:	461c      	mov	r4, r3
 8006ba4:	bb44      	cbnz	r4, 8006bf8 <_malloc_r+0x88>
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f7ff ffbf 	bl	8006b2c <sbrk_aligned>
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	d158      	bne.n	8006c66 <_malloc_r+0xf6>
 8006bb4:	f8d8 4000 	ldr.w	r4, [r8]
 8006bb8:	4627      	mov	r7, r4
 8006bba:	2f00      	cmp	r7, #0
 8006bbc:	d143      	bne.n	8006c46 <_malloc_r+0xd6>
 8006bbe:	2c00      	cmp	r4, #0
 8006bc0:	d04b      	beq.n	8006c5a <_malloc_r+0xea>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	eb04 0903 	add.w	r9, r4, r3
 8006bcc:	f000 fc8a 	bl	80074e4 <_sbrk_r>
 8006bd0:	4581      	cmp	r9, r0
 8006bd2:	d142      	bne.n	8006c5a <_malloc_r+0xea>
 8006bd4:	6821      	ldr	r1, [r4, #0]
 8006bd6:	1a6d      	subs	r5, r5, r1
 8006bd8:	4629      	mov	r1, r5
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f7ff ffa6 	bl	8006b2c <sbrk_aligned>
 8006be0:	3001      	adds	r0, #1
 8006be2:	d03a      	beq.n	8006c5a <_malloc_r+0xea>
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	442b      	add	r3, r5
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	f8d8 3000 	ldr.w	r3, [r8]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	bb62      	cbnz	r2, 8006c4c <_malloc_r+0xdc>
 8006bf2:	f8c8 7000 	str.w	r7, [r8]
 8006bf6:	e00f      	b.n	8006c18 <_malloc_r+0xa8>
 8006bf8:	6822      	ldr	r2, [r4, #0]
 8006bfa:	1b52      	subs	r2, r2, r5
 8006bfc:	d420      	bmi.n	8006c40 <_malloc_r+0xd0>
 8006bfe:	2a0b      	cmp	r2, #11
 8006c00:	d917      	bls.n	8006c32 <_malloc_r+0xc2>
 8006c02:	1961      	adds	r1, r4, r5
 8006c04:	42a3      	cmp	r3, r4
 8006c06:	6025      	str	r5, [r4, #0]
 8006c08:	bf18      	it	ne
 8006c0a:	6059      	strne	r1, [r3, #4]
 8006c0c:	6863      	ldr	r3, [r4, #4]
 8006c0e:	bf08      	it	eq
 8006c10:	f8c8 1000 	streq.w	r1, [r8]
 8006c14:	5162      	str	r2, [r4, r5]
 8006c16:	604b      	str	r3, [r1, #4]
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f000 f82f 	bl	8006c7c <__malloc_unlock>
 8006c1e:	f104 000b 	add.w	r0, r4, #11
 8006c22:	1d23      	adds	r3, r4, #4
 8006c24:	f020 0007 	bic.w	r0, r0, #7
 8006c28:	1ac2      	subs	r2, r0, r3
 8006c2a:	bf1c      	itt	ne
 8006c2c:	1a1b      	subne	r3, r3, r0
 8006c2e:	50a3      	strne	r3, [r4, r2]
 8006c30:	e7af      	b.n	8006b92 <_malloc_r+0x22>
 8006c32:	6862      	ldr	r2, [r4, #4]
 8006c34:	42a3      	cmp	r3, r4
 8006c36:	bf0c      	ite	eq
 8006c38:	f8c8 2000 	streq.w	r2, [r8]
 8006c3c:	605a      	strne	r2, [r3, #4]
 8006c3e:	e7eb      	b.n	8006c18 <_malloc_r+0xa8>
 8006c40:	4623      	mov	r3, r4
 8006c42:	6864      	ldr	r4, [r4, #4]
 8006c44:	e7ae      	b.n	8006ba4 <_malloc_r+0x34>
 8006c46:	463c      	mov	r4, r7
 8006c48:	687f      	ldr	r7, [r7, #4]
 8006c4a:	e7b6      	b.n	8006bba <_malloc_r+0x4a>
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	42a3      	cmp	r3, r4
 8006c52:	d1fb      	bne.n	8006c4c <_malloc_r+0xdc>
 8006c54:	2300      	movs	r3, #0
 8006c56:	6053      	str	r3, [r2, #4]
 8006c58:	e7de      	b.n	8006c18 <_malloc_r+0xa8>
 8006c5a:	230c      	movs	r3, #12
 8006c5c:	6033      	str	r3, [r6, #0]
 8006c5e:	4630      	mov	r0, r6
 8006c60:	f000 f80c 	bl	8006c7c <__malloc_unlock>
 8006c64:	e794      	b.n	8006b90 <_malloc_r+0x20>
 8006c66:	6005      	str	r5, [r0, #0]
 8006c68:	e7d6      	b.n	8006c18 <_malloc_r+0xa8>
 8006c6a:	bf00      	nop
 8006c6c:	20000484 	.word	0x20000484

08006c70 <__malloc_lock>:
 8006c70:	4801      	ldr	r0, [pc, #4]	@ (8006c78 <__malloc_lock+0x8>)
 8006c72:	f7ff b8b8 	b.w	8005de6 <__retarget_lock_acquire_recursive>
 8006c76:	bf00      	nop
 8006c78:	2000047c 	.word	0x2000047c

08006c7c <__malloc_unlock>:
 8006c7c:	4801      	ldr	r0, [pc, #4]	@ (8006c84 <__malloc_unlock+0x8>)
 8006c7e:	f7ff b8b3 	b.w	8005de8 <__retarget_lock_release_recursive>
 8006c82:	bf00      	nop
 8006c84:	2000047c 	.word	0x2000047c

08006c88 <_Balloc>:
 8006c88:	b570      	push	{r4, r5, r6, lr}
 8006c8a:	69c6      	ldr	r6, [r0, #28]
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	460d      	mov	r5, r1
 8006c90:	b976      	cbnz	r6, 8006cb0 <_Balloc+0x28>
 8006c92:	2010      	movs	r0, #16
 8006c94:	f7ff ff42 	bl	8006b1c <malloc>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	61e0      	str	r0, [r4, #28]
 8006c9c:	b920      	cbnz	r0, 8006ca8 <_Balloc+0x20>
 8006c9e:	4b18      	ldr	r3, [pc, #96]	@ (8006d00 <_Balloc+0x78>)
 8006ca0:	4818      	ldr	r0, [pc, #96]	@ (8006d04 <_Balloc+0x7c>)
 8006ca2:	216b      	movs	r1, #107	@ 0x6b
 8006ca4:	f000 fc3c 	bl	8007520 <__assert_func>
 8006ca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cac:	6006      	str	r6, [r0, #0]
 8006cae:	60c6      	str	r6, [r0, #12]
 8006cb0:	69e6      	ldr	r6, [r4, #28]
 8006cb2:	68f3      	ldr	r3, [r6, #12]
 8006cb4:	b183      	cbz	r3, 8006cd8 <_Balloc+0x50>
 8006cb6:	69e3      	ldr	r3, [r4, #28]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cbe:	b9b8      	cbnz	r0, 8006cf0 <_Balloc+0x68>
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	fa01 f605 	lsl.w	r6, r1, r5
 8006cc6:	1d72      	adds	r2, r6, #5
 8006cc8:	0092      	lsls	r2, r2, #2
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 fc46 	bl	800755c <_calloc_r>
 8006cd0:	b160      	cbz	r0, 8006cec <_Balloc+0x64>
 8006cd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cd6:	e00e      	b.n	8006cf6 <_Balloc+0x6e>
 8006cd8:	2221      	movs	r2, #33	@ 0x21
 8006cda:	2104      	movs	r1, #4
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f000 fc3d 	bl	800755c <_calloc_r>
 8006ce2:	69e3      	ldr	r3, [r4, #28]
 8006ce4:	60f0      	str	r0, [r6, #12]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e4      	bne.n	8006cb6 <_Balloc+0x2e>
 8006cec:	2000      	movs	r0, #0
 8006cee:	bd70      	pop	{r4, r5, r6, pc}
 8006cf0:	6802      	ldr	r2, [r0, #0]
 8006cf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cfc:	e7f7      	b.n	8006cee <_Balloc+0x66>
 8006cfe:	bf00      	nop
 8006d00:	08007ba1 	.word	0x08007ba1
 8006d04:	08007c21 	.word	0x08007c21

08006d08 <_Bfree>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	69c6      	ldr	r6, [r0, #28]
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	460c      	mov	r4, r1
 8006d10:	b976      	cbnz	r6, 8006d30 <_Bfree+0x28>
 8006d12:	2010      	movs	r0, #16
 8006d14:	f7ff ff02 	bl	8006b1c <malloc>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	61e8      	str	r0, [r5, #28]
 8006d1c:	b920      	cbnz	r0, 8006d28 <_Bfree+0x20>
 8006d1e:	4b09      	ldr	r3, [pc, #36]	@ (8006d44 <_Bfree+0x3c>)
 8006d20:	4809      	ldr	r0, [pc, #36]	@ (8006d48 <_Bfree+0x40>)
 8006d22:	218f      	movs	r1, #143	@ 0x8f
 8006d24:	f000 fbfc 	bl	8007520 <__assert_func>
 8006d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d2c:	6006      	str	r6, [r0, #0]
 8006d2e:	60c6      	str	r6, [r0, #12]
 8006d30:	b13c      	cbz	r4, 8006d42 <_Bfree+0x3a>
 8006d32:	69eb      	ldr	r3, [r5, #28]
 8006d34:	6862      	ldr	r2, [r4, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d3c:	6021      	str	r1, [r4, #0]
 8006d3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	08007ba1 	.word	0x08007ba1
 8006d48:	08007c21 	.word	0x08007c21

08006d4c <__multadd>:
 8006d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d50:	690d      	ldr	r5, [r1, #16]
 8006d52:	4607      	mov	r7, r0
 8006d54:	460c      	mov	r4, r1
 8006d56:	461e      	mov	r6, r3
 8006d58:	f101 0c14 	add.w	ip, r1, #20
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	f8dc 3000 	ldr.w	r3, [ip]
 8006d62:	b299      	uxth	r1, r3
 8006d64:	fb02 6101 	mla	r1, r2, r1, r6
 8006d68:	0c1e      	lsrs	r6, r3, #16
 8006d6a:	0c0b      	lsrs	r3, r1, #16
 8006d6c:	fb02 3306 	mla	r3, r2, r6, r3
 8006d70:	b289      	uxth	r1, r1
 8006d72:	3001      	adds	r0, #1
 8006d74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d78:	4285      	cmp	r5, r0
 8006d7a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d82:	dcec      	bgt.n	8006d5e <__multadd+0x12>
 8006d84:	b30e      	cbz	r6, 8006dca <__multadd+0x7e>
 8006d86:	68a3      	ldr	r3, [r4, #8]
 8006d88:	42ab      	cmp	r3, r5
 8006d8a:	dc19      	bgt.n	8006dc0 <__multadd+0x74>
 8006d8c:	6861      	ldr	r1, [r4, #4]
 8006d8e:	4638      	mov	r0, r7
 8006d90:	3101      	adds	r1, #1
 8006d92:	f7ff ff79 	bl	8006c88 <_Balloc>
 8006d96:	4680      	mov	r8, r0
 8006d98:	b928      	cbnz	r0, 8006da6 <__multadd+0x5a>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd0 <__multadd+0x84>)
 8006d9e:	480d      	ldr	r0, [pc, #52]	@ (8006dd4 <__multadd+0x88>)
 8006da0:	21ba      	movs	r1, #186	@ 0xba
 8006da2:	f000 fbbd 	bl	8007520 <__assert_func>
 8006da6:	6922      	ldr	r2, [r4, #16]
 8006da8:	3202      	adds	r2, #2
 8006daa:	f104 010c 	add.w	r1, r4, #12
 8006dae:	0092      	lsls	r2, r2, #2
 8006db0:	300c      	adds	r0, #12
 8006db2:	f000 fba7 	bl	8007504 <memcpy>
 8006db6:	4621      	mov	r1, r4
 8006db8:	4638      	mov	r0, r7
 8006dba:	f7ff ffa5 	bl	8006d08 <_Bfree>
 8006dbe:	4644      	mov	r4, r8
 8006dc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dc4:	3501      	adds	r5, #1
 8006dc6:	615e      	str	r6, [r3, #20]
 8006dc8:	6125      	str	r5, [r4, #16]
 8006dca:	4620      	mov	r0, r4
 8006dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd0:	08007c10 	.word	0x08007c10
 8006dd4:	08007c21 	.word	0x08007c21

08006dd8 <__hi0bits>:
 8006dd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006ddc:	4603      	mov	r3, r0
 8006dde:	bf36      	itet	cc
 8006de0:	0403      	lslcc	r3, r0, #16
 8006de2:	2000      	movcs	r0, #0
 8006de4:	2010      	movcc	r0, #16
 8006de6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dea:	bf3c      	itt	cc
 8006dec:	021b      	lslcc	r3, r3, #8
 8006dee:	3008      	addcc	r0, #8
 8006df0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006df4:	bf3c      	itt	cc
 8006df6:	011b      	lslcc	r3, r3, #4
 8006df8:	3004      	addcc	r0, #4
 8006dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dfe:	bf3c      	itt	cc
 8006e00:	009b      	lslcc	r3, r3, #2
 8006e02:	3002      	addcc	r0, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	db05      	blt.n	8006e14 <__hi0bits+0x3c>
 8006e08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e0c:	f100 0001 	add.w	r0, r0, #1
 8006e10:	bf08      	it	eq
 8006e12:	2020      	moveq	r0, #32
 8006e14:	4770      	bx	lr

08006e16 <__lo0bits>:
 8006e16:	6803      	ldr	r3, [r0, #0]
 8006e18:	4602      	mov	r2, r0
 8006e1a:	f013 0007 	ands.w	r0, r3, #7
 8006e1e:	d00b      	beq.n	8006e38 <__lo0bits+0x22>
 8006e20:	07d9      	lsls	r1, r3, #31
 8006e22:	d421      	bmi.n	8006e68 <__lo0bits+0x52>
 8006e24:	0798      	lsls	r0, r3, #30
 8006e26:	bf49      	itett	mi
 8006e28:	085b      	lsrmi	r3, r3, #1
 8006e2a:	089b      	lsrpl	r3, r3, #2
 8006e2c:	2001      	movmi	r0, #1
 8006e2e:	6013      	strmi	r3, [r2, #0]
 8006e30:	bf5c      	itt	pl
 8006e32:	6013      	strpl	r3, [r2, #0]
 8006e34:	2002      	movpl	r0, #2
 8006e36:	4770      	bx	lr
 8006e38:	b299      	uxth	r1, r3
 8006e3a:	b909      	cbnz	r1, 8006e40 <__lo0bits+0x2a>
 8006e3c:	0c1b      	lsrs	r3, r3, #16
 8006e3e:	2010      	movs	r0, #16
 8006e40:	b2d9      	uxtb	r1, r3
 8006e42:	b909      	cbnz	r1, 8006e48 <__lo0bits+0x32>
 8006e44:	3008      	adds	r0, #8
 8006e46:	0a1b      	lsrs	r3, r3, #8
 8006e48:	0719      	lsls	r1, r3, #28
 8006e4a:	bf04      	itt	eq
 8006e4c:	091b      	lsreq	r3, r3, #4
 8006e4e:	3004      	addeq	r0, #4
 8006e50:	0799      	lsls	r1, r3, #30
 8006e52:	bf04      	itt	eq
 8006e54:	089b      	lsreq	r3, r3, #2
 8006e56:	3002      	addeq	r0, #2
 8006e58:	07d9      	lsls	r1, r3, #31
 8006e5a:	d403      	bmi.n	8006e64 <__lo0bits+0x4e>
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	f100 0001 	add.w	r0, r0, #1
 8006e62:	d003      	beq.n	8006e6c <__lo0bits+0x56>
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	4770      	bx	lr
 8006e68:	2000      	movs	r0, #0
 8006e6a:	4770      	bx	lr
 8006e6c:	2020      	movs	r0, #32
 8006e6e:	4770      	bx	lr

08006e70 <__i2b>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	460c      	mov	r4, r1
 8006e74:	2101      	movs	r1, #1
 8006e76:	f7ff ff07 	bl	8006c88 <_Balloc>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	b928      	cbnz	r0, 8006e8a <__i2b+0x1a>
 8006e7e:	4b05      	ldr	r3, [pc, #20]	@ (8006e94 <__i2b+0x24>)
 8006e80:	4805      	ldr	r0, [pc, #20]	@ (8006e98 <__i2b+0x28>)
 8006e82:	f240 1145 	movw	r1, #325	@ 0x145
 8006e86:	f000 fb4b 	bl	8007520 <__assert_func>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	6144      	str	r4, [r0, #20]
 8006e8e:	6103      	str	r3, [r0, #16]
 8006e90:	bd10      	pop	{r4, pc}
 8006e92:	bf00      	nop
 8006e94:	08007c10 	.word	0x08007c10
 8006e98:	08007c21 	.word	0x08007c21

08006e9c <__multiply>:
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	690a      	ldr	r2, [r1, #16]
 8006ea4:	6923      	ldr	r3, [r4, #16]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	bfa8      	it	ge
 8006eaa:	4623      	movge	r3, r4
 8006eac:	460f      	mov	r7, r1
 8006eae:	bfa4      	itt	ge
 8006eb0:	460c      	movge	r4, r1
 8006eb2:	461f      	movge	r7, r3
 8006eb4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006eb8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006ebc:	68a3      	ldr	r3, [r4, #8]
 8006ebe:	6861      	ldr	r1, [r4, #4]
 8006ec0:	eb0a 0609 	add.w	r6, sl, r9
 8006ec4:	42b3      	cmp	r3, r6
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	bfb8      	it	lt
 8006eca:	3101      	addlt	r1, #1
 8006ecc:	f7ff fedc 	bl	8006c88 <_Balloc>
 8006ed0:	b930      	cbnz	r0, 8006ee0 <__multiply+0x44>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4b44      	ldr	r3, [pc, #272]	@ (8006fe8 <__multiply+0x14c>)
 8006ed6:	4845      	ldr	r0, [pc, #276]	@ (8006fec <__multiply+0x150>)
 8006ed8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006edc:	f000 fb20 	bl	8007520 <__assert_func>
 8006ee0:	f100 0514 	add.w	r5, r0, #20
 8006ee4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ee8:	462b      	mov	r3, r5
 8006eea:	2200      	movs	r2, #0
 8006eec:	4543      	cmp	r3, r8
 8006eee:	d321      	bcc.n	8006f34 <__multiply+0x98>
 8006ef0:	f107 0114 	add.w	r1, r7, #20
 8006ef4:	f104 0214 	add.w	r2, r4, #20
 8006ef8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006efc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006f00:	9302      	str	r3, [sp, #8]
 8006f02:	1b13      	subs	r3, r2, r4
 8006f04:	3b15      	subs	r3, #21
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	f104 0715 	add.w	r7, r4, #21
 8006f10:	42ba      	cmp	r2, r7
 8006f12:	bf38      	it	cc
 8006f14:	2304      	movcc	r3, #4
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	9103      	str	r1, [sp, #12]
 8006f1c:	428b      	cmp	r3, r1
 8006f1e:	d80c      	bhi.n	8006f3a <__multiply+0x9e>
 8006f20:	2e00      	cmp	r6, #0
 8006f22:	dd03      	ble.n	8006f2c <__multiply+0x90>
 8006f24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d05b      	beq.n	8006fe4 <__multiply+0x148>
 8006f2c:	6106      	str	r6, [r0, #16]
 8006f2e:	b005      	add	sp, #20
 8006f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f34:	f843 2b04 	str.w	r2, [r3], #4
 8006f38:	e7d8      	b.n	8006eec <__multiply+0x50>
 8006f3a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f3e:	f1ba 0f00 	cmp.w	sl, #0
 8006f42:	d024      	beq.n	8006f8e <__multiply+0xf2>
 8006f44:	f104 0e14 	add.w	lr, r4, #20
 8006f48:	46a9      	mov	r9, r5
 8006f4a:	f04f 0c00 	mov.w	ip, #0
 8006f4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f52:	f8d9 3000 	ldr.w	r3, [r9]
 8006f56:	fa1f fb87 	uxth.w	fp, r7
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006f64:	f8d9 7000 	ldr.w	r7, [r9]
 8006f68:	4463      	add	r3, ip
 8006f6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f6e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006f72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f7c:	4572      	cmp	r2, lr
 8006f7e:	f849 3b04 	str.w	r3, [r9], #4
 8006f82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f86:	d8e2      	bhi.n	8006f4e <__multiply+0xb2>
 8006f88:	9b01      	ldr	r3, [sp, #4]
 8006f8a:	f845 c003 	str.w	ip, [r5, r3]
 8006f8e:	9b03      	ldr	r3, [sp, #12]
 8006f90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f94:	3104      	adds	r1, #4
 8006f96:	f1b9 0f00 	cmp.w	r9, #0
 8006f9a:	d021      	beq.n	8006fe0 <__multiply+0x144>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	f104 0c14 	add.w	ip, r4, #20
 8006fa2:	46ae      	mov	lr, r5
 8006fa4:	f04f 0a00 	mov.w	sl, #0
 8006fa8:	f8bc b000 	ldrh.w	fp, [ip]
 8006fac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006fb0:	fb09 770b 	mla	r7, r9, fp, r7
 8006fb4:	4457      	add	r7, sl
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006fbc:	f84e 3b04 	str.w	r3, [lr], #4
 8006fc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fc8:	f8be 3000 	ldrh.w	r3, [lr]
 8006fcc:	fb09 330a 	mla	r3, r9, sl, r3
 8006fd0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006fd4:	4562      	cmp	r2, ip
 8006fd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fda:	d8e5      	bhi.n	8006fa8 <__multiply+0x10c>
 8006fdc:	9f01      	ldr	r7, [sp, #4]
 8006fde:	51eb      	str	r3, [r5, r7]
 8006fe0:	3504      	adds	r5, #4
 8006fe2:	e799      	b.n	8006f18 <__multiply+0x7c>
 8006fe4:	3e01      	subs	r6, #1
 8006fe6:	e79b      	b.n	8006f20 <__multiply+0x84>
 8006fe8:	08007c10 	.word	0x08007c10
 8006fec:	08007c21 	.word	0x08007c21

08006ff0 <__pow5mult>:
 8006ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff4:	4615      	mov	r5, r2
 8006ff6:	f012 0203 	ands.w	r2, r2, #3
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	460e      	mov	r6, r1
 8006ffe:	d007      	beq.n	8007010 <__pow5mult+0x20>
 8007000:	4c25      	ldr	r4, [pc, #148]	@ (8007098 <__pow5mult+0xa8>)
 8007002:	3a01      	subs	r2, #1
 8007004:	2300      	movs	r3, #0
 8007006:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800700a:	f7ff fe9f 	bl	8006d4c <__multadd>
 800700e:	4606      	mov	r6, r0
 8007010:	10ad      	asrs	r5, r5, #2
 8007012:	d03d      	beq.n	8007090 <__pow5mult+0xa0>
 8007014:	69fc      	ldr	r4, [r7, #28]
 8007016:	b97c      	cbnz	r4, 8007038 <__pow5mult+0x48>
 8007018:	2010      	movs	r0, #16
 800701a:	f7ff fd7f 	bl	8006b1c <malloc>
 800701e:	4602      	mov	r2, r0
 8007020:	61f8      	str	r0, [r7, #28]
 8007022:	b928      	cbnz	r0, 8007030 <__pow5mult+0x40>
 8007024:	4b1d      	ldr	r3, [pc, #116]	@ (800709c <__pow5mult+0xac>)
 8007026:	481e      	ldr	r0, [pc, #120]	@ (80070a0 <__pow5mult+0xb0>)
 8007028:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800702c:	f000 fa78 	bl	8007520 <__assert_func>
 8007030:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007034:	6004      	str	r4, [r0, #0]
 8007036:	60c4      	str	r4, [r0, #12]
 8007038:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800703c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007040:	b94c      	cbnz	r4, 8007056 <__pow5mult+0x66>
 8007042:	f240 2171 	movw	r1, #625	@ 0x271
 8007046:	4638      	mov	r0, r7
 8007048:	f7ff ff12 	bl	8006e70 <__i2b>
 800704c:	2300      	movs	r3, #0
 800704e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007052:	4604      	mov	r4, r0
 8007054:	6003      	str	r3, [r0, #0]
 8007056:	f04f 0900 	mov.w	r9, #0
 800705a:	07eb      	lsls	r3, r5, #31
 800705c:	d50a      	bpl.n	8007074 <__pow5mult+0x84>
 800705e:	4631      	mov	r1, r6
 8007060:	4622      	mov	r2, r4
 8007062:	4638      	mov	r0, r7
 8007064:	f7ff ff1a 	bl	8006e9c <__multiply>
 8007068:	4631      	mov	r1, r6
 800706a:	4680      	mov	r8, r0
 800706c:	4638      	mov	r0, r7
 800706e:	f7ff fe4b 	bl	8006d08 <_Bfree>
 8007072:	4646      	mov	r6, r8
 8007074:	106d      	asrs	r5, r5, #1
 8007076:	d00b      	beq.n	8007090 <__pow5mult+0xa0>
 8007078:	6820      	ldr	r0, [r4, #0]
 800707a:	b938      	cbnz	r0, 800708c <__pow5mult+0x9c>
 800707c:	4622      	mov	r2, r4
 800707e:	4621      	mov	r1, r4
 8007080:	4638      	mov	r0, r7
 8007082:	f7ff ff0b 	bl	8006e9c <__multiply>
 8007086:	6020      	str	r0, [r4, #0]
 8007088:	f8c0 9000 	str.w	r9, [r0]
 800708c:	4604      	mov	r4, r0
 800708e:	e7e4      	b.n	800705a <__pow5mult+0x6a>
 8007090:	4630      	mov	r0, r6
 8007092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007096:	bf00      	nop
 8007098:	08007c7c 	.word	0x08007c7c
 800709c:	08007ba1 	.word	0x08007ba1
 80070a0:	08007c21 	.word	0x08007c21

080070a4 <__lshift>:
 80070a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a8:	460c      	mov	r4, r1
 80070aa:	6849      	ldr	r1, [r1, #4]
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070b2:	68a3      	ldr	r3, [r4, #8]
 80070b4:	4607      	mov	r7, r0
 80070b6:	4691      	mov	r9, r2
 80070b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070bc:	f108 0601 	add.w	r6, r8, #1
 80070c0:	42b3      	cmp	r3, r6
 80070c2:	db0b      	blt.n	80070dc <__lshift+0x38>
 80070c4:	4638      	mov	r0, r7
 80070c6:	f7ff fddf 	bl	8006c88 <_Balloc>
 80070ca:	4605      	mov	r5, r0
 80070cc:	b948      	cbnz	r0, 80070e2 <__lshift+0x3e>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b28      	ldr	r3, [pc, #160]	@ (8007174 <__lshift+0xd0>)
 80070d2:	4829      	ldr	r0, [pc, #164]	@ (8007178 <__lshift+0xd4>)
 80070d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80070d8:	f000 fa22 	bl	8007520 <__assert_func>
 80070dc:	3101      	adds	r1, #1
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	e7ee      	b.n	80070c0 <__lshift+0x1c>
 80070e2:	2300      	movs	r3, #0
 80070e4:	f100 0114 	add.w	r1, r0, #20
 80070e8:	f100 0210 	add.w	r2, r0, #16
 80070ec:	4618      	mov	r0, r3
 80070ee:	4553      	cmp	r3, sl
 80070f0:	db33      	blt.n	800715a <__lshift+0xb6>
 80070f2:	6920      	ldr	r0, [r4, #16]
 80070f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070f8:	f104 0314 	add.w	r3, r4, #20
 80070fc:	f019 091f 	ands.w	r9, r9, #31
 8007100:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007104:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007108:	d02b      	beq.n	8007162 <__lshift+0xbe>
 800710a:	f1c9 0e20 	rsb	lr, r9, #32
 800710e:	468a      	mov	sl, r1
 8007110:	2200      	movs	r2, #0
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	fa00 f009 	lsl.w	r0, r0, r9
 8007118:	4310      	orrs	r0, r2
 800711a:	f84a 0b04 	str.w	r0, [sl], #4
 800711e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007122:	459c      	cmp	ip, r3
 8007124:	fa22 f20e 	lsr.w	r2, r2, lr
 8007128:	d8f3      	bhi.n	8007112 <__lshift+0x6e>
 800712a:	ebac 0304 	sub.w	r3, ip, r4
 800712e:	3b15      	subs	r3, #21
 8007130:	f023 0303 	bic.w	r3, r3, #3
 8007134:	3304      	adds	r3, #4
 8007136:	f104 0015 	add.w	r0, r4, #21
 800713a:	4584      	cmp	ip, r0
 800713c:	bf38      	it	cc
 800713e:	2304      	movcc	r3, #4
 8007140:	50ca      	str	r2, [r1, r3]
 8007142:	b10a      	cbz	r2, 8007148 <__lshift+0xa4>
 8007144:	f108 0602 	add.w	r6, r8, #2
 8007148:	3e01      	subs	r6, #1
 800714a:	4638      	mov	r0, r7
 800714c:	612e      	str	r6, [r5, #16]
 800714e:	4621      	mov	r1, r4
 8007150:	f7ff fdda 	bl	8006d08 <_Bfree>
 8007154:	4628      	mov	r0, r5
 8007156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715a:	f842 0f04 	str.w	r0, [r2, #4]!
 800715e:	3301      	adds	r3, #1
 8007160:	e7c5      	b.n	80070ee <__lshift+0x4a>
 8007162:	3904      	subs	r1, #4
 8007164:	f853 2b04 	ldr.w	r2, [r3], #4
 8007168:	f841 2f04 	str.w	r2, [r1, #4]!
 800716c:	459c      	cmp	ip, r3
 800716e:	d8f9      	bhi.n	8007164 <__lshift+0xc0>
 8007170:	e7ea      	b.n	8007148 <__lshift+0xa4>
 8007172:	bf00      	nop
 8007174:	08007c10 	.word	0x08007c10
 8007178:	08007c21 	.word	0x08007c21

0800717c <__mcmp>:
 800717c:	690a      	ldr	r2, [r1, #16]
 800717e:	4603      	mov	r3, r0
 8007180:	6900      	ldr	r0, [r0, #16]
 8007182:	1a80      	subs	r0, r0, r2
 8007184:	b530      	push	{r4, r5, lr}
 8007186:	d10e      	bne.n	80071a6 <__mcmp+0x2a>
 8007188:	3314      	adds	r3, #20
 800718a:	3114      	adds	r1, #20
 800718c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007190:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007194:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007198:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800719c:	4295      	cmp	r5, r2
 800719e:	d003      	beq.n	80071a8 <__mcmp+0x2c>
 80071a0:	d205      	bcs.n	80071ae <__mcmp+0x32>
 80071a2:	f04f 30ff 	mov.w	r0, #4294967295
 80071a6:	bd30      	pop	{r4, r5, pc}
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	d3f3      	bcc.n	8007194 <__mcmp+0x18>
 80071ac:	e7fb      	b.n	80071a6 <__mcmp+0x2a>
 80071ae:	2001      	movs	r0, #1
 80071b0:	e7f9      	b.n	80071a6 <__mcmp+0x2a>
	...

080071b4 <__mdiff>:
 80071b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b8:	4689      	mov	r9, r1
 80071ba:	4606      	mov	r6, r0
 80071bc:	4611      	mov	r1, r2
 80071be:	4648      	mov	r0, r9
 80071c0:	4614      	mov	r4, r2
 80071c2:	f7ff ffdb 	bl	800717c <__mcmp>
 80071c6:	1e05      	subs	r5, r0, #0
 80071c8:	d112      	bne.n	80071f0 <__mdiff+0x3c>
 80071ca:	4629      	mov	r1, r5
 80071cc:	4630      	mov	r0, r6
 80071ce:	f7ff fd5b 	bl	8006c88 <_Balloc>
 80071d2:	4602      	mov	r2, r0
 80071d4:	b928      	cbnz	r0, 80071e2 <__mdiff+0x2e>
 80071d6:	4b3f      	ldr	r3, [pc, #252]	@ (80072d4 <__mdiff+0x120>)
 80071d8:	f240 2137 	movw	r1, #567	@ 0x237
 80071dc:	483e      	ldr	r0, [pc, #248]	@ (80072d8 <__mdiff+0x124>)
 80071de:	f000 f99f 	bl	8007520 <__assert_func>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071e8:	4610      	mov	r0, r2
 80071ea:	b003      	add	sp, #12
 80071ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f0:	bfbc      	itt	lt
 80071f2:	464b      	movlt	r3, r9
 80071f4:	46a1      	movlt	r9, r4
 80071f6:	4630      	mov	r0, r6
 80071f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80071fc:	bfba      	itte	lt
 80071fe:	461c      	movlt	r4, r3
 8007200:	2501      	movlt	r5, #1
 8007202:	2500      	movge	r5, #0
 8007204:	f7ff fd40 	bl	8006c88 <_Balloc>
 8007208:	4602      	mov	r2, r0
 800720a:	b918      	cbnz	r0, 8007214 <__mdiff+0x60>
 800720c:	4b31      	ldr	r3, [pc, #196]	@ (80072d4 <__mdiff+0x120>)
 800720e:	f240 2145 	movw	r1, #581	@ 0x245
 8007212:	e7e3      	b.n	80071dc <__mdiff+0x28>
 8007214:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007218:	6926      	ldr	r6, [r4, #16]
 800721a:	60c5      	str	r5, [r0, #12]
 800721c:	f109 0310 	add.w	r3, r9, #16
 8007220:	f109 0514 	add.w	r5, r9, #20
 8007224:	f104 0e14 	add.w	lr, r4, #20
 8007228:	f100 0b14 	add.w	fp, r0, #20
 800722c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007230:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	46d9      	mov	r9, fp
 8007238:	f04f 0c00 	mov.w	ip, #0
 800723c:	9b01      	ldr	r3, [sp, #4]
 800723e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007242:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	fa1f f38a 	uxth.w	r3, sl
 800724c:	4619      	mov	r1, r3
 800724e:	b283      	uxth	r3, r0
 8007250:	1acb      	subs	r3, r1, r3
 8007252:	0c00      	lsrs	r0, r0, #16
 8007254:	4463      	add	r3, ip
 8007256:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800725a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800725e:	b29b      	uxth	r3, r3
 8007260:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007264:	4576      	cmp	r6, lr
 8007266:	f849 3b04 	str.w	r3, [r9], #4
 800726a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800726e:	d8e5      	bhi.n	800723c <__mdiff+0x88>
 8007270:	1b33      	subs	r3, r6, r4
 8007272:	3b15      	subs	r3, #21
 8007274:	f023 0303 	bic.w	r3, r3, #3
 8007278:	3415      	adds	r4, #21
 800727a:	3304      	adds	r3, #4
 800727c:	42a6      	cmp	r6, r4
 800727e:	bf38      	it	cc
 8007280:	2304      	movcc	r3, #4
 8007282:	441d      	add	r5, r3
 8007284:	445b      	add	r3, fp
 8007286:	461e      	mov	r6, r3
 8007288:	462c      	mov	r4, r5
 800728a:	4544      	cmp	r4, r8
 800728c:	d30e      	bcc.n	80072ac <__mdiff+0xf8>
 800728e:	f108 0103 	add.w	r1, r8, #3
 8007292:	1b49      	subs	r1, r1, r5
 8007294:	f021 0103 	bic.w	r1, r1, #3
 8007298:	3d03      	subs	r5, #3
 800729a:	45a8      	cmp	r8, r5
 800729c:	bf38      	it	cc
 800729e:	2100      	movcc	r1, #0
 80072a0:	440b      	add	r3, r1
 80072a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072a6:	b191      	cbz	r1, 80072ce <__mdiff+0x11a>
 80072a8:	6117      	str	r7, [r2, #16]
 80072aa:	e79d      	b.n	80071e8 <__mdiff+0x34>
 80072ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80072b0:	46e6      	mov	lr, ip
 80072b2:	0c08      	lsrs	r0, r1, #16
 80072b4:	fa1c fc81 	uxtah	ip, ip, r1
 80072b8:	4471      	add	r1, lr
 80072ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80072be:	b289      	uxth	r1, r1
 80072c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80072c4:	f846 1b04 	str.w	r1, [r6], #4
 80072c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072cc:	e7dd      	b.n	800728a <__mdiff+0xd6>
 80072ce:	3f01      	subs	r7, #1
 80072d0:	e7e7      	b.n	80072a2 <__mdiff+0xee>
 80072d2:	bf00      	nop
 80072d4:	08007c10 	.word	0x08007c10
 80072d8:	08007c21 	.word	0x08007c21

080072dc <__d2b>:
 80072dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072e0:	460f      	mov	r7, r1
 80072e2:	2101      	movs	r1, #1
 80072e4:	ec59 8b10 	vmov	r8, r9, d0
 80072e8:	4616      	mov	r6, r2
 80072ea:	f7ff fccd 	bl	8006c88 <_Balloc>
 80072ee:	4604      	mov	r4, r0
 80072f0:	b930      	cbnz	r0, 8007300 <__d2b+0x24>
 80072f2:	4602      	mov	r2, r0
 80072f4:	4b23      	ldr	r3, [pc, #140]	@ (8007384 <__d2b+0xa8>)
 80072f6:	4824      	ldr	r0, [pc, #144]	@ (8007388 <__d2b+0xac>)
 80072f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80072fc:	f000 f910 	bl	8007520 <__assert_func>
 8007300:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007304:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007308:	b10d      	cbz	r5, 800730e <__d2b+0x32>
 800730a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	f1b8 0300 	subs.w	r3, r8, #0
 8007314:	d023      	beq.n	800735e <__d2b+0x82>
 8007316:	4668      	mov	r0, sp
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	f7ff fd7c 	bl	8006e16 <__lo0bits>
 800731e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007322:	b1d0      	cbz	r0, 800735a <__d2b+0x7e>
 8007324:	f1c0 0320 	rsb	r3, r0, #32
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	430b      	orrs	r3, r1
 800732e:	40c2      	lsrs	r2, r0
 8007330:	6163      	str	r3, [r4, #20]
 8007332:	9201      	str	r2, [sp, #4]
 8007334:	9b01      	ldr	r3, [sp, #4]
 8007336:	61a3      	str	r3, [r4, #24]
 8007338:	2b00      	cmp	r3, #0
 800733a:	bf0c      	ite	eq
 800733c:	2201      	moveq	r2, #1
 800733e:	2202      	movne	r2, #2
 8007340:	6122      	str	r2, [r4, #16]
 8007342:	b1a5      	cbz	r5, 800736e <__d2b+0x92>
 8007344:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007348:	4405      	add	r5, r0
 800734a:	603d      	str	r5, [r7, #0]
 800734c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007350:	6030      	str	r0, [r6, #0]
 8007352:	4620      	mov	r0, r4
 8007354:	b003      	add	sp, #12
 8007356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800735a:	6161      	str	r1, [r4, #20]
 800735c:	e7ea      	b.n	8007334 <__d2b+0x58>
 800735e:	a801      	add	r0, sp, #4
 8007360:	f7ff fd59 	bl	8006e16 <__lo0bits>
 8007364:	9b01      	ldr	r3, [sp, #4]
 8007366:	6163      	str	r3, [r4, #20]
 8007368:	3020      	adds	r0, #32
 800736a:	2201      	movs	r2, #1
 800736c:	e7e8      	b.n	8007340 <__d2b+0x64>
 800736e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007372:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007376:	6038      	str	r0, [r7, #0]
 8007378:	6918      	ldr	r0, [r3, #16]
 800737a:	f7ff fd2d 	bl	8006dd8 <__hi0bits>
 800737e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007382:	e7e5      	b.n	8007350 <__d2b+0x74>
 8007384:	08007c10 	.word	0x08007c10
 8007388:	08007c21 	.word	0x08007c21

0800738c <__sflush_r>:
 800738c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007394:	0716      	lsls	r6, r2, #28
 8007396:	4605      	mov	r5, r0
 8007398:	460c      	mov	r4, r1
 800739a:	d454      	bmi.n	8007446 <__sflush_r+0xba>
 800739c:	684b      	ldr	r3, [r1, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dc02      	bgt.n	80073a8 <__sflush_r+0x1c>
 80073a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	dd48      	ble.n	800743a <__sflush_r+0xae>
 80073a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073aa:	2e00      	cmp	r6, #0
 80073ac:	d045      	beq.n	800743a <__sflush_r+0xae>
 80073ae:	2300      	movs	r3, #0
 80073b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073b4:	682f      	ldr	r7, [r5, #0]
 80073b6:	6a21      	ldr	r1, [r4, #32]
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	d030      	beq.n	800741e <__sflush_r+0x92>
 80073bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	0759      	lsls	r1, r3, #29
 80073c2:	d505      	bpl.n	80073d0 <__sflush_r+0x44>
 80073c4:	6863      	ldr	r3, [r4, #4]
 80073c6:	1ad2      	subs	r2, r2, r3
 80073c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073ca:	b10b      	cbz	r3, 80073d0 <__sflush_r+0x44>
 80073cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073ce:	1ad2      	subs	r2, r2, r3
 80073d0:	2300      	movs	r3, #0
 80073d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073d4:	6a21      	ldr	r1, [r4, #32]
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b0      	blx	r6
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	d106      	bne.n	80073ee <__sflush_r+0x62>
 80073e0:	6829      	ldr	r1, [r5, #0]
 80073e2:	291d      	cmp	r1, #29
 80073e4:	d82b      	bhi.n	800743e <__sflush_r+0xb2>
 80073e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007490 <__sflush_r+0x104>)
 80073e8:	410a      	asrs	r2, r1
 80073ea:	07d6      	lsls	r6, r2, #31
 80073ec:	d427      	bmi.n	800743e <__sflush_r+0xb2>
 80073ee:	2200      	movs	r2, #0
 80073f0:	6062      	str	r2, [r4, #4]
 80073f2:	04d9      	lsls	r1, r3, #19
 80073f4:	6922      	ldr	r2, [r4, #16]
 80073f6:	6022      	str	r2, [r4, #0]
 80073f8:	d504      	bpl.n	8007404 <__sflush_r+0x78>
 80073fa:	1c42      	adds	r2, r0, #1
 80073fc:	d101      	bne.n	8007402 <__sflush_r+0x76>
 80073fe:	682b      	ldr	r3, [r5, #0]
 8007400:	b903      	cbnz	r3, 8007404 <__sflush_r+0x78>
 8007402:	6560      	str	r0, [r4, #84]	@ 0x54
 8007404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007406:	602f      	str	r7, [r5, #0]
 8007408:	b1b9      	cbz	r1, 800743a <__sflush_r+0xae>
 800740a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800740e:	4299      	cmp	r1, r3
 8007410:	d002      	beq.n	8007418 <__sflush_r+0x8c>
 8007412:	4628      	mov	r0, r5
 8007414:	f7ff fb38 	bl	8006a88 <_free_r>
 8007418:	2300      	movs	r3, #0
 800741a:	6363      	str	r3, [r4, #52]	@ 0x34
 800741c:	e00d      	b.n	800743a <__sflush_r+0xae>
 800741e:	2301      	movs	r3, #1
 8007420:	4628      	mov	r0, r5
 8007422:	47b0      	blx	r6
 8007424:	4602      	mov	r2, r0
 8007426:	1c50      	adds	r0, r2, #1
 8007428:	d1c9      	bne.n	80073be <__sflush_r+0x32>
 800742a:	682b      	ldr	r3, [r5, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0c6      	beq.n	80073be <__sflush_r+0x32>
 8007430:	2b1d      	cmp	r3, #29
 8007432:	d001      	beq.n	8007438 <__sflush_r+0xac>
 8007434:	2b16      	cmp	r3, #22
 8007436:	d11e      	bne.n	8007476 <__sflush_r+0xea>
 8007438:	602f      	str	r7, [r5, #0]
 800743a:	2000      	movs	r0, #0
 800743c:	e022      	b.n	8007484 <__sflush_r+0xf8>
 800743e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007442:	b21b      	sxth	r3, r3
 8007444:	e01b      	b.n	800747e <__sflush_r+0xf2>
 8007446:	690f      	ldr	r7, [r1, #16]
 8007448:	2f00      	cmp	r7, #0
 800744a:	d0f6      	beq.n	800743a <__sflush_r+0xae>
 800744c:	0793      	lsls	r3, r2, #30
 800744e:	680e      	ldr	r6, [r1, #0]
 8007450:	bf08      	it	eq
 8007452:	694b      	ldreq	r3, [r1, #20]
 8007454:	600f      	str	r7, [r1, #0]
 8007456:	bf18      	it	ne
 8007458:	2300      	movne	r3, #0
 800745a:	eba6 0807 	sub.w	r8, r6, r7
 800745e:	608b      	str	r3, [r1, #8]
 8007460:	f1b8 0f00 	cmp.w	r8, #0
 8007464:	dde9      	ble.n	800743a <__sflush_r+0xae>
 8007466:	6a21      	ldr	r1, [r4, #32]
 8007468:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800746a:	4643      	mov	r3, r8
 800746c:	463a      	mov	r2, r7
 800746e:	4628      	mov	r0, r5
 8007470:	47b0      	blx	r6
 8007472:	2800      	cmp	r0, #0
 8007474:	dc08      	bgt.n	8007488 <__sflush_r+0xfc>
 8007476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800747a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	f04f 30ff 	mov.w	r0, #4294967295
 8007484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007488:	4407      	add	r7, r0
 800748a:	eba8 0800 	sub.w	r8, r8, r0
 800748e:	e7e7      	b.n	8007460 <__sflush_r+0xd4>
 8007490:	dfbffffe 	.word	0xdfbffffe

08007494 <_fflush_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	690b      	ldr	r3, [r1, #16]
 8007498:	4605      	mov	r5, r0
 800749a:	460c      	mov	r4, r1
 800749c:	b913      	cbnz	r3, 80074a4 <_fflush_r+0x10>
 800749e:	2500      	movs	r5, #0
 80074a0:	4628      	mov	r0, r5
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	b118      	cbz	r0, 80074ae <_fflush_r+0x1a>
 80074a6:	6a03      	ldr	r3, [r0, #32]
 80074a8:	b90b      	cbnz	r3, 80074ae <_fflush_r+0x1a>
 80074aa:	f7fe fba5 	bl	8005bf8 <__sinit>
 80074ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0f3      	beq.n	800749e <_fflush_r+0xa>
 80074b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074b8:	07d0      	lsls	r0, r2, #31
 80074ba:	d404      	bmi.n	80074c6 <_fflush_r+0x32>
 80074bc:	0599      	lsls	r1, r3, #22
 80074be:	d402      	bmi.n	80074c6 <_fflush_r+0x32>
 80074c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074c2:	f7fe fc90 	bl	8005de6 <__retarget_lock_acquire_recursive>
 80074c6:	4628      	mov	r0, r5
 80074c8:	4621      	mov	r1, r4
 80074ca:	f7ff ff5f 	bl	800738c <__sflush_r>
 80074ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074d0:	07da      	lsls	r2, r3, #31
 80074d2:	4605      	mov	r5, r0
 80074d4:	d4e4      	bmi.n	80074a0 <_fflush_r+0xc>
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	059b      	lsls	r3, r3, #22
 80074da:	d4e1      	bmi.n	80074a0 <_fflush_r+0xc>
 80074dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074de:	f7fe fc83 	bl	8005de8 <__retarget_lock_release_recursive>
 80074e2:	e7dd      	b.n	80074a0 <_fflush_r+0xc>

080074e4 <_sbrk_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4d06      	ldr	r5, [pc, #24]	@ (8007500 <_sbrk_r+0x1c>)
 80074e8:	2300      	movs	r3, #0
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	602b      	str	r3, [r5, #0]
 80074f0:	f7fa f876 	bl	80015e0 <_sbrk>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_sbrk_r+0x1a>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_sbrk_r+0x1a>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	20000478 	.word	0x20000478

08007504 <memcpy>:
 8007504:	440a      	add	r2, r1
 8007506:	4291      	cmp	r1, r2
 8007508:	f100 33ff 	add.w	r3, r0, #4294967295
 800750c:	d100      	bne.n	8007510 <memcpy+0xc>
 800750e:	4770      	bx	lr
 8007510:	b510      	push	{r4, lr}
 8007512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800751a:	4291      	cmp	r1, r2
 800751c:	d1f9      	bne.n	8007512 <memcpy+0xe>
 800751e:	bd10      	pop	{r4, pc}

08007520 <__assert_func>:
 8007520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007522:	4614      	mov	r4, r2
 8007524:	461a      	mov	r2, r3
 8007526:	4b09      	ldr	r3, [pc, #36]	@ (800754c <__assert_func+0x2c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4605      	mov	r5, r0
 800752c:	68d8      	ldr	r0, [r3, #12]
 800752e:	b954      	cbnz	r4, 8007546 <__assert_func+0x26>
 8007530:	4b07      	ldr	r3, [pc, #28]	@ (8007550 <__assert_func+0x30>)
 8007532:	461c      	mov	r4, r3
 8007534:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007538:	9100      	str	r1, [sp, #0]
 800753a:	462b      	mov	r3, r5
 800753c:	4905      	ldr	r1, [pc, #20]	@ (8007554 <__assert_func+0x34>)
 800753e:	f000 f841 	bl	80075c4 <fiprintf>
 8007542:	f000 f851 	bl	80075e8 <abort>
 8007546:	4b04      	ldr	r3, [pc, #16]	@ (8007558 <__assert_func+0x38>)
 8007548:	e7f4      	b.n	8007534 <__assert_func+0x14>
 800754a:	bf00      	nop
 800754c:	20000020 	.word	0x20000020
 8007550:	08007dbd 	.word	0x08007dbd
 8007554:	08007d8f 	.word	0x08007d8f
 8007558:	08007d82 	.word	0x08007d82

0800755c <_calloc_r>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	fba1 5402 	umull	r5, r4, r1, r2
 8007562:	b93c      	cbnz	r4, 8007574 <_calloc_r+0x18>
 8007564:	4629      	mov	r1, r5
 8007566:	f7ff fb03 	bl	8006b70 <_malloc_r>
 800756a:	4606      	mov	r6, r0
 800756c:	b928      	cbnz	r0, 800757a <_calloc_r+0x1e>
 800756e:	2600      	movs	r6, #0
 8007570:	4630      	mov	r0, r6
 8007572:	bd70      	pop	{r4, r5, r6, pc}
 8007574:	220c      	movs	r2, #12
 8007576:	6002      	str	r2, [r0, #0]
 8007578:	e7f9      	b.n	800756e <_calloc_r+0x12>
 800757a:	462a      	mov	r2, r5
 800757c:	4621      	mov	r1, r4
 800757e:	f7fe fbb4 	bl	8005cea <memset>
 8007582:	e7f5      	b.n	8007570 <_calloc_r+0x14>

08007584 <__ascii_mbtowc>:
 8007584:	b082      	sub	sp, #8
 8007586:	b901      	cbnz	r1, 800758a <__ascii_mbtowc+0x6>
 8007588:	a901      	add	r1, sp, #4
 800758a:	b142      	cbz	r2, 800759e <__ascii_mbtowc+0x1a>
 800758c:	b14b      	cbz	r3, 80075a2 <__ascii_mbtowc+0x1e>
 800758e:	7813      	ldrb	r3, [r2, #0]
 8007590:	600b      	str	r3, [r1, #0]
 8007592:	7812      	ldrb	r2, [r2, #0]
 8007594:	1e10      	subs	r0, r2, #0
 8007596:	bf18      	it	ne
 8007598:	2001      	movne	r0, #1
 800759a:	b002      	add	sp, #8
 800759c:	4770      	bx	lr
 800759e:	4610      	mov	r0, r2
 80075a0:	e7fb      	b.n	800759a <__ascii_mbtowc+0x16>
 80075a2:	f06f 0001 	mvn.w	r0, #1
 80075a6:	e7f8      	b.n	800759a <__ascii_mbtowc+0x16>

080075a8 <__ascii_wctomb>:
 80075a8:	4603      	mov	r3, r0
 80075aa:	4608      	mov	r0, r1
 80075ac:	b141      	cbz	r1, 80075c0 <__ascii_wctomb+0x18>
 80075ae:	2aff      	cmp	r2, #255	@ 0xff
 80075b0:	d904      	bls.n	80075bc <__ascii_wctomb+0x14>
 80075b2:	228a      	movs	r2, #138	@ 0x8a
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ba:	4770      	bx	lr
 80075bc:	700a      	strb	r2, [r1, #0]
 80075be:	2001      	movs	r0, #1
 80075c0:	4770      	bx	lr
	...

080075c4 <fiprintf>:
 80075c4:	b40e      	push	{r1, r2, r3}
 80075c6:	b503      	push	{r0, r1, lr}
 80075c8:	4601      	mov	r1, r0
 80075ca:	ab03      	add	r3, sp, #12
 80075cc:	4805      	ldr	r0, [pc, #20]	@ (80075e4 <fiprintf+0x20>)
 80075ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d2:	6800      	ldr	r0, [r0, #0]
 80075d4:	9301      	str	r3, [sp, #4]
 80075d6:	f000 f837 	bl	8007648 <_vfiprintf_r>
 80075da:	b002      	add	sp, #8
 80075dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075e0:	b003      	add	sp, #12
 80075e2:	4770      	bx	lr
 80075e4:	20000020 	.word	0x20000020

080075e8 <abort>:
 80075e8:	b508      	push	{r3, lr}
 80075ea:	2006      	movs	r0, #6
 80075ec:	f000 fa00 	bl	80079f0 <raise>
 80075f0:	2001      	movs	r0, #1
 80075f2:	f7f9 ff7d 	bl	80014f0 <_exit>

080075f6 <__sfputc_r>:
 80075f6:	6893      	ldr	r3, [r2, #8]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	b410      	push	{r4}
 80075fe:	6093      	str	r3, [r2, #8]
 8007600:	da08      	bge.n	8007614 <__sfputc_r+0x1e>
 8007602:	6994      	ldr	r4, [r2, #24]
 8007604:	42a3      	cmp	r3, r4
 8007606:	db01      	blt.n	800760c <__sfputc_r+0x16>
 8007608:	290a      	cmp	r1, #10
 800760a:	d103      	bne.n	8007614 <__sfputc_r+0x1e>
 800760c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007610:	f000 b932 	b.w	8007878 <__swbuf_r>
 8007614:	6813      	ldr	r3, [r2, #0]
 8007616:	1c58      	adds	r0, r3, #1
 8007618:	6010      	str	r0, [r2, #0]
 800761a:	7019      	strb	r1, [r3, #0]
 800761c:	4608      	mov	r0, r1
 800761e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007622:	4770      	bx	lr

08007624 <__sfputs_r>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	4606      	mov	r6, r0
 8007628:	460f      	mov	r7, r1
 800762a:	4614      	mov	r4, r2
 800762c:	18d5      	adds	r5, r2, r3
 800762e:	42ac      	cmp	r4, r5
 8007630:	d101      	bne.n	8007636 <__sfputs_r+0x12>
 8007632:	2000      	movs	r0, #0
 8007634:	e007      	b.n	8007646 <__sfputs_r+0x22>
 8007636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763a:	463a      	mov	r2, r7
 800763c:	4630      	mov	r0, r6
 800763e:	f7ff ffda 	bl	80075f6 <__sfputc_r>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	d1f3      	bne.n	800762e <__sfputs_r+0xa>
 8007646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007648 <_vfiprintf_r>:
 8007648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	460d      	mov	r5, r1
 800764e:	b09d      	sub	sp, #116	@ 0x74
 8007650:	4614      	mov	r4, r2
 8007652:	4698      	mov	r8, r3
 8007654:	4606      	mov	r6, r0
 8007656:	b118      	cbz	r0, 8007660 <_vfiprintf_r+0x18>
 8007658:	6a03      	ldr	r3, [r0, #32]
 800765a:	b90b      	cbnz	r3, 8007660 <_vfiprintf_r+0x18>
 800765c:	f7fe facc 	bl	8005bf8 <__sinit>
 8007660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007662:	07d9      	lsls	r1, r3, #31
 8007664:	d405      	bmi.n	8007672 <_vfiprintf_r+0x2a>
 8007666:	89ab      	ldrh	r3, [r5, #12]
 8007668:	059a      	lsls	r2, r3, #22
 800766a:	d402      	bmi.n	8007672 <_vfiprintf_r+0x2a>
 800766c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800766e:	f7fe fbba 	bl	8005de6 <__retarget_lock_acquire_recursive>
 8007672:	89ab      	ldrh	r3, [r5, #12]
 8007674:	071b      	lsls	r3, r3, #28
 8007676:	d501      	bpl.n	800767c <_vfiprintf_r+0x34>
 8007678:	692b      	ldr	r3, [r5, #16]
 800767a:	b99b      	cbnz	r3, 80076a4 <_vfiprintf_r+0x5c>
 800767c:	4629      	mov	r1, r5
 800767e:	4630      	mov	r0, r6
 8007680:	f000 f938 	bl	80078f4 <__swsetup_r>
 8007684:	b170      	cbz	r0, 80076a4 <_vfiprintf_r+0x5c>
 8007686:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007688:	07dc      	lsls	r4, r3, #31
 800768a:	d504      	bpl.n	8007696 <_vfiprintf_r+0x4e>
 800768c:	f04f 30ff 	mov.w	r0, #4294967295
 8007690:	b01d      	add	sp, #116	@ 0x74
 8007692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007696:	89ab      	ldrh	r3, [r5, #12]
 8007698:	0598      	lsls	r0, r3, #22
 800769a:	d4f7      	bmi.n	800768c <_vfiprintf_r+0x44>
 800769c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800769e:	f7fe fba3 	bl	8005de8 <__retarget_lock_release_recursive>
 80076a2:	e7f3      	b.n	800768c <_vfiprintf_r+0x44>
 80076a4:	2300      	movs	r3, #0
 80076a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a8:	2320      	movs	r3, #32
 80076aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80076b2:	2330      	movs	r3, #48	@ 0x30
 80076b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007864 <_vfiprintf_r+0x21c>
 80076b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076bc:	f04f 0901 	mov.w	r9, #1
 80076c0:	4623      	mov	r3, r4
 80076c2:	469a      	mov	sl, r3
 80076c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076c8:	b10a      	cbz	r2, 80076ce <_vfiprintf_r+0x86>
 80076ca:	2a25      	cmp	r2, #37	@ 0x25
 80076cc:	d1f9      	bne.n	80076c2 <_vfiprintf_r+0x7a>
 80076ce:	ebba 0b04 	subs.w	fp, sl, r4
 80076d2:	d00b      	beq.n	80076ec <_vfiprintf_r+0xa4>
 80076d4:	465b      	mov	r3, fp
 80076d6:	4622      	mov	r2, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	4630      	mov	r0, r6
 80076dc:	f7ff ffa2 	bl	8007624 <__sfputs_r>
 80076e0:	3001      	adds	r0, #1
 80076e2:	f000 80a7 	beq.w	8007834 <_vfiprintf_r+0x1ec>
 80076e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076e8:	445a      	add	r2, fp
 80076ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80076ec:	f89a 3000 	ldrb.w	r3, [sl]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 809f 	beq.w	8007834 <_vfiprintf_r+0x1ec>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f04f 32ff 	mov.w	r2, #4294967295
 80076fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007700:	f10a 0a01 	add.w	sl, sl, #1
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	9307      	str	r3, [sp, #28]
 8007708:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800770c:	931a      	str	r3, [sp, #104]	@ 0x68
 800770e:	4654      	mov	r4, sl
 8007710:	2205      	movs	r2, #5
 8007712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007716:	4853      	ldr	r0, [pc, #332]	@ (8007864 <_vfiprintf_r+0x21c>)
 8007718:	f7f8 fd7a 	bl	8000210 <memchr>
 800771c:	9a04      	ldr	r2, [sp, #16]
 800771e:	b9d8      	cbnz	r0, 8007758 <_vfiprintf_r+0x110>
 8007720:	06d1      	lsls	r1, r2, #27
 8007722:	bf44      	itt	mi
 8007724:	2320      	movmi	r3, #32
 8007726:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800772a:	0713      	lsls	r3, r2, #28
 800772c:	bf44      	itt	mi
 800772e:	232b      	movmi	r3, #43	@ 0x2b
 8007730:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007734:	f89a 3000 	ldrb.w	r3, [sl]
 8007738:	2b2a      	cmp	r3, #42	@ 0x2a
 800773a:	d015      	beq.n	8007768 <_vfiprintf_r+0x120>
 800773c:	9a07      	ldr	r2, [sp, #28]
 800773e:	4654      	mov	r4, sl
 8007740:	2000      	movs	r0, #0
 8007742:	f04f 0c0a 	mov.w	ip, #10
 8007746:	4621      	mov	r1, r4
 8007748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800774c:	3b30      	subs	r3, #48	@ 0x30
 800774e:	2b09      	cmp	r3, #9
 8007750:	d94b      	bls.n	80077ea <_vfiprintf_r+0x1a2>
 8007752:	b1b0      	cbz	r0, 8007782 <_vfiprintf_r+0x13a>
 8007754:	9207      	str	r2, [sp, #28]
 8007756:	e014      	b.n	8007782 <_vfiprintf_r+0x13a>
 8007758:	eba0 0308 	sub.w	r3, r0, r8
 800775c:	fa09 f303 	lsl.w	r3, r9, r3
 8007760:	4313      	orrs	r3, r2
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	46a2      	mov	sl, r4
 8007766:	e7d2      	b.n	800770e <_vfiprintf_r+0xc6>
 8007768:	9b03      	ldr	r3, [sp, #12]
 800776a:	1d19      	adds	r1, r3, #4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	9103      	str	r1, [sp, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	bfbb      	ittet	lt
 8007774:	425b      	neglt	r3, r3
 8007776:	f042 0202 	orrlt.w	r2, r2, #2
 800777a:	9307      	strge	r3, [sp, #28]
 800777c:	9307      	strlt	r3, [sp, #28]
 800777e:	bfb8      	it	lt
 8007780:	9204      	strlt	r2, [sp, #16]
 8007782:	7823      	ldrb	r3, [r4, #0]
 8007784:	2b2e      	cmp	r3, #46	@ 0x2e
 8007786:	d10a      	bne.n	800779e <_vfiprintf_r+0x156>
 8007788:	7863      	ldrb	r3, [r4, #1]
 800778a:	2b2a      	cmp	r3, #42	@ 0x2a
 800778c:	d132      	bne.n	80077f4 <_vfiprintf_r+0x1ac>
 800778e:	9b03      	ldr	r3, [sp, #12]
 8007790:	1d1a      	adds	r2, r3, #4
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	9203      	str	r2, [sp, #12]
 8007796:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800779a:	3402      	adds	r4, #2
 800779c:	9305      	str	r3, [sp, #20]
 800779e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007874 <_vfiprintf_r+0x22c>
 80077a2:	7821      	ldrb	r1, [r4, #0]
 80077a4:	2203      	movs	r2, #3
 80077a6:	4650      	mov	r0, sl
 80077a8:	f7f8 fd32 	bl	8000210 <memchr>
 80077ac:	b138      	cbz	r0, 80077be <_vfiprintf_r+0x176>
 80077ae:	9b04      	ldr	r3, [sp, #16]
 80077b0:	eba0 000a 	sub.w	r0, r0, sl
 80077b4:	2240      	movs	r2, #64	@ 0x40
 80077b6:	4082      	lsls	r2, r0
 80077b8:	4313      	orrs	r3, r2
 80077ba:	3401      	adds	r4, #1
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c2:	4829      	ldr	r0, [pc, #164]	@ (8007868 <_vfiprintf_r+0x220>)
 80077c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077c8:	2206      	movs	r2, #6
 80077ca:	f7f8 fd21 	bl	8000210 <memchr>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d03f      	beq.n	8007852 <_vfiprintf_r+0x20a>
 80077d2:	4b26      	ldr	r3, [pc, #152]	@ (800786c <_vfiprintf_r+0x224>)
 80077d4:	bb1b      	cbnz	r3, 800781e <_vfiprintf_r+0x1d6>
 80077d6:	9b03      	ldr	r3, [sp, #12]
 80077d8:	3307      	adds	r3, #7
 80077da:	f023 0307 	bic.w	r3, r3, #7
 80077de:	3308      	adds	r3, #8
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e4:	443b      	add	r3, r7
 80077e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80077e8:	e76a      	b.n	80076c0 <_vfiprintf_r+0x78>
 80077ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80077ee:	460c      	mov	r4, r1
 80077f0:	2001      	movs	r0, #1
 80077f2:	e7a8      	b.n	8007746 <_vfiprintf_r+0xfe>
 80077f4:	2300      	movs	r3, #0
 80077f6:	3401      	adds	r4, #1
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	4619      	mov	r1, r3
 80077fc:	f04f 0c0a 	mov.w	ip, #10
 8007800:	4620      	mov	r0, r4
 8007802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007806:	3a30      	subs	r2, #48	@ 0x30
 8007808:	2a09      	cmp	r2, #9
 800780a:	d903      	bls.n	8007814 <_vfiprintf_r+0x1cc>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0c6      	beq.n	800779e <_vfiprintf_r+0x156>
 8007810:	9105      	str	r1, [sp, #20]
 8007812:	e7c4      	b.n	800779e <_vfiprintf_r+0x156>
 8007814:	fb0c 2101 	mla	r1, ip, r1, r2
 8007818:	4604      	mov	r4, r0
 800781a:	2301      	movs	r3, #1
 800781c:	e7f0      	b.n	8007800 <_vfiprintf_r+0x1b8>
 800781e:	ab03      	add	r3, sp, #12
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	462a      	mov	r2, r5
 8007824:	4b12      	ldr	r3, [pc, #72]	@ (8007870 <_vfiprintf_r+0x228>)
 8007826:	a904      	add	r1, sp, #16
 8007828:	4630      	mov	r0, r6
 800782a:	f7fd fda1 	bl	8005370 <_printf_float>
 800782e:	4607      	mov	r7, r0
 8007830:	1c78      	adds	r0, r7, #1
 8007832:	d1d6      	bne.n	80077e2 <_vfiprintf_r+0x19a>
 8007834:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007836:	07d9      	lsls	r1, r3, #31
 8007838:	d405      	bmi.n	8007846 <_vfiprintf_r+0x1fe>
 800783a:	89ab      	ldrh	r3, [r5, #12]
 800783c:	059a      	lsls	r2, r3, #22
 800783e:	d402      	bmi.n	8007846 <_vfiprintf_r+0x1fe>
 8007840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007842:	f7fe fad1 	bl	8005de8 <__retarget_lock_release_recursive>
 8007846:	89ab      	ldrh	r3, [r5, #12]
 8007848:	065b      	lsls	r3, r3, #25
 800784a:	f53f af1f 	bmi.w	800768c <_vfiprintf_r+0x44>
 800784e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007850:	e71e      	b.n	8007690 <_vfiprintf_r+0x48>
 8007852:	ab03      	add	r3, sp, #12
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	462a      	mov	r2, r5
 8007858:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <_vfiprintf_r+0x228>)
 800785a:	a904      	add	r1, sp, #16
 800785c:	4630      	mov	r0, r6
 800785e:	f7fe f81f 	bl	80058a0 <_printf_i>
 8007862:	e7e4      	b.n	800782e <_vfiprintf_r+0x1e6>
 8007864:	08007ebf 	.word	0x08007ebf
 8007868:	08007ec9 	.word	0x08007ec9
 800786c:	08005371 	.word	0x08005371
 8007870:	08007625 	.word	0x08007625
 8007874:	08007ec5 	.word	0x08007ec5

08007878 <__swbuf_r>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	460e      	mov	r6, r1
 800787c:	4614      	mov	r4, r2
 800787e:	4605      	mov	r5, r0
 8007880:	b118      	cbz	r0, 800788a <__swbuf_r+0x12>
 8007882:	6a03      	ldr	r3, [r0, #32]
 8007884:	b90b      	cbnz	r3, 800788a <__swbuf_r+0x12>
 8007886:	f7fe f9b7 	bl	8005bf8 <__sinit>
 800788a:	69a3      	ldr	r3, [r4, #24]
 800788c:	60a3      	str	r3, [r4, #8]
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	071a      	lsls	r2, r3, #28
 8007892:	d501      	bpl.n	8007898 <__swbuf_r+0x20>
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	b943      	cbnz	r3, 80078aa <__swbuf_r+0x32>
 8007898:	4621      	mov	r1, r4
 800789a:	4628      	mov	r0, r5
 800789c:	f000 f82a 	bl	80078f4 <__swsetup_r>
 80078a0:	b118      	cbz	r0, 80078aa <__swbuf_r+0x32>
 80078a2:	f04f 37ff 	mov.w	r7, #4294967295
 80078a6:	4638      	mov	r0, r7
 80078a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	6922      	ldr	r2, [r4, #16]
 80078ae:	1a98      	subs	r0, r3, r2
 80078b0:	6963      	ldr	r3, [r4, #20]
 80078b2:	b2f6      	uxtb	r6, r6
 80078b4:	4283      	cmp	r3, r0
 80078b6:	4637      	mov	r7, r6
 80078b8:	dc05      	bgt.n	80078c6 <__swbuf_r+0x4e>
 80078ba:	4621      	mov	r1, r4
 80078bc:	4628      	mov	r0, r5
 80078be:	f7ff fde9 	bl	8007494 <_fflush_r>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d1ed      	bne.n	80078a2 <__swbuf_r+0x2a>
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	60a3      	str	r3, [r4, #8]
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	6022      	str	r2, [r4, #0]
 80078d2:	701e      	strb	r6, [r3, #0]
 80078d4:	6962      	ldr	r2, [r4, #20]
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	429a      	cmp	r2, r3
 80078da:	d004      	beq.n	80078e6 <__swbuf_r+0x6e>
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	07db      	lsls	r3, r3, #31
 80078e0:	d5e1      	bpl.n	80078a6 <__swbuf_r+0x2e>
 80078e2:	2e0a      	cmp	r6, #10
 80078e4:	d1df      	bne.n	80078a6 <__swbuf_r+0x2e>
 80078e6:	4621      	mov	r1, r4
 80078e8:	4628      	mov	r0, r5
 80078ea:	f7ff fdd3 	bl	8007494 <_fflush_r>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d0d9      	beq.n	80078a6 <__swbuf_r+0x2e>
 80078f2:	e7d6      	b.n	80078a2 <__swbuf_r+0x2a>

080078f4 <__swsetup_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4b29      	ldr	r3, [pc, #164]	@ (800799c <__swsetup_r+0xa8>)
 80078f8:	4605      	mov	r5, r0
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	460c      	mov	r4, r1
 80078fe:	b118      	cbz	r0, 8007908 <__swsetup_r+0x14>
 8007900:	6a03      	ldr	r3, [r0, #32]
 8007902:	b90b      	cbnz	r3, 8007908 <__swsetup_r+0x14>
 8007904:	f7fe f978 	bl	8005bf8 <__sinit>
 8007908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800790c:	0719      	lsls	r1, r3, #28
 800790e:	d422      	bmi.n	8007956 <__swsetup_r+0x62>
 8007910:	06da      	lsls	r2, r3, #27
 8007912:	d407      	bmi.n	8007924 <__swsetup_r+0x30>
 8007914:	2209      	movs	r2, #9
 8007916:	602a      	str	r2, [r5, #0]
 8007918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800791c:	81a3      	strh	r3, [r4, #12]
 800791e:	f04f 30ff 	mov.w	r0, #4294967295
 8007922:	e033      	b.n	800798c <__swsetup_r+0x98>
 8007924:	0758      	lsls	r0, r3, #29
 8007926:	d512      	bpl.n	800794e <__swsetup_r+0x5a>
 8007928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800792a:	b141      	cbz	r1, 800793e <__swsetup_r+0x4a>
 800792c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007930:	4299      	cmp	r1, r3
 8007932:	d002      	beq.n	800793a <__swsetup_r+0x46>
 8007934:	4628      	mov	r0, r5
 8007936:	f7ff f8a7 	bl	8006a88 <_free_r>
 800793a:	2300      	movs	r3, #0
 800793c:	6363      	str	r3, [r4, #52]	@ 0x34
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007944:	81a3      	strh	r3, [r4, #12]
 8007946:	2300      	movs	r3, #0
 8007948:	6063      	str	r3, [r4, #4]
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f043 0308 	orr.w	r3, r3, #8
 8007954:	81a3      	strh	r3, [r4, #12]
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	b94b      	cbnz	r3, 800796e <__swsetup_r+0x7a>
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007964:	d003      	beq.n	800796e <__swsetup_r+0x7a>
 8007966:	4621      	mov	r1, r4
 8007968:	4628      	mov	r0, r5
 800796a:	f000 f883 	bl	8007a74 <__smakebuf_r>
 800796e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007972:	f013 0201 	ands.w	r2, r3, #1
 8007976:	d00a      	beq.n	800798e <__swsetup_r+0x9a>
 8007978:	2200      	movs	r2, #0
 800797a:	60a2      	str	r2, [r4, #8]
 800797c:	6962      	ldr	r2, [r4, #20]
 800797e:	4252      	negs	r2, r2
 8007980:	61a2      	str	r2, [r4, #24]
 8007982:	6922      	ldr	r2, [r4, #16]
 8007984:	b942      	cbnz	r2, 8007998 <__swsetup_r+0xa4>
 8007986:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800798a:	d1c5      	bne.n	8007918 <__swsetup_r+0x24>
 800798c:	bd38      	pop	{r3, r4, r5, pc}
 800798e:	0799      	lsls	r1, r3, #30
 8007990:	bf58      	it	pl
 8007992:	6962      	ldrpl	r2, [r4, #20]
 8007994:	60a2      	str	r2, [r4, #8]
 8007996:	e7f4      	b.n	8007982 <__swsetup_r+0x8e>
 8007998:	2000      	movs	r0, #0
 800799a:	e7f7      	b.n	800798c <__swsetup_r+0x98>
 800799c:	20000020 	.word	0x20000020

080079a0 <_raise_r>:
 80079a0:	291f      	cmp	r1, #31
 80079a2:	b538      	push	{r3, r4, r5, lr}
 80079a4:	4605      	mov	r5, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	d904      	bls.n	80079b4 <_raise_r+0x14>
 80079aa:	2316      	movs	r3, #22
 80079ac:	6003      	str	r3, [r0, #0]
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80079b6:	b112      	cbz	r2, 80079be <_raise_r+0x1e>
 80079b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079bc:	b94b      	cbnz	r3, 80079d2 <_raise_r+0x32>
 80079be:	4628      	mov	r0, r5
 80079c0:	f000 f830 	bl	8007a24 <_getpid_r>
 80079c4:	4622      	mov	r2, r4
 80079c6:	4601      	mov	r1, r0
 80079c8:	4628      	mov	r0, r5
 80079ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079ce:	f000 b817 	b.w	8007a00 <_kill_r>
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d00a      	beq.n	80079ec <_raise_r+0x4c>
 80079d6:	1c59      	adds	r1, r3, #1
 80079d8:	d103      	bne.n	80079e2 <_raise_r+0x42>
 80079da:	2316      	movs	r3, #22
 80079dc:	6003      	str	r3, [r0, #0]
 80079de:	2001      	movs	r0, #1
 80079e0:	e7e7      	b.n	80079b2 <_raise_r+0x12>
 80079e2:	2100      	movs	r1, #0
 80079e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80079e8:	4620      	mov	r0, r4
 80079ea:	4798      	blx	r3
 80079ec:	2000      	movs	r0, #0
 80079ee:	e7e0      	b.n	80079b2 <_raise_r+0x12>

080079f0 <raise>:
 80079f0:	4b02      	ldr	r3, [pc, #8]	@ (80079fc <raise+0xc>)
 80079f2:	4601      	mov	r1, r0
 80079f4:	6818      	ldr	r0, [r3, #0]
 80079f6:	f7ff bfd3 	b.w	80079a0 <_raise_r>
 80079fa:	bf00      	nop
 80079fc:	20000020 	.word	0x20000020

08007a00 <_kill_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d07      	ldr	r5, [pc, #28]	@ (8007a20 <_kill_r+0x20>)
 8007a04:	2300      	movs	r3, #0
 8007a06:	4604      	mov	r4, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f7f9 fd5f 	bl	80014d0 <_kill>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	d102      	bne.n	8007a1c <_kill_r+0x1c>
 8007a16:	682b      	ldr	r3, [r5, #0]
 8007a18:	b103      	cbz	r3, 8007a1c <_kill_r+0x1c>
 8007a1a:	6023      	str	r3, [r4, #0]
 8007a1c:	bd38      	pop	{r3, r4, r5, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000478 	.word	0x20000478

08007a24 <_getpid_r>:
 8007a24:	f7f9 bd4c 	b.w	80014c0 <_getpid>

08007a28 <__swhatbuf_r>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a30:	2900      	cmp	r1, #0
 8007a32:	b096      	sub	sp, #88	@ 0x58
 8007a34:	4615      	mov	r5, r2
 8007a36:	461e      	mov	r6, r3
 8007a38:	da0d      	bge.n	8007a56 <__swhatbuf_r+0x2e>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a40:	f04f 0100 	mov.w	r1, #0
 8007a44:	bf14      	ite	ne
 8007a46:	2340      	movne	r3, #64	@ 0x40
 8007a48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	6031      	str	r1, [r6, #0]
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	b016      	add	sp, #88	@ 0x58
 8007a54:	bd70      	pop	{r4, r5, r6, pc}
 8007a56:	466a      	mov	r2, sp
 8007a58:	f000 f848 	bl	8007aec <_fstat_r>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	dbec      	blt.n	8007a3a <__swhatbuf_r+0x12>
 8007a60:	9901      	ldr	r1, [sp, #4]
 8007a62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a6a:	4259      	negs	r1, r3
 8007a6c:	4159      	adcs	r1, r3
 8007a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a72:	e7eb      	b.n	8007a4c <__swhatbuf_r+0x24>

08007a74 <__smakebuf_r>:
 8007a74:	898b      	ldrh	r3, [r1, #12]
 8007a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a78:	079d      	lsls	r5, r3, #30
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	d507      	bpl.n	8007a90 <__smakebuf_r+0x1c>
 8007a80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	6123      	str	r3, [r4, #16]
 8007a88:	2301      	movs	r3, #1
 8007a8a:	6163      	str	r3, [r4, #20]
 8007a8c:	b003      	add	sp, #12
 8007a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a90:	ab01      	add	r3, sp, #4
 8007a92:	466a      	mov	r2, sp
 8007a94:	f7ff ffc8 	bl	8007a28 <__swhatbuf_r>
 8007a98:	9f00      	ldr	r7, [sp, #0]
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f7ff f866 	bl	8006b70 <_malloc_r>
 8007aa4:	b948      	cbnz	r0, 8007aba <__smakebuf_r+0x46>
 8007aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aaa:	059a      	lsls	r2, r3, #22
 8007aac:	d4ee      	bmi.n	8007a8c <__smakebuf_r+0x18>
 8007aae:	f023 0303 	bic.w	r3, r3, #3
 8007ab2:	f043 0302 	orr.w	r3, r3, #2
 8007ab6:	81a3      	strh	r3, [r4, #12]
 8007ab8:	e7e2      	b.n	8007a80 <__smakebuf_r+0xc>
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	6020      	str	r0, [r4, #0]
 8007abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ac2:	81a3      	strh	r3, [r4, #12]
 8007ac4:	9b01      	ldr	r3, [sp, #4]
 8007ac6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007aca:	b15b      	cbz	r3, 8007ae4 <__smakebuf_r+0x70>
 8007acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f000 f81d 	bl	8007b10 <_isatty_r>
 8007ad6:	b128      	cbz	r0, 8007ae4 <__smakebuf_r+0x70>
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	f023 0303 	bic.w	r3, r3, #3
 8007ade:	f043 0301 	orr.w	r3, r3, #1
 8007ae2:	81a3      	strh	r3, [r4, #12]
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	431d      	orrs	r5, r3
 8007ae8:	81a5      	strh	r5, [r4, #12]
 8007aea:	e7cf      	b.n	8007a8c <__smakebuf_r+0x18>

08007aec <_fstat_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d07      	ldr	r5, [pc, #28]	@ (8007b0c <_fstat_r+0x20>)
 8007af0:	2300      	movs	r3, #0
 8007af2:	4604      	mov	r4, r0
 8007af4:	4608      	mov	r0, r1
 8007af6:	4611      	mov	r1, r2
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	f7f9 fd49 	bl	8001590 <_fstat>
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	d102      	bne.n	8007b08 <_fstat_r+0x1c>
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	b103      	cbz	r3, 8007b08 <_fstat_r+0x1c>
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	bd38      	pop	{r3, r4, r5, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000478 	.word	0x20000478

08007b10 <_isatty_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4d06      	ldr	r5, [pc, #24]	@ (8007b2c <_isatty_r+0x1c>)
 8007b14:	2300      	movs	r3, #0
 8007b16:	4604      	mov	r4, r0
 8007b18:	4608      	mov	r0, r1
 8007b1a:	602b      	str	r3, [r5, #0]
 8007b1c:	f7f9 fd48 	bl	80015b0 <_isatty>
 8007b20:	1c43      	adds	r3, r0, #1
 8007b22:	d102      	bne.n	8007b2a <_isatty_r+0x1a>
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	b103      	cbz	r3, 8007b2a <_isatty_r+0x1a>
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	20000478 	.word	0x20000478

08007b30 <_init>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	bf00      	nop
 8007b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b36:	bc08      	pop	{r3}
 8007b38:	469e      	mov	lr, r3
 8007b3a:	4770      	bx	lr

08007b3c <_fini>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	bf00      	nop
 8007b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b42:	bc08      	pop	{r3}
 8007b44:	469e      	mov	lr, r3
 8007b46:	4770      	bx	lr
